// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`recordToDom should create a value with formatting 1`] = `
<body>
  <em
    data-rich-text-format-boundary="true"
  >
    test
  </em>
  
</body>
`;

exports[`recordToDom should create a value with formatting 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    4,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value with formatting for split tags 1`] = `
<body>
  <em
    data-rich-text-format-boundary="true"
  >
    test
  </em>
  
</body>
`;

exports[`recordToDom should create a value with formatting for split tags 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value with formatting with attributes 1`] = `
<body>
  <a
    data-rich-text-format-boundary="true"
    href="#"
  >
    test
  </a>
  
</body>
`;

exports[`recordToDom should create a value with formatting with attributes 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    4,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value with image object 1`] = `
<body>
  
  <img
    src=""
  />
  
</body>
`;

exports[`recordToDom should create a value with image object 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should create a value with image object and formatting 1`] = `
<body>
  <em
    data-rich-text-format-boundary="true"
  >
    
    <img
      src=""
    />
  </em>
  
</body>
`;

exports[`recordToDom should create a value with image object and formatting 2`] = `
Object {
  "endPath": Array [
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value with image object and text after 1`] = `
<body>
  <em>
    
    <img
      src=""
    />
    te
  </em>
  st
</body>
`;

exports[`recordToDom should create a value with image object and text after 2`] = `
Object {
  "endPath": Array [
    1,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value with image object and text before 1`] = `
<body>
  te
  <em>
    st
    <img
      src=""
    />
  </em>
  
</body>
`;

exports[`recordToDom should create a value with image object and text before 2`] = `
Object {
  "endPath": Array [
    1,
    2,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should create a value with nested formatting 1`] = `
<body>
  <em>
    <strong
      data-rich-text-format-boundary="true"
    >
      test
    </strong>
  </em>
  
</body>
`;

exports[`recordToDom should create a value with nested formatting 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    0,
    4,
  ],
  "startPath": Array [
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should create a value without formatting 1`] = `
<body>
  test
</body>
`;

exports[`recordToDom should create a value without formatting 2`] = `
Object {
  "endPath": Array [
    0,
    4,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should create an empty value 1`] = `
<body>
  
  ﻿
</body>
`;

exports[`recordToDom should create an empty value 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should create an empty value from empty tags 1`] = `
<body>
  
  ﻿
</body>
`;

exports[`recordToDom should create an empty value from empty tags 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should disarm on* attribute 1`] = `
<body>
  
  <img
    data-disable-rich-text-onerror="alert('1')"
  />
  
</body>
`;

exports[`recordToDom should disarm on* attribute 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should disarm script 1`] = `
<body>
  
  <script
    data-rich-text-script="alert(%221%22)"
  />
  
</body>
`;

exports[`recordToDom should disarm script 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should filter format boundary attributes 1`] = `
<body>
  <strong
    data-rich-text-format-boundary="true"
  >
    test
  </strong>
  
</body>
`;

exports[`recordToDom should filter format boundary attributes 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    4,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle br 1`] = `
<body>
  
  <br
    data-rich-text-line-break="true"
  />
  
  ﻿
</body>
`;

exports[`recordToDom should handle br 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should handle br with formatting 1`] = `
<body>
  <em
    data-rich-text-format-boundary="true"
  >
    
    <br
      data-rich-text-line-break="true"
    />
  </em>
  
  ﻿
</body>
`;

exports[`recordToDom should handle br with formatting 2`] = `
Object {
  "endPath": Array [
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle br with text 1`] = `
<body>
  te
  <br
    data-rich-text-line-break="true"
  />
  st
</body>
`;

exports[`recordToDom should handle br with text 2`] = `
Object {
  "endPath": Array [
    2,
  ],
  "startPath": Array [
    0,
    2,
  ],
}
`;

exports[`recordToDom should handle double br 1`] = `
<body>
  a
  <br
    data-rich-text-line-break="true"
  />
  <br
    data-rich-text-line-break="true"
  />
  b
</body>
`;

exports[`recordToDom should handle double br 2`] = `
Object {
  "endPath": Array [
    3,
  ],
  "startPath": Array [
    2,
  ],
}
`;

exports[`recordToDom should handle empty list value 1`] = `
<body>
  <li>
    
    ﻿
  </li>
</body>
`;

exports[`recordToDom should handle empty list value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle empty multiline value 1`] = `
<body>
  <p>
    
    ﻿
  </p>
</body>
`;

exports[`recordToDom should handle empty multiline value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle middle empty list value 1`] = `
<body>
  <li>
    ﻿
  </li>
  <li>
    ﻿
  </li>
  <li>
    
    ﻿
  </li>
</body>
`;

exports[`recordToDom should handle middle empty list value 2`] = `
Object {
  "endPath": Array [
    1,
    1,
  ],
  "startPath": Array [
    1,
    1,
  ],
}
`;

exports[`recordToDom should handle multiline list value 1`] = `
<body>
  <li>
    one
    <ul>
      <li>
        a
      </li>
      <li>
        b
        <ol>
          <li>
            1
          </li>
          <li>
            2
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>
    three
  </li>
</body>
`;

exports[`recordToDom should handle multiline list value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
    1,
    1,
    0,
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle multiline value 1`] = `
<body>
  <p>
    one
  </p>
  <p>
    two
  </p>
</body>
`;

exports[`recordToDom should handle multiline value 2`] = `
Object {
  "endPath": Array [
    1,
    1,
  ],
  "startPath": Array [
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle multiline value with element selection 1`] = `
<body>
  <li>
    one
  </li>
</body>
`;

exports[`recordToDom should handle multiline value with element selection 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    3,
  ],
  "startPath": Array [
    0,
    0,
    3,
  ],
}
`;

exports[`recordToDom should handle multiline value with empty 1`] = `
<body>
  <p>
    one
  </p>
  <p>
    
    ﻿
  </p>
</body>
`;

exports[`recordToDom should handle multiline value with empty 2`] = `
Object {
  "endPath": Array [
    1,
    1,
  ],
  "startPath": Array [
    1,
    1,
  ],
}
`;

exports[`recordToDom should handle nested empty list value 1`] = `
<body>
  <li>
    ﻿
    <ul>
      <li>
        
        ﻿
      </li>
    </ul>
  </li>
</body>
`;

exports[`recordToDom should handle nested empty list value 2`] = `
Object {
  "endPath": Array [
    0,
    1,
    0,
    1,
  ],
  "startPath": Array [
    0,
    1,
    0,
    1,
  ],
}
`;

exports[`recordToDom should handle selection before br 1`] = `
<body>
  a
  <br
    data-rich-text-line-break="true"
  />
  <br
    data-rich-text-line-break="true"
  />
  b
</body>
`;

exports[`recordToDom should handle selection before br 2`] = `
Object {
  "endPath": Array [
    2,
  ],
  "startPath": Array [
    2,
  ],
}
`;

exports[`recordToDom should ignore formats at line separator 1`] = `
<body>
  <p>
    <em>
      one
    </em>
  </p>
  <p>
    <em>
      two
    </em>
    
  </p>
</body>
`;

exports[`recordToDom should ignore formats at line separator 2`] = `
Object {
  "endPath": Array [],
  "startPath": Array [],
}
`;

exports[`recordToDom should ignore manually added object replacement character 1`] = `
<body>
  test
</body>
`;

exports[`recordToDom should ignore manually added object replacement character 2`] = `
Object {
  "endPath": Array [
    0,
    4,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should ignore manually added object replacement character with formatting 1`] = `
<body>
  <em
    data-rich-text-format-boundary="true"
  >
    hi
  </em>
  
</body>
`;

exports[`recordToDom should ignore manually added object replacement character with formatting 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should not error with overlapping formats (1) 1`] = `
<body>
  <a
    href="#"
  >
    <em>
      1
    </em>
    <strong
      data-rich-text-format-boundary="true"
    >
      2
    </strong>
  </a>
  
</body>
`;

exports[`recordToDom should not error with overlapping formats (1) 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    0,
    1,
  ],
  "startPath": Array [
    0,
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should not error with overlapping formats (2) 1`] = `
<body>
  <em>
    <a
      data-rich-text-format-boundary="true"
      href="#"
    >
      1
    </a>
  </em>
  <strong>
    <a
      data-rich-text-format-boundary="true"
      href="#"
    >
      2
    </a>
  </strong>
  
</body>
`;

exports[`recordToDom should not error with overlapping formats (2) 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    0,
    1,
  ],
  "startPath": Array [
    0,
    0,
    0,
    1,
  ],
}
`;

exports[`recordToDom should preserve emoji 1`] = `
<body>
  🍒
</body>
`;

exports[`recordToDom should preserve emoji 2`] = `
Object {
  "endPath": Array [
    0,
    2,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should preserve emoji in formatting 1`] = `
<body>
  <em
    data-rich-text-format-boundary="true"
  >
    🍒
  </em>
  
</body>
`;

exports[`recordToDom should preserve emoji in formatting 2`] = `
Object {
  "endPath": Array [
    0,
    0,
    2,
  ],
  "startPath": Array [
    0,
    1,
  ],
}
`;

exports[`recordToDom should preserve non breaking space 1`] = `
<body>
  test  test
</body>
`;

exports[`recordToDom should preserve non breaking space 2`] = `
Object {
  "endPath": Array [
    0,
    5,
  ],
  "startPath": Array [
    0,
    5,
  ],
}
`;

exports[`recordToDom should remove padding 1`] = `
<body>
  
  ﻿
</body>
`;

exports[`recordToDom should remove padding 2`] = `
Object {
  "endPath": Array [
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;

exports[`recordToDom should replace characters to format HTML with space 1`] = `
<body>
   
</body>
`;

exports[`recordToDom should replace characters to format HTML with space 2`] = `
Object {
  "endPath": Array [
    0,
    1,
  ],
  "startPath": Array [
    1,
  ],
}
`;
