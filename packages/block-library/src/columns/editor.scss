@mixin flex-full-height() {
	display: flex;
	flex-direction: column;
	flex: 1;
}


// These margins make sure that nested blocks stack/overlay with the parent block chrome
// This is sort of an experiment at making sure the editor looks as much like the end result as possible
// Potentially the rules here can apply to all nested blocks and enable stacking, in which case it should be moved elsewhere
// When using CSS grid, margins do not collapse on the container.
.wp-block-columns .block-editor-block-list__layout {
	margin-left: 0;
	margin-right: 0;

	// This max-width is used to constrain the main editor column, it should not cascade into columns
	.block-editor-block-list__block {
		max-width: none;
	}
}

// Fullwide: show margin left/right to ensure there's room for the side UI.
// This is not a 1:1 preview with the front-end where these margins would presumably be zero.
// @todo This could be revisited, by for example showing this margin only when the parent block was selected first.
// Then at least an unselected columns block would be an accurate preview.
.block-editor-block-list__block[data-align="full"] .wp-block-columns > .block-editor-inner-blocks {
	padding-left: $block-padding;
	padding-right: $block-padding;

	@include break-small() {
		padding-left: $block-padding + $block-padding + $block-side-ui-width + $block-side-ui-clearance + $block-side-ui-clearance;
		padding-right: $block-padding + $block-padding + $block-side-ui-width + $block-side-ui-clearance + $block-side-ui-clearance;
	}
}

.wp-block-columns {
	display: block;

	> .block-editor-inner-blocks > .block-editor-block-list__layout {
		display: flex;

		// Responsiveness: Allow wrapping on mobile.
		flex-wrap: wrap;

		@include break-medium() {
			flex-wrap: nowrap;
		}
		// Set full heights on Columns to enable vertical alignment preview
		> [data-type="core/column"],
		> [data-type="core/column"] > .editor-block-list__block-edit,
		> [data-type="core/column"] > .editor-block-list__block-edit > div[data-block],
		> [data-type="core/column"] > .editor-block-list__block-edit .block-core-columns {
			@include flex-full-height();
		}
		// Adjust the individual column block.
		> [data-type="core/column"] {
			// Remove Block "padding" so individual Column is flush with parent Columns
			> .block-editor-block-list__block-edit::before {
				left: 0;
				right: 0;
			}
			> .block-editor-block-list__block-edit > .block-editor-block-contextual-toolbar {
				margin-left: -$border-width;
			}

			// On mobile, only a single column is shown, so match adjacent block paddings.
			padding-left: 0;
			padding-right: 0;
			margin-left: -$block-padding;
			margin-right: -$block-padding;
			@include break-small() {
				margin-left: $block-padding;
				margin-right: $block-padding;
			}

			// Prevent the columns from growing wider than their distributed sizes.
			min-width: 0;

			// Prevent long unbroken words from overflowing.
			word-break: break-word; // For back-compat.
			overflow-wrap: break-word; // New standard.

			// Responsiveness: Show at most one columns on mobile.
			flex-basis: 100%;

			// Beyond mobile, allow 2 columns.
			@include break-small() {
				flex-basis: calc(50% - (#{$grid-size-large} + #{$block-padding * 2}));
				flex-grow: 0;
			}

			// Add space between columns. Themes can customize this if they wish to work differently.
			// This has to match the same padding applied in style.scss.
			// Only apply this beyond the mobile breakpoint, as there's only a single column on mobile.
			@include break-small() {
				&:nth-child(even) {
					margin-left: calc(#{$grid-size-large * 2} + #{$block-padding});
				}
			}

			// When columns are in a single row, add space before all except the first.
			@include break-medium() {
				&:not(:first-child) {
					margin-left: calc(#{$grid-size-large * 2} + #{$block-padding});
				}
			}
		}
	}
}

/**
 * Vertical Alignment Preview
 * note: specificity is important here to ensure individual
 * * columns alignment is prioritised over parent column alignment
 *
 */
.are-vertically-aligned-top .block-core-columns,
div.block-core-columns.is-vertically-aligned-top {
	justify-content: flex-start;
}

.are-vertically-aligned-center .block-core-columns,
div.block-core-columns.is-vertically-aligned-center {
	justify-content: center;
}

.are-vertically-aligned-bottom .block-core-columns,
div.block-core-columns.is-vertically-aligned-bottom {
	justify-content: flex-end;
}


/**
 * Fixes single Column breadcrumb to RHS of Block boundary
 */
[data-type="core/column"] > .editor-block-list__block-edit > .editor-block-list__breadcrumb {
	right: 0;
}
