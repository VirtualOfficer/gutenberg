[
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/validation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "DecodeEntityParser",
				"namespace": "blocks",
				"line": 229,
				"end_line": 243,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 229,
						"end_line": 243,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						}
					},
					{
						"name": "parse",
						"namespace": "",
						"aliases": [],
						"line": 238,
						"end_line": 242,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "entity",
								"default": null,
								"type": "string"
							}
						],
						"doc": {
							"description": "Returns a substitute string for an entity string sequence between `&`",
							"long_description": "and `;`, or undefined if no substitution should occur.",
							"tags": [
								{
									"name": "param",
									"content": "Entity fragment discovered in HTML.",
									"types": [
										"string"
									],
									"variable": "entity"
								},
								{
									"name": "return",
									"content": "Entity substitute value.",
									"types": [
										"string"
									]
								}
							]
						},
						"hooks": []
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": []
				}
			}
		],
		"functions": [
			{
				"name": "isValidCharacterReference",
				"namespace": "blocks",
				"aliases": [],
				"line": 214,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given string is a valid character reference segment, or",
					"long_description": "false otherwise. The text should be stripped of `&` and `;` demarcations.",
					"tags": [
						{
							"name": "param",
							"content": "Text to test.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Whether text is valid character reference.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTextPiecesSplitOnWhitespace",
				"namespace": "blocks",
				"aliases": [],
				"line": 284,
				"end_line": 286,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a specified string, returns an array of strings split by consecutive",
					"long_description": "whitespace, ignoring leading or trailing whitespace.",
					"tags": [
						{
							"name": "param",
							"content": "Original text.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Text pieces split on whitespace.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTextWithCollapsedWhitespace",
				"namespace": "blocks",
				"aliases": [],
				"line": 296,
				"end_line": 302,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a specified string, returns a new trimmed string where all consecutive",
					"long_description": "whitespace is collapsed to a single space.",
					"tags": [
						{
							"name": "param",
							"content": "Original text.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Trimmed text with consecutive whitespace collapsed.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMeaningfulAttributePairs",
				"namespace": "blocks",
				"aliases": [],
				"line": 315,
				"end_line": 324,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "token",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns attribute pairs of the given StartTag token, including only pairs",
					"long_description": "where the value is non-empty or the attribute is a boolean attribute, an\nenumerated attribute, or a custom data- attribute.",
					"tags": [
						{
							"name": "param",
							"content": "StartTag token.",
							"types": [
								"Object"
							],
							"variable": "token"
						},
						{
							"name": "return",
							"content": "Attribute pairs.",
							"types": [
								"Array.<Array>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEquivalentTextTokens",
				"namespace": "blocks",
				"aliases": [],
				"line": 335,
				"end_line": 357,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "Object"
					},
					{
						"name": "expected",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if two text tokens (with `chars` property) are equivalent, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Actual token.",
							"types": [
								"Object"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected token.",
							"types": [
								"Object"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether two text tokens are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalizedStyleValue",
				"namespace": "blocks",
				"aliases": [],
				"line": 367,
				"end_line": 371,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a style value, returns a normalized style value for strict equality",
					"long_description": "comparison.",
					"tags": [
						{
							"name": "param",
							"content": "Style value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized style value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getStyleProperties",
				"namespace": "blocks",
				"aliases": [],
				"line": 380,
				"end_line": 399,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a style attribute string, returns an object of style properties.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Style attribute.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Style properties.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEqualTagAttributePairs",
				"namespace": "blocks",
				"aliases": [],
				"line": 429,
				"end_line": 466,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "Array.<Array>"
					},
					{
						"name": "expected",
						"default": null,
						"type": "Array.<Array>"
					}
				],
				"doc": {
					"description": "Given two sets of attribute tuples, returns true if the attribute sets are",
					"long_description": "equivalent.",
					"tags": [
						{
							"name": "param",
							"content": "Actual attributes tuples.",
							"types": [
								"Array.<Array>"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected attributes tuples.",
							"types": [
								"Array.<Array>"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether attributes are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNextNonWhitespaceToken",
				"namespace": "blocks",
				"aliases": [],
				"line": 498,
				"end_line": 509,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tokens",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Given an array of tokens, returns the first token which is not purely",
					"long_description": "whitespace.\n\nMutates the tokens array.",
					"tags": [
						{
							"name": "param",
							"content": "Set of tokens to search.",
							"types": [
								"Array.<Object>"
							],
							"variable": "tokens"
						},
						{
							"name": "return",
							"content": "Next non-whitespace token.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLTokens",
				"namespace": "blocks",
				"aliases": [],
				"line": 519,
				"end_line": 527,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Tokenize an HTML string, gracefully handling any errors thrown during",
					"long_description": "underlying tokenization.",
					"tags": [
						{
							"name": "param",
							"content": "HTML string to tokenize.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "Array of valid tokenized HTML elements, or null on error",
							"types": [
								"Array.<Object>",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isClosedByToken",
				"namespace": "blocks",
				"aliases": [],
				"line": 537,
				"end_line": 549,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "currentToken",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nextToken",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the next HTML token closes the current token.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current token to compare with.",
							"types": [
								"Object"
							],
							"variable": "currentToken"
						},
						{
							"name": "param",
							"content": "Next token to compare against.",
							"types": [
								"Object",
								"undefined"
							],
							"variable": "nextToken"
						},
						{
							"name": "return",
							"content": "true if `nextToken` closes `currentToken`, false otherwise",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEquivalentHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 561,
				"end_line": 614,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "string"
					},
					{
						"name": "expected",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given HTML strings are effectively equivalent, or",
					"long_description": "false otherwise. Invalid HTML is not considered equivalent, even if the\nstrings directly match.",
					"tags": [
						{
							"name": "param",
							"content": "Actual HTML string.",
							"types": [
								"string"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected HTML string.",
							"types": [
								"string"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether HTML strings are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidBlockContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 629,
				"end_line": 651,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the parsed block is valid given the input content. A block",
					"long_description": "is considered valid if, when serialized with assumed attributes, the content\nmatches the original value.\n\nLogs to console in development environments when invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Parsed block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Original block content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Whether block is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/with-global-events/listener.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "Listener",
				"namespace": "compose",
				"line": 11,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 11,
						"end_line": 43,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						}
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": []
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/custom-templated-path-webpack-plugin/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "CustomTemplatedPathPlugin",
				"namespace": "custom-templated-path-webpack-plugin",
				"line": 12,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 12,
						"end_line": 50,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "handlers",
								"type": "Object.<string, function()>"
							}
						],
						"doc": {
							"description": "CustomTemplatedPathPlugin constructor. Initializes handlers as a tuple",
							"long_description": "set of RegExp, handler, where the regular expression is used in matching\na Webpack asset path.",
							"tags": [
								{
									"name": "param",
									"content": "Object keyed by tag to match,\n                                           with function value returning\n                                           replacement string.",
									"types": [
										"Object.<string, function()>"
									],
									"variable": "handlers"
								}
							]
						}
					},
					{
						"name": "apply",
						"namespace": "",
						"aliases": [],
						"line": 36,
						"end_line": 49,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "compiler",
								"default": null,
								"type": "Object"
							}
						],
						"doc": {
							"description": "Webpack plugin application logic.",
							"long_description": "",
							"tags": [
								{
									"name": "param",
									"content": "Webpack compiler",
									"types": [
										"Object"
									],
									"variable": "compiler"
								}
							]
						},
						"hooks": []
					}
				],
				"doc": {
					"description": "CustomTemplatedPathPlugin constructor. Initializes handlers as a tuple",
					"long_description": "set of RegExp, handler, where the regular expression is used in matching\na Webpack asset path.",
					"tags": [
						{
							"name": "param",
							"content": "Object keyed by tag to match,\n                                           with function value returning\n                                           replacement string.",
							"types": [
								"Object.<string, function()>"
							],
							"variable": "handlers"
						}
					]
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/meta-boxes/meta-boxes-area/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "MetaBoxesArea",
				"namespace": "edit-post",
				"line": 17,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 17,
						"end_line": 20,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						}
					},
					{
						"name": "componentDidMount",
						"namespace": "",
						"aliases": [],
						"line": 25,
						"end_line": 30,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						},
						"hooks": []
					},
					{
						"name": "componentWillUnmount",
						"namespace": "",
						"aliases": [],
						"line": 35,
						"end_line": 39,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "Get the meta box location form from the original location.",
							"long_description": "",
							"tags": []
						},
						"hooks": []
					},
					{
						"name": "bindContainerNode",
						"namespace": "",
						"aliases": [],
						"line": 46,
						"end_line": 48,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "node",
								"default": null,
								"type": "Element"
							}
						],
						"doc": {
							"description": "Binds the metabox area container node.",
							"long_description": "",
							"tags": [
								{
									"name": "param",
									"content": "DOM Node.",
									"types": [
										"Element"
									],
									"variable": "node"
								}
							]
						},
						"hooks": []
					},
					{
						"name": "render",
						"namespace": "",
						"aliases": [],
						"line": 53,
						"end_line": 71,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						},
						"hooks": []
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": []
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-list/breadcrumb.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "BlockBreadcrumb",
				"namespace": "editor",
				"line": 23,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 23,
						"end_line": 67,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "props.clientId",
								"type": "string"
							},
							{
								"name": "props.rootClientId",
								"type": "string"
							},
							{
								"name": "props.selectRootBlock",
								"type": "function"
							}
						],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": [
								{
									"name": "param",
									"content": "Client ID of block.",
									"types": [
										"string"
									],
									"variable": "props.clientId"
								},
								{
									"name": "param",
									"content": "Client ID of block's root.",
									"types": [
										"string"
									],
									"variable": "props.rootClientId"
								},
								{
									"name": "param",
									"content": "Callback to select root block.",
									"types": [
										"function"
									],
									"variable": "props.selectRootBlock"
								}
							]
						}
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of block.",
							"types": [
								"string"
							],
							"variable": "props.clientId"
						},
						{
							"name": "param",
							"content": "Client ID of block's root.",
							"types": [
								"string"
							],
							"variable": "props.rootClientId"
						},
						{
							"name": "param",
							"content": "Callback to select root block.",
							"types": [
								"function"
							],
							"variable": "props.selectRootBlock"
						}
					]
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/ignore-nested-events/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "IgnoreNestedEvents",
				"namespace": "editor",
				"line": 25,
				"end_line": 101,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 25,
						"end_line": 101,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						}
					},
					{
						"name": "proxyEvent",
						"namespace": "",
						"aliases": [],
						"line": 45,
						"end_line": 66,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "event",
								"default": null,
								"type": "Event"
							}
						],
						"doc": {
							"description": "General event handler which only calls to its original props callback if",
							"long_description": "it has not already been handled by a descendant IgnoreNestedEvents.",
							"tags": [
								{
									"name": "param",
									"content": "Event object.",
									"types": [
										"Event"
									],
									"variable": "event"
								},
								{
									"name": "return",
									"content": "",
									"types": [
										"void"
									]
								}
							]
						},
						"hooks": []
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": []
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-saved-state/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "PostSavedState",
				"namespace": "editor",
				"line": 28,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 28,
						"end_line": 124,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "Props",
								"type": "Object"
							}
						],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": [
								{
									"name": "param",
									"content": "Component Props.",
									"types": [
										"Object"
									],
									"variable": "Props"
								}
							]
						}
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component Props.",
							"types": [
								"Object"
							],
							"variable": "Props"
						}
					]
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/preserve-scroll-in-reorder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "PreserveScrollInReorder",
				"namespace": "editor",
				"line": 23,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 23,
						"end_line": 76,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						}
					},
					{
						"name": "getOffset",
						"namespace": "",
						"aliases": [],
						"line": 47,
						"end_line": 54,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "selectionStart",
								"default": null,
								"type": "string"
							}
						],
						"doc": {
							"description": "Given the block client ID of the start of the selection, saves the",
							"long_description": "block's top offset as an instance property before a reorder is to occur.",
							"tags": [
								{
									"name": "param",
									"content": "Client ID of selected block.",
									"types": [
										"string"
									],
									"variable": "selectionStart"
								},
								{
									"name": "return",
									"content": "The scroll offset.",
									"types": [
										"number"
									]
								}
							]
						},
						"hooks": []
					},
					{
						"name": "restorePreviousOffset",
						"namespace": "",
						"aliases": [],
						"line": 61,
						"end_line": 71,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "offset",
								"default": null,
								"type": "number"
							}
						],
						"doc": {
							"description": "After a block reordering, restores the previous viewport top offset.",
							"long_description": "",
							"tags": [
								{
									"name": "param",
									"content": "The scroll offset.",
									"types": [
										"number"
									],
									"variable": "offset"
								}
							]
						},
						"hooks": []
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": []
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/src/link/positioned-at-selection.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "PositionedAtSelection",
				"namespace": "format-library",
				"line": 46,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 46,
						"end_line": 65,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": []
						}
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": []
				}
			}
		],
		"functions": [
			{
				"name": "getCurrentCaretPositionStyle",
				"namespace": "format-library",
				"aliases": [],
				"line": 14,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a style object for applying as `position: absolute` for an element",
					"long_description": "relative to the bottom-center of the current selection. Includes `top` and\n`left` style properties.",
					"tags": [
						{
							"name": "return",
							"content": "Style object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/src/components/plugin-area/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "PluginArea",
				"namespace": "plugins",
				"line": 23,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 23,
						"end_line": 73,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [],
						"doc": {
							"description": "",
							"long_description": "",
							"tags": [
								{
									"name": "return",
									"content": "Plugin area.",
									"types": [
										"WPElement"
									]
								}
							]
						}
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Plugin area.",
							"types": [
								"WPElement"
							]
						}
					]
				}
			}
		],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/token-list/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [
			{
				"name": "exports",
				"namespace": "token-list\\module",
				"line": 11,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"extends": null,
				"implements": [],
				"properties": [],
				"methods": [
					{
						"name": "constructor",
						"namespace": "",
						"aliases": [],
						"line": 11,
						"end_line": 195,
						"final": false,
						"abstract": false,
						"static": false,
						"visibility": "public",
						"arguments": [
							{
								"name": "initialValue",
								"type": "string"
							}
						],
						"doc": {
							"description": "Constructs a new instance of TokenList.",
							"long_description": "",
							"tags": [
								{
									"name": "param",
									"content": "Initial value to assign.",
									"types": [
										"string"
									],
									"variable": "initialValue"
								}
							]
						}
					}
				],
				"doc": {
					"description": "Constructs a new instance of TokenList.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Initial value to assign.",
							"types": [
								"string"
							],
							"variable": "initialValue"
						}
					]
				}
			}
		],
		"functions": [
			{
				"name": "toString",
				"namespace": "token-list",
				"aliases": [],
				"line": 70,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the stringified form of the TokenList.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Token set as string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "iterator",
				"namespace": "token-list\\Symbol",
				"aliases": [],
				"line": 81,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an iterator for the TokenList, iterating items of the set.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "TokenList iterator.",
							"types": [
								"Generator"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "item",
				"namespace": "token-list",
				"aliases": [],
				"line": 94,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the token with index `index`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Index at which to return token.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Token at index.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "contains",
				"namespace": "token-list",
				"aliases": [],
				"line": 107,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "item",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if `token` is present, and false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Token to test.",
							"types": [
								"string"
							],
							"variable": "item"
						},
						{
							"name": "return",
							"content": "Whether token is present.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "add",
				"namespace": "token-list",
				"aliases": [],
				"line": 118,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Adds all arguments passed, except those already present.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Items to add.",
							"types": [
								"string"
							],
							"variable": "items"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "remove",
				"namespace": "token-list",
				"aliases": [],
				"line": 129,
				"end_line": 131,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes arguments passed, if they are present.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Items to remove.",
							"types": [
								"string"
							],
							"variable": "items"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggle",
				"namespace": "token-list",
				"aliases": [],
				"line": 146,
				"end_line": 158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "token",
						"default": null,
						"type": "string"
					},
					{
						"name": "force",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "If `force` is not given, \"toggles\" `token`, removing it if it’s present",
					"long_description": "and adding it if it’s not present. If `force` is true, adds token (same\nas add()). If force is false, removes token (same as remove()). Returns\ntrue if `token` is now present, and false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Token to toggle.",
							"types": [
								"string"
							],
							"variable": "token"
						},
						{
							"name": "param",
							"content": "Presence to force.",
							"types": [
								"boolean"
							],
							"variable": "force"
						},
						{
							"name": "return",
							"content": "Whether token is present after toggle.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "token-list",
				"aliases": [],
				"line": 171,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "token",
						"default": null,
						"type": "string"
					},
					{
						"name": "newToken",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces `token` with `newToken`. Returns true if `token` was replaced",
					"long_description": "with `newToken`, and false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Token to replace with `newToken`.",
							"types": [
								"string"
							],
							"variable": "token"
						},
						{
							"name": "param",
							"content": "Token to use in place of `token`.",
							"types": [
								"string"
							],
							"variable": "newToken"
						},
						{
							"name": "return",
							"content": "Whether replacement occurred.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "token-list",
				"aliases": [],
				"line": 192,
				"end_line": 194,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns true if `token` is in the associated attribute’s supported",
					"long_description": "tokens. Returns false otherwise.\n\nAlways returns `true` in this implementation.",
					"tags": [
						{
							"name": "return",
							"content": "Whether token is supported.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build/addContainer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addContainer",
				"namespace": "a11y",
				"aliases": [],
				"line": 15,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "ariaLive",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Build the live regions markup.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Optional. Value for the 'aria-live' attribute, default 'polite'.",
							"types": [
								"string"
							],
							"variable": "ariaLive"
						},
						{
							"name": "return",
							"content": "$container The ARIA live region jQuery object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build/clear.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clear",
				"namespace": "a11y",
				"aliases": [],
				"line": 11,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clear the a11y-speak-region elements.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build/filterMessage.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterMessage",
				"namespace": "a11y",
				"aliases": [],
				"line": 16,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "message",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filter the message to be announced to the screenreader.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The message to be announced.",
							"types": [
								"string"
							],
							"variable": "message"
						},
						{
							"name": "return",
							"content": "The filtered message.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setup",
				"namespace": "a11y",
				"aliases": [],
				"line": 21,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Create the live regions.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "speak",
				"namespace": "a11y",
				"aliases": [],
				"line": 48,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "message",
						"default": null,
						"type": "string"
					},
					{
						"name": "ariaLive",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Update the ARIA live notification area text node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The message to be announced by Assistive Technologies.",
							"types": [
								"string"
							],
							"variable": "message"
						},
						{
							"name": "param",
							"content": "Optional. The politeness level for aria-live. Possible values:\n                         polite or assertive. Default polite.",
							"types": [
								"string"
							],
							"variable": "ariaLive"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "speak",
				"namespace": "a11y",
				"aliases": [],
				"line": 23,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "message",
						"default": null,
						"type": "string"
					},
					{
						"name": "ariaLive",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Update the ARIA live notification area text node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The message to be announced by Assistive Technologies.",
							"types": [
								"string"
							],
							"variable": "message"
						},
						{
							"name": "param",
							"content": "Optional. The politeness level for aria-live. Possible values:\n                         polite or assertive. Default polite.",
							"types": [
								"string"
							],
							"variable": "ariaLive"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build-module/addContainer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addContainer",
				"namespace": "a11y",
				"aliases": [],
				"line": 8,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "ariaLive",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Build the live regions markup.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Optional. Value for the 'aria-live' attribute, default 'polite'.",
							"types": [
								"string"
							],
							"variable": "ariaLive"
						},
						{
							"name": "return",
							"content": "$container The ARIA live region jQuery object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build-module/clear.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clear",
				"namespace": "a11y",
				"aliases": [],
				"line": 4,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clear the a11y-speak-region elements.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build-module/filterMessage.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterMessage",
				"namespace": "a11y",
				"aliases": [],
				"line": 10,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "message",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filter the message to be announced to the screenreader.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The message to be announced.",
							"types": [
								"string"
							],
							"variable": "message"
						},
						{
							"name": "return",
							"content": "The filtered message.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/build-module/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/src/addContainer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addContainer",
				"namespace": "a11y",
				"aliases": [],
				"line": 8,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "ariaLive",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Build the live regions markup.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Optional. Value for the 'aria-live' attribute, default 'polite'.",
							"types": [
								"string"
							],
							"variable": "ariaLive"
						},
						{
							"name": "return",
							"content": "$container The ARIA live region jQuery object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/src/clear.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clear",
				"namespace": "a11y",
				"aliases": [],
				"line": 4,
				"end_line": 9,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clear the a11y-speak-region elements.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/src/filterMessage.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterMessage",
				"namespace": "a11y",
				"aliases": [],
				"line": 10,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "message",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filter the message to be announced to the screenreader.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The message to be announced.",
							"types": [
								"string"
							],
							"variable": "message"
						},
						{
							"name": "return",
							"content": "The filtered message.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/a11y/src/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/block/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAnnotationClassName",
				"namespace": "annotations",
				"aliases": [],
				"line": 17,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "OriginalComponent",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Adds annotation className to the block-list-block component.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The original BlockListBlock component.",
							"types": [
								"Object"
							],
							"variable": "OriginalComponent"
						},
						{
							"name": "return",
							"content": "The enhanced component.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/format/annotation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 36,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					},
					{
						"name": "annotations",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Applies given annotations to the given record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The record to apply annotations to.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "param",
							"content": "The annotation to apply.",
							"types": [
								"Array"
							],
							"variable": "annotations"
						},
						{
							"name": "return",
							"content": "A record with the annotations applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 70,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Removes annotations from the given record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Record to remove annotations from.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "return",
							"content": "The cleaned record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "retrieveAnnotationPositions",
				"namespace": "annotations",
				"aliases": [],
				"line": 81,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formats",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Retrieves the positions of annotations inside an array of formats.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Formats with annotations in there.",
							"types": [
								"Array"
							],
							"variable": "formats"
						},
						{
							"name": "return",
							"content": "ID keyed positions of annotations.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateAnnotationsWithPositions",
				"namespace": "annotations",
				"aliases": [],
				"line": 116,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotations",
						"default": null,
						"type": "Array"
					},
					{
						"name": "positions",
						"default": null,
						"type": "Array"
					},
					{
						"name": "removeAnnotation",
						"default": null,
						"type": "function"
					},
					{
						"name": "updateAnnotationRange",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Updates annotations in the state based on positions retrieved from RichText.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotations that are currently applied.",
							"types": [
								"Array"
							],
							"variable": "annotations"
						},
						{
							"name": "param",
							"content": "The current positions of the given annotations.",
							"types": [
								"Array"
							],
							"variable": "positions"
						},
						{
							"name": "param",
							"content": "Function to remove an annotation from the state.",
							"types": [
								"function"
							],
							"variable": "removeAnnotation"
						},
						{
							"name": "param",
							"content": "Function to update an annotation range in the state.",
							"types": [
								"function"
							],
							"variable": "updateAnnotationRange"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/format/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "__experimentalAddAnnotation",
				"namespace": "annotations",
				"aliases": [],
				"line": 42,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotation",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "richTextIdentifier",
						"default": null,
						"type": "string"
					},
					{
						"name": "range",
						"default": null,
						"type": "Object"
					},
					{
						"name": "range.start",
						"default": null,
						"type": "number"
					},
					{
						"name": "range.end",
						"default": null,
						"type": "number"
					},
					{
						"name": "selector",
						"default": null,
						"type": "string"
					},
					{
						"name": "source",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Adds an annotation to a block.",
					"long_description": "\nThe `block` attribute refers to a block ID that needs to be annotated.\n`isBlockAnnotation` controls whether or not the annotation is a block\nannotation. The `source` is the source of the annotation, this will be used\nto identity groups of annotations.\n\nThe `range` property is only relevant if the selector is 'range'.",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to add.",
							"types": [
								"Object"
							],
							"variable": "annotation"
						},
						{
							"name": "param",
							"content": "The blockClientId to add the annotation to.",
							"types": [
								"string"
							],
							"variable": "blockClientId"
						},
						{
							"name": "param",
							"content": "Identifier for the RichText instance the annotation applies to.",
							"types": [
								"string"
							],
							"variable": "richTextIdentifier"
						},
						{
							"name": "param",
							"content": "The range at which to apply this annotation.",
							"types": [
								"Object"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "The offset where the annotation should start.",
							"types": [
								"number"
							],
							"variable": "range.start"
						},
						{
							"name": "param",
							"content": "The offset where the annotation should end.",
							"types": [
								"number"
							],
							"variable": "range.end"
						},
						{
							"name": "param",
							"content": "The way to apply this annotation.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "param",
							"content": "The source that added the annotation.",
							"types": [
								"string"
							],
							"variable": "source"
						},
						{
							"name": "param",
							"content": "The ID the annotation should have.\n                                   Generates a UUID by default.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalRemoveAnnotation",
				"namespace": "annotations",
				"aliases": [],
				"line": 78,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotationId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes an annotation with a specific ID.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to remove.",
							"types": [
								"string"
							],
							"variable": "annotationId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalUpdateAnnotationRange",
				"namespace": "annotations",
				"aliases": [],
				"line": 95,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotationId",
						"default": null,
						"type": "string"
					},
					{
						"name": "start",
						"default": null,
						"type": "number"
					},
					{
						"name": "end",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Updates the range of an annotation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "ID of the annotation to update.",
							"types": [
								"string"
							],
							"variable": "annotationId"
						},
						{
							"name": "param",
							"content": "The start of the new range.",
							"types": [
								"number"
							],
							"variable": "start"
						},
						{
							"name": "param",
							"content": "The end of the new range.",
							"types": [
								"number"
							],
							"variable": "end"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalRemoveAnnotationsBySource",
				"namespace": "annotations",
				"aliases": [],
				"line": 112,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "source",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes all annotations of a specific source.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The source to remove.",
							"types": [
								"string"
							],
							"variable": "source"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterWithReference",
				"namespace": "annotations",
				"aliases": [],
				"line": 32,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "collection",
						"default": null,
						"type": "Array"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Filters an array based on the predicate, but keeps the reference the same if",
					"long_description": "the array hasn't changed.",
					"tags": [
						{
							"name": "param",
							"content": "The collection to filter.",
							"types": [
								"Array"
							],
							"variable": "collection"
						},
						{
							"name": "param",
							"content": "Function that determines if the item should stay\n                             in the array.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Filtered array.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAnnotationRange",
				"namespace": "annotations",
				"aliases": [],
				"line": 44,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotation",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Verifies whether the given annotations is a valid annotation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to verify.",
							"types": [
								"Object"
							],
							"variable": "annotation"
						},
						{
							"name": "return",
							"content": "Whether the given annotation is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "annotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 57,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing annotations.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotations currently shown in the editor.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build-module/block/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAnnotationClassName",
				"namespace": "annotations",
				"aliases": [],
				"line": 13,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "OriginalComponent",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Adds annotation className to the block-list-block component.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The original BlockListBlock component.",
							"types": [
								"Object"
							],
							"variable": "OriginalComponent"
						},
						{
							"name": "return",
							"content": "The enhanced component.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build-module/format/annotation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 22,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					},
					{
						"name": "annotations",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Applies given annotations to the given record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The record to apply annotations to.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "param",
							"content": "The annotation to apply.",
							"types": [
								"Array"
							],
							"variable": "annotations"
						},
						{
							"name": "return",
							"content": "A record with the annotations applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 55,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Removes annotations from the given record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Record to remove annotations from.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "return",
							"content": "The cleaned record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "retrieveAnnotationPositions",
				"namespace": "annotations",
				"aliases": [],
				"line": 65,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formats",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Retrieves the positions of annotations inside an array of formats.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Formats with annotations in there.",
							"types": [
								"Array"
							],
							"variable": "formats"
						},
						{
							"name": "return",
							"content": "ID keyed positions of annotations.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateAnnotationsWithPositions",
				"namespace": "annotations",
				"aliases": [],
				"line": 100,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotations",
						"default": null,
						"type": "Array"
					},
					{
						"name": "positions",
						"default": null,
						"type": "Array"
					},
					{
						"name": "removeAnnotation",
						"default": null,
						"type": "function"
					},
					{
						"name": "updateAnnotationRange",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Updates annotations in the state based on positions retrieved from RichText.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotations that are currently applied.",
							"types": [
								"Array"
							],
							"variable": "annotations"
						},
						{
							"name": "param",
							"content": "The current positions of the given annotations.",
							"types": [
								"Array"
							],
							"variable": "positions"
						},
						{
							"name": "param",
							"content": "Function to remove an annotation from the state.",
							"types": [
								"function"
							],
							"variable": "removeAnnotation"
						},
						{
							"name": "param",
							"content": "Function to update an annotation range in the state.",
							"types": [
								"function"
							],
							"variable": "updateAnnotationRange"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "__experimentalAddAnnotation",
				"namespace": "annotations",
				"aliases": [],
				"line": 29,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotation",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "richTextIdentifier",
						"default": null,
						"type": "string"
					},
					{
						"name": "range",
						"default": null,
						"type": "Object"
					},
					{
						"name": "range.start",
						"default": null,
						"type": "number"
					},
					{
						"name": "range.end",
						"default": null,
						"type": "number"
					},
					{
						"name": "selector",
						"default": null,
						"type": "string"
					},
					{
						"name": "source",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Adds an annotation to a block.",
					"long_description": "\nThe `block` attribute refers to a block ID that needs to be annotated.\n`isBlockAnnotation` controls whether or not the annotation is a block\nannotation. The `source` is the source of the annotation, this will be used\nto identity groups of annotations.\n\nThe `range` property is only relevant if the selector is 'range'.",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to add.",
							"types": [
								"Object"
							],
							"variable": "annotation"
						},
						{
							"name": "param",
							"content": "The blockClientId to add the annotation to.",
							"types": [
								"string"
							],
							"variable": "blockClientId"
						},
						{
							"name": "param",
							"content": "Identifier for the RichText instance the annotation applies to.",
							"types": [
								"string"
							],
							"variable": "richTextIdentifier"
						},
						{
							"name": "param",
							"content": "The range at which to apply this annotation.",
							"types": [
								"Object"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "The offset where the annotation should start.",
							"types": [
								"number"
							],
							"variable": "range.start"
						},
						{
							"name": "param",
							"content": "The offset where the annotation should end.",
							"types": [
								"number"
							],
							"variable": "range.end"
						},
						{
							"name": "param",
							"content": "The way to apply this annotation.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "param",
							"content": "The source that added the annotation.",
							"types": [
								"string"
							],
							"variable": "source"
						},
						{
							"name": "param",
							"content": "The ID the annotation should have.\n                                   Generates a UUID by default.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalRemoveAnnotation",
				"namespace": "annotations",
				"aliases": [],
				"line": 64,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotationId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes an annotation with a specific ID.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to remove.",
							"types": [
								"string"
							],
							"variable": "annotationId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalUpdateAnnotationRange",
				"namespace": "annotations",
				"aliases": [],
				"line": 80,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotationId",
						"default": null,
						"type": "string"
					},
					{
						"name": "start",
						"default": null,
						"type": "number"
					},
					{
						"name": "end",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Updates the range of an annotation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "ID of the annotation to update.",
							"types": [
								"string"
							],
							"variable": "annotationId"
						},
						{
							"name": "param",
							"content": "The start of the new range.",
							"types": [
								"number"
							],
							"variable": "start"
						},
						{
							"name": "param",
							"content": "The end of the new range.",
							"types": [
								"number"
							],
							"variable": "end"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalRemoveAnnotationsBySource",
				"namespace": "annotations",
				"aliases": [],
				"line": 96,
				"end_line": 101,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "source",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes all annotations of a specific source.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The source to remove.",
							"types": [
								"string"
							],
							"variable": "source"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build-module/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterWithReference",
				"namespace": "annotations",
				"aliases": [],
				"line": 19,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "collection",
						"default": null,
						"type": "Array"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Filters an array based on the predicate, but keeps the reference the same if",
					"long_description": "the array hasn't changed.",
					"tags": [
						{
							"name": "param",
							"content": "The collection to filter.",
							"types": [
								"Array"
							],
							"variable": "collection"
						},
						{
							"name": "param",
							"content": "Function that determines if the item should stay\n                             in the array.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Filtered array.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAnnotationRange",
				"namespace": "annotations",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotation",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Verifies whether the given annotations is a valid annotation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to verify.",
							"types": [
								"Object"
							],
							"variable": "annotation"
						},
						{
							"name": "return",
							"content": "Whether the given annotation is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "annotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 44,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing annotations.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotations currently shown in the editor.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "__experimentalGetAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 71,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all annotations in the editor state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "All annotations currently applied.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/src/block/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAnnotationClassName",
				"namespace": "annotations",
				"aliases": [],
				"line": 13,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "OriginalComponent",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Adds annotation className to the block-list-block component.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The original BlockListBlock component.",
							"types": [
								"Object"
							],
							"variable": "OriginalComponent"
						},
						{
							"name": "return",
							"content": "The enhanced component.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/src/format/annotation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 24,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					},
					{
						"name": "annotations",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Applies given annotations to the given record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The record to apply annotations to.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "param",
							"content": "The annotation to apply.",
							"types": [
								"Array"
							],
							"variable": "annotations"
						},
						{
							"name": "return",
							"content": "A record with the annotations applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 61,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Removes annotations from the given record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Record to remove annotations from.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "return",
							"content": "The cleaned record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "retrieveAnnotationPositions",
				"namespace": "annotations",
				"aliases": [],
				"line": 71,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formats",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Retrieves the positions of annotations inside an array of formats.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Formats with annotations in there.",
							"types": [
								"Array"
							],
							"variable": "formats"
						},
						{
							"name": "return",
							"content": "ID keyed positions of annotations.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateAnnotationsWithPositions",
				"namespace": "annotations",
				"aliases": [],
				"line": 105,
				"end_line": 121,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotations",
						"default": null,
						"type": "Array"
					},
					{
						"name": "positions",
						"default": null,
						"type": "Array"
					},
					{
						"name": "removeAnnotation",
						"default": null,
						"type": "function"
					},
					{
						"name": "updateAnnotationRange",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Updates annotations in the state based on positions retrieved from RichText.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotations that are currently applied.",
							"types": [
								"Array"
							],
							"variable": "annotations"
						},
						{
							"name": "param",
							"content": "The current positions of the given annotations.",
							"types": [
								"Array"
							],
							"variable": "positions"
						},
						{
							"name": "param",
							"content": "Function to remove an annotation from the state.",
							"types": [
								"function"
							],
							"variable": "removeAnnotation"
						},
						{
							"name": "param",
							"content": "Function to update an annotation range in the state.",
							"types": [
								"function"
							],
							"variable": "updateAnnotationRange"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "__experimentalAddAnnotation",
				"namespace": "annotations",
				"aliases": [],
				"line": 29,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotation",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "richTextIdentifier",
						"default": null,
						"type": "string"
					},
					{
						"name": "range",
						"default": null,
						"type": "Object"
					},
					{
						"name": "range.start",
						"default": null,
						"type": "number"
					},
					{
						"name": "range.end",
						"default": null,
						"type": "number"
					},
					{
						"name": "selector",
						"default": null,
						"type": "string"
					},
					{
						"name": "source",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Adds an annotation to a block.",
					"long_description": "\nThe `block` attribute refers to a block ID that needs to be annotated.\n`isBlockAnnotation` controls whether or not the annotation is a block\nannotation. The `source` is the source of the annotation, this will be used\nto identity groups of annotations.\n\nThe `range` property is only relevant if the selector is 'range'.",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to add.",
							"types": [
								"Object"
							],
							"variable": "annotation"
						},
						{
							"name": "param",
							"content": "The blockClientId to add the annotation to.",
							"types": [
								"string"
							],
							"variable": "blockClientId"
						},
						{
							"name": "param",
							"content": "Identifier for the RichText instance the annotation applies to.",
							"types": [
								"string"
							],
							"variable": "richTextIdentifier"
						},
						{
							"name": "param",
							"content": "The range at which to apply this annotation.",
							"types": [
								"Object"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "The offset where the annotation should start.",
							"types": [
								"number"
							],
							"variable": "range.start"
						},
						{
							"name": "param",
							"content": "The offset where the annotation should end.",
							"types": [
								"number"
							],
							"variable": "range.end"
						},
						{
							"name": "param",
							"content": "The way to apply this annotation.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "param",
							"content": "The source that added the annotation.",
							"types": [
								"string"
							],
							"variable": "source"
						},
						{
							"name": "param",
							"content": "The ID the annotation should have.\n                                   Generates a UUID by default.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalRemoveAnnotation",
				"namespace": "annotations",
				"aliases": [],
				"line": 53,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotationId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes an annotation with a specific ID.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to remove.",
							"types": [
								"string"
							],
							"variable": "annotationId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalUpdateAnnotationRange",
				"namespace": "annotations",
				"aliases": [],
				"line": 69,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotationId",
						"default": null,
						"type": "string"
					},
					{
						"name": "start",
						"default": null,
						"type": "number"
					},
					{
						"name": "end",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Updates the range of an annotation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "ID of the annotation to update.",
							"types": [
								"string"
							],
							"variable": "annotationId"
						},
						{
							"name": "param",
							"content": "The start of the new range.",
							"types": [
								"number"
							],
							"variable": "start"
						},
						{
							"name": "param",
							"content": "The end of the new range.",
							"types": [
								"number"
							],
							"variable": "end"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalRemoveAnnotationsBySource",
				"namespace": "annotations",
				"aliases": [],
				"line": 85,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "source",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes all annotations of a specific source.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The source to remove.",
							"types": [
								"string"
							],
							"variable": "source"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/src/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterWithReference",
				"namespace": "annotations",
				"aliases": [],
				"line": 15,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "collection",
						"default": null,
						"type": "Array"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Filters an array based on the predicate, but keeps the reference the same if",
					"long_description": "the array hasn't changed.",
					"tags": [
						{
							"name": "param",
							"content": "The collection to filter.",
							"types": [
								"Array"
							],
							"variable": "collection"
						},
						{
							"name": "param",
							"content": "Function that determines if the item should stay\n                             in the array.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Filtered array.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAnnotationRange",
				"namespace": "annotations",
				"aliases": [],
				"line": 27,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "annotation",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Verifies whether the given annotations is a valid annotation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotation to verify.",
							"types": [
								"Object"
							],
							"variable": "annotation"
						},
						{
							"name": "return",
							"content": "Whether the given annotation is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "annotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 41,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing annotations.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The annotations currently shown in the editor.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/annotations/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "__experimentalGetAnnotations",
				"namespace": "annotations",
				"aliases": [],
				"line": 78,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all annotations in the editor state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "All annotations currently applied.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setFetchHandler",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 143,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newFetchHandler",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Defines a custom fetch handler for making the requests that will override",
					"long_description": "the default one using window.fetch",
					"tags": [
						{
							"name": "param",
							"content": "The new fetch handler",
							"types": [
								"function"
							],
							"variable": "newFetchHandler"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build/middlewares/fetch-all-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "modifyQuery",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 22,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build/middlewares/http-v1.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "httpV1Middleware",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 40,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "next",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "API Fetch middleware which overrides the request method for HTTP v1",
					"long_description": "compatibility leveraging the REST API X-HTTP-Method-Override header.",
					"tags": [
						{
							"name": "param",
							"content": "Fetch options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "[description]",
							"types": [
								"function"
							],
							"variable": "next"
						},
						{
							"name": "return",
							"content": "The evaluated result of the remaining middleware chain.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build/middlewares/root-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRootURLMiddleware",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 17,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build/middlewares/user-locale.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "userLocaleMiddleware",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 13,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setFetchHandler",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 126,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newFetchHandler",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Defines a custom fetch handler for making the requests that will override",
					"long_description": "the default one using window.fetch",
					"tags": [
						{
							"name": "param",
							"content": "The new fetch handler",
							"types": [
								"function"
							],
							"variable": "newFetchHandler"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/build-module/middlewares/http-v1.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "httpV1Middleware",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 31,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "next",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "API Fetch middleware which overrides the request method for HTTP v1",
					"long_description": "compatibility leveraging the REST API X-HTTP-Method-Override header.",
					"tags": [
						{
							"name": "param",
							"content": "Fetch options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "[description]",
							"types": [
								"function"
							],
							"variable": "next"
						},
						{
							"name": "return",
							"content": "The evaluated result of the remaining middleware chain.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setFetchHandler",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 134,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newFetchHandler",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Defines a custom fetch handler for making the requests that will override",
					"long_description": "the default one using window.fetch",
					"tags": [
						{
							"name": "param",
							"content": "The new fetch handler",
							"types": [
								"function"
							],
							"variable": "newFetchHandler"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/src/middlewares/http-v1.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "httpV1Middleware",
				"namespace": "api-fetch",
				"aliases": [],
				"line": 33,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "next",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "API Fetch middleware which overrides the request method for HTTP v1",
					"long_description": "compatibility leveraging the REST API X-HTTP-Method-Override header.",
					"tags": [
						{
							"name": "param",
							"content": "Fetch options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "[description]",
							"types": [
								"function"
							],
							"variable": "next"
						},
						{
							"name": "return",
							"content": "The evaluated result of the remaining middleware chain.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/api-fetch/src/test/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/autop/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "htmlSplit",
				"namespace": "autop",
				"aliases": [],
				"line": 56,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Separate HTML elements and comments from the text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "The formatted text.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceInHtmlTags",
				"namespace": "autop",
				"aliases": [],
				"line": 82,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "haystack",
						"default": null,
						"type": "string"
					},
					{
						"name": "replacePairs",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Replace characters or phrases within HTML elements only.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "haystack"
						},
						{
							"name": "param",
							"content": "In the form {from: 'to', ...}.",
							"types": [
								"Object"
							],
							"variable": "replacePairs"
						},
						{
							"name": "return",
							"content": "The formatted text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autop",
				"namespace": "autop",
				"aliases": [],
				"line": 122,
				"end_line": 266,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "br",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Replaces double line-breaks with paragraph elements.",
					"long_description": "\nA group of regex replaces used to identify text formatted with newlines and\nreplace double line-breaks with HTML paragraph tags. The remaining line-\nbreaks after conversion become <<br />> tags, unless br is set to 'false'.",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Optional. If set, will convert all remaining line-\n                         breaks after paragraphing. Default true.",
							"types": [
								"boolean"
							],
							"variable": "br"
						},
						{
							"name": "return",
							"content": "Text which has been converted into paragraph tags.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removep",
				"namespace": "autop",
				"aliases": [],
				"line": 278,
				"end_line": 389,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces <p> tags with two line breaks. \"Opposite\" of autop().",
					"long_description": "\nReplaces <p> tags with two line breaks except where the <p> has attributes.\nUnifies whitespace. Indents <li>, <dt> and <dd> for better readability.",
					"tags": [
						{
							"name": "param",
							"content": "The content from the editor.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "The content with stripped paragraph tags.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/autop/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "htmlSplit",
				"namespace": "autop",
				"aliases": [],
				"line": 46,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Separate HTML elements and comments from the text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "The formatted text.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceInHtmlTags",
				"namespace": "autop",
				"aliases": [],
				"line": 72,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "haystack",
						"default": null,
						"type": "string"
					},
					{
						"name": "replacePairs",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Replace characters or phrases within HTML elements only.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "haystack"
						},
						{
							"name": "param",
							"content": "In the form {from: 'to', ...}.",
							"types": [
								"Object"
							],
							"variable": "replacePairs"
						},
						{
							"name": "return",
							"content": "The formatted text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autop",
				"namespace": "autop",
				"aliases": [],
				"line": 112,
				"end_line": 256,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "br",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Replaces double line-breaks with paragraph elements.",
					"long_description": "\nA group of regex replaces used to identify text formatted with newlines and\nreplace double line-breaks with HTML paragraph tags. The remaining line-\nbreaks after conversion become <<br />> tags, unless br is set to 'false'.",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Optional. If set, will convert all remaining line-\n                         breaks after paragraphing. Default true.",
							"types": [
								"boolean"
							],
							"variable": "br"
						},
						{
							"name": "return",
							"content": "Text which has been converted into paragraph tags.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removep",
				"namespace": "autop",
				"aliases": [],
				"line": 267,
				"end_line": 378,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces <p> tags with two line breaks. \"Opposite\" of autop().",
					"long_description": "\nReplaces <p> tags with two line breaks except where the <p> has attributes.\nUnifies whitespace. Indents <li>, <dt> and <dd> for better readability.",
					"tags": [
						{
							"name": "param",
							"content": "The content from the editor.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "The content with stripped paragraph tags.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/autop/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "htmlSplit",
				"namespace": "autop",
				"aliases": [],
				"line": 57,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Separate HTML elements and comments from the text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "The formatted text.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceInHtmlTags",
				"namespace": "autop",
				"aliases": [],
				"line": 82,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "haystack",
						"default": null,
						"type": "string"
					},
					{
						"name": "replacePairs",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Replace characters or phrases within HTML elements only.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "haystack"
						},
						{
							"name": "param",
							"content": "In the form {from: 'to', ...}.",
							"types": [
								"Object"
							],
							"variable": "replacePairs"
						},
						{
							"name": "return",
							"content": "The formatted text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autop",
				"namespace": "autop",
				"aliases": [],
				"line": 122,
				"end_line": 278,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "br",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Replaces double line-breaks with paragraph elements.",
					"long_description": "\nA group of regex replaces used to identify text formatted with newlines and\nreplace double line-breaks with HTML paragraph tags. The remaining line-\nbreaks after conversion become <<br />> tags, unless br is set to 'false'.",
					"tags": [
						{
							"name": "param",
							"content": "The text which has to be formatted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Optional. If set, will convert all remaining line-\n                         breaks after paragraphing. Default true.",
							"types": [
								"boolean"
							],
							"variable": "br"
						},
						{
							"name": "return",
							"content": "Text which has been converted into paragraph tags.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removep",
				"namespace": "autop",
				"aliases": [],
				"line": 289,
				"end_line": 412,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces <p> tags with two line breaks. \"Opposite\" of autop().",
					"long_description": "\nReplaces <p> tags with two line breaks except where the <p> has attributes.\nUnifies whitespace. Indents <li>, <dt> and <dd> for better readability.",
					"tags": [
						{
							"name": "param",
							"content": "The content from the editor.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "The content with stripped paragraph tags.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/babel-plugin-import-jsx-pragma/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "babel-plugin-import-jsx-pragma",
				"aliases": [],
				"line": 40,
				"end_line": 104,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "babel",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Babel transform plugin for automatically injecting an import to be used as",
					"long_description": "the pragma for the React JSX Transform plugin.",
					"tags": [
						{
							"name": "param",
							"content": "Babel instance.",
							"types": [
								"Object"
							],
							"variable": "babel"
						},
						{
							"name": "return",
							"content": "Babel transform plugin.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/babel-plugin-import-jsx-pragma/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "babel-plugin-import-jsx-pragma\\module",
				"aliases": [],
				"line": 31,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "babel",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Babel transform plugin for automatically injecting an import to be used as",
					"long_description": "the pragma for the React JSX Transform plugin.",
					"tags": [
						{
							"name": "param",
							"content": "Babel instance.",
							"types": [
								"Object"
							],
							"variable": "babel"
						},
						{
							"name": "return",
							"content": "Babel transform plugin.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/babel-plugin-import-jsx-pragma/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "babel-plugin-import-jsx-pragma\\module",
				"aliases": [],
				"line": 29,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "babel",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Babel transform plugin for automatically injecting an import to be used as",
					"long_description": "the pragma for the React JSX Transform plugin.",
					"tags": [
						{
							"name": "param",
							"content": "Babel instance.",
							"types": [
								"Object"
							],
							"variable": "babel"
						},
						{
							"name": "return",
							"content": "Babel transform plugin.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/babel-plugin-makepot/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getNodeAsString",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 110,
				"end_line": 121,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an argument node (or recursed node), attempts to return a string",
					"long_description": "represenation of that node's value.",
					"tags": [
						{
							"name": "param",
							"content": "AST node.",
							"types": [
								"Object"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "String value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTranslatorComment",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 133,
				"end_line": 177,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "path",
						"default": null,
						"type": "Object"
					},
					{
						"name": "_originalNodeLine",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns translator comment for a given AST traversal path if one exists.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Traversal path.",
							"types": [
								"Object"
							],
							"variable": "path"
						},
						{
							"name": "param",
							"content": "Private: In recursion, line number of\n                                    the original node passed.",
							"types": [
								"number"
							],
							"variable": "_originalNodeLine"
						},
						{
							"name": "return",
							"content": "Translator comment.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidTranslationKey",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 188,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the specified key of a function is valid for assignment in",
					"long_description": "the translation object.",
					"tags": [
						{
							"name": "param",
							"content": "Key to test.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "Whether key is valid for assignment.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSameTranslation",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 202,
				"end_line": 204,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given two translation objects, returns true if valid translation keys match,",
					"long_description": "or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First translation object.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second translation object.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether valid translation keys match.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/babel-plugin-makepot/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getNodeAsString",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 108,
				"end_line": 119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an argument node (or recursed node), attempts to return a string",
					"long_description": "represenation of that node's value.",
					"tags": [
						{
							"name": "param",
							"content": "AST node.",
							"types": [
								"Object"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "String value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTranslatorComment",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 131,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "path",
						"default": null,
						"type": "Object"
					},
					{
						"name": "_originalNodeLine",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns translator comment for a given AST traversal path if one exists.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Traversal path.",
							"types": [
								"Object"
							],
							"variable": "path"
						},
						{
							"name": "param",
							"content": "Private: In recursion, line number of\n                                    the original node passed.",
							"types": [
								"number"
							],
							"variable": "_originalNodeLine"
						},
						{
							"name": "return",
							"content": "Translator comment.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidTranslationKey",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 186,
				"end_line": 188,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the specified key of a function is valid for assignment in",
					"long_description": "the translation object.",
					"tags": [
						{
							"name": "param",
							"content": "Key to test.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "Whether key is valid for assignment.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSameTranslation",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 200,
				"end_line": 202,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given two translation objects, returns true if valid translation keys match,",
					"long_description": "or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First translation object.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second translation object.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether valid translation keys match.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/babel-plugin-makepot/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getNodeAsString",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 93,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an argument node (or recursed node), attempts to return a string",
					"long_description": "represenation of that node's value.",
					"tags": [
						{
							"name": "param",
							"content": "AST node.",
							"types": [
								"Object"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "String value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTranslatorComment",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 118,
				"end_line": 157,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "path",
						"default": null,
						"type": "Object"
					},
					{
						"name": "_originalNodeLine",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns translator comment for a given AST traversal path if one exists.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Traversal path.",
							"types": [
								"Object"
							],
							"variable": "path"
						},
						{
							"name": "param",
							"content": "Private: In recursion, line number of\n                                    the original node passed.",
							"types": [
								"number"
							],
							"variable": "_originalNodeLine"
						},
						{
							"name": "return",
							"content": "Translator comment.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidTranslationKey",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 167,
				"end_line": 169,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the specified key of a function is valid for assignment in",
					"long_description": "the translation object.",
					"tags": [
						{
							"name": "param",
							"content": "Key to test.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "Whether key is valid for assignment.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSameTranslation",
				"namespace": "babel-plugin-makepot",
				"aliases": [],
				"line": 180,
				"end_line": 185,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given two translation objects, returns true if valid translation keys match,",
					"long_description": "or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First translation object.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second translation object.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether valid translation keys match.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blob/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 26,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Create a blob URL from a file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The file to create a blob URL for.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "The blob URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlobByURL",
				"namespace": "blob",
				"aliases": [],
				"line": 42,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve a file based on a blob URL. The file must have been created by",
					"long_description": "`createBlobURL` and not removed by `revokeBlobURL`, otherwise it will return\n`undefined`.",
					"tags": [
						{
							"name": "param",
							"content": "The blob URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The file for the blob URL.",
							"types": [
								"File"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "revokeBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 52,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Remove the resource and file cache from memory.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The blob URL.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 68,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check whether a url is a blob url.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the url a blob url?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blob/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 16,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Create a blob URL from a file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The file to create a blob URL for.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "The blob URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlobByURL",
				"namespace": "blob",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve a file based on a blob URL. The file must have been created by",
					"long_description": "`createBlobURL` and not removed by `revokeBlobURL`, otherwise it will return\n`undefined`.",
					"tags": [
						{
							"name": "param",
							"content": "The blob URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The file for the blob URL.",
							"types": [
								"File"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "revokeBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 40,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Remove the resource and file cache from memory.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The blob URL.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 55,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check whether a url is a blob url.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the url a blob url?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blob/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 15,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Create a blob URL from a file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The file to create a blob URL for.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "The blob URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlobByURL",
				"namespace": "blob",
				"aliases": [],
				"line": 32,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve a file based on a blob URL. The file must have been created by",
					"long_description": "`createBlobURL` and not removed by `revokeBlobURL`, otherwise it will return\n`undefined`.",
					"tags": [
						{
							"name": "param",
							"content": "The blob URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The file for the blob URL.",
							"types": [
								"File"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "revokeBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 41,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Remove the resource and file cache from memory.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The blob URL.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlobURL",
				"namespace": "blob",
				"aliases": [],
				"line": 56,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check whether a url is a blob url.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the url a blob url?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/archives/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ArchivesEdit",
				"namespace": "block-library",
				"aliases": [],
				"line": 23,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/archives/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/audio/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/audio/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/block/edit-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/block/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/block/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/block/indicator/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ReusableBlockIndicator",
				"namespace": "block-library",
				"aliases": [],
				"line": 17,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/button/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/categories/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/categories/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/classic/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/classic/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/code/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "CodeEdit",
				"namespace": "block-library",
				"aliases": [],
				"line": 21,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/code/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "CodeEdit",
				"namespace": "block-library",
				"aliases": [],
				"line": 37,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Block code style",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/code/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/columns/column.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/columns/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getDeprecatedLayoutColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 67,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "originalContent",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string for a deprecated columns inner block, returns the",
					"long_description": "column index to which the migrated inner block should be assigned. Returns\nundefined if the inner block was not assigned to a column.",
					"tags": [
						{
							"name": "param",
							"content": "Deprecated Columns inner block HTML.",
							"types": [
								"string"
							],
							"variable": "originalContent"
						},
						{
							"name": "return",
							"content": "Column to which inner block is to be assigned.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/cover/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/core-embeds.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEmbedEditComponent",
				"namespace": "block-library",
				"aliases": [],
				"line": 49,
				"end_line": 273,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/embed-controls.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EmbedControls",
				"namespace": "block-library",
				"aliases": [],
				"line": 19,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/embed-loading.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EmbedLoading",
				"namespace": "block-library",
				"aliases": [],
				"line": 17,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/embed-placeholder.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EmbedPlaceholder",
				"namespace": "block-library",
				"aliases": [],
				"line": 19,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/embed-preview.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EmbedPreview",
				"namespace": "block-library",
				"aliases": [],
				"line": 45,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/icons.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/settings.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/util.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "matchesPatterns",
				"namespace": "block-library",
				"aliases": [],
				"line": 49,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "patterns",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if any of the regular expressions match the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to test.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "The list of regular expressions to test agains.",
							"types": [
								"Array"
							],
							"variable": "patterns"
						},
						{
							"name": "return",
							"content": "True if any of the regular expressions match the URL.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fallback",
				"namespace": "block-library",
				"aliases": [],
				"line": 209,
				"end_line": 216,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "onReplace",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Fallback behaviour for unembeddable URLs.",
					"long_description": "Creates a paragraph block containing a link to the URL, and calls `onReplace`.",
					"tags": [
						{
							"name": "param",
							"content": "The URL that could not be embedded.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Function to call with the created fallback block.",
							"types": [
								"function"
							],
							"variable": "onReplace"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/embed/wp-embed-preview.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/file/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/file/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/file/inspector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FileBlockInspector",
				"namespace": "block-library",
				"aliases": [],
				"line": 19,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/gallery/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/gallery/gallery-image.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/gallery/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/heading/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "HeadingEdit",
				"namespace": "block-library",
				"aliases": [],
				"line": 29,
				"end_line": 101,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/heading/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/heading/heading-toolbar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/heading/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLevelFromHeadingNodeName",
				"namespace": "block-library",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a node name string for a heading node, returns its numeric level.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Heading node name.",
							"types": [
								"string"
							],
							"variable": "nodeName"
						},
						{
							"name": "return",
							"content": "Heading level.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/html/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/html/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/image/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isExternalImage",
				"namespace": "block-library",
				"aliases": [],
				"line": 107,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Is the url for the image hosted externally. An externally hosted image has no id",
					"long_description": "and is not a blob url.",
					"tags": [
						{
							"name": "param",
							"content": "The id of the image.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The url of the image.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the url an externally hosted url?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/image/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/image/image-size.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/image/image-size.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/image/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerCoreBlocks",
				"namespace": "block-library",
				"aliases": [],
				"line": 99,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerCoreBlocks",
				"namespace": "block-library",
				"aliases": [],
				"line": 31,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/latest-comments/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/latest-comments/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/latest-posts/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/latest-posts/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/list/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/media-text/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/media-text/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/media-text/media-container.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/missing/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MissingBlockWarning",
				"namespace": "block-library",
				"aliases": [],
				"line": 23,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/more/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/more/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/more/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/nextpage/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "NextPageEdit",
				"namespace": "block-library",
				"aliases": [],
				"line": 15,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/nextpage/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "NextPageEdit",
				"namespace": "block-library",
				"aliases": [],
				"line": 31,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/nextpage/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/paragraph/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/paragraph/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/paragraph/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/preformatted/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/pullquote/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/pullquote/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/rss/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/rss/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/separator/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/shortcode/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/spacer/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/subhead/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/table/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/table/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/table/state.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createTable",
				"namespace": "block-library",
				"aliases": [],
				"line": 35,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.rowCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.columnCount",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Creates a table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Row count for the table to create.",
							"types": [
								"number"
							],
							"variable": "options.rowCount"
						},
						{
							"name": "param",
							"content": "Column count for the table to create.",
							"types": [
								"number"
							],
							"variable": "options.columnCount"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCellContent",
				"namespace": "block-library",
				"aliases": [],
				"line": 64,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.content",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Updates cell content in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section of the cell to update.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index of the cell to update.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "param",
							"content": "Column index of the cell to update.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "param",
							"content": "Content to set for the cell.",
							"types": [
								"Array"
							],
							"variable": "options.content"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertRow",
				"namespace": "block-library",
				"aliases": [],
				"line": 98,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a row in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to insert the row.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index at which to insert the row.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteRow",
				"namespace": "block-library",
				"aliases": [],
				"line": 122,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Deletes a row from the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to delete the row.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index to delete.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 140,
				"end_line": 151,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a column in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to insert the column.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Column index at which to insert the column.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 163,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Deletes a column from the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to delete the column.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Column index to delete.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/template/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/text-columns/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/verse/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/video/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build/video/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/columns/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getDeprecatedLayoutColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 52,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "originalContent",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string for a deprecated columns inner block, returns the",
					"long_description": "column index to which the migrated inner block should be assigned. Returns\nundefined if the inner block was not assigned to a column.",
					"tags": [
						{
							"name": "param",
							"content": "Deprecated Columns inner block HTML.",
							"types": [
								"string"
							],
							"variable": "originalContent"
						},
						{
							"name": "return",
							"content": "Column to which inner block is to be assigned.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/embed/util.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getClassNames",
				"namespace": "block-library",
				"aliases": [],
				"line": 129,
				"end_line": 166,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					},
					{
						"name": "existingClassNames",
						"default": null,
						"type": "string"
					},
					{
						"name": "allowResponsive",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns class names with any relevant responsive aspect ratio names.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The preview HTML that possibly contains an iframe with width and height set.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "param",
							"content": "Any existing class names.",
							"types": [
								"string"
							],
							"variable": "existingClassNames"
						},
						{
							"name": "param",
							"content": "If the responsive class names should be added, or removed.",
							"types": [
								"boolean"
							],
							"variable": "allowResponsive"
						},
						{
							"name": "return",
							"content": "Deduped class names.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fallback",
				"namespace": "block-library",
				"aliases": [],
				"line": 175,
				"end_line": 182,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "onReplace",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Fallback behaviour for unembeddable URLs.",
					"long_description": "Creates a paragraph block containing a link to the URL, and calls `onReplace`.",
					"tags": [
						{
							"name": "param",
							"content": "The URL that could not be embedded.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Function to call with the created fallback block.",
							"types": [
								"function"
							],
							"variable": "onReplace"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/embed/wp-embed-preview.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/heading/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLevelFromHeadingNodeName",
				"namespace": "block-library",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a node name string for a heading node, returns its numeric level.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Heading node name.",
							"types": [
								"string"
							],
							"variable": "nodeName"
						},
						{
							"name": "return",
							"content": "Heading level.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/image/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isTemporaryImage",
				"namespace": "block-library",
				"aliases": [],
				"line": 61,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Is the URL a temporary blob URL? A blob URL is one that is used temporarily",
					"long_description": "while the image is being uploaded and will not have an id yet allocated.",
					"tags": [
						{
							"name": "param",
							"content": "The id of the image.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The url of the image.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the URL a Blob URL",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isExternalImage",
				"namespace": "block-library",
				"aliases": [],
				"line": 75,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Is the url for the image hosted externally. An externally hosted image has no id",
					"long_description": "and is not a blob url.",
					"tags": [
						{
							"name": "param",
							"content": "The id of the image.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The url of the image.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the url an externally hosted url?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/latest-comments/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/latest-posts/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/media-text/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/media-text/media-container.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/build-module/table/state.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createTable",
				"namespace": "block-library",
				"aliases": [],
				"line": 18,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.rowCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.columnCount",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Creates a table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Row count for the table to create.",
							"types": [
								"number"
							],
							"variable": "options.rowCount"
						},
						{
							"name": "param",
							"content": "Column count for the table to create.",
							"types": [
								"number"
							],
							"variable": "options.columnCount"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCellContent",
				"namespace": "block-library",
				"aliases": [],
				"line": 46,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.content",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Updates cell content in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section of the cell to update.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index of the cell to update.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "param",
							"content": "Column index of the cell to update.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "param",
							"content": "Content to set for the cell.",
							"types": [
								"Array"
							],
							"variable": "options.content"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertRow",
				"namespace": "block-library",
				"aliases": [],
				"line": 79,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a row in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to insert the row.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index at which to insert the row.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteRow",
				"namespace": "block-library",
				"aliases": [],
				"line": 102,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Deletes a row from the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to delete the row.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index to delete.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 119,
				"end_line": 130,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a column in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to insert the column.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Column index at which to insert the column.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 141,
				"end_line": 153,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Deletes a column from the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to delete the column.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Column index to delete.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/columns/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getDeprecatedLayoutColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 51,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "originalContent",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string for a deprecated columns inner block, returns the",
					"long_description": "column index to which the migrated inner block should be assigned. Returns\nundefined if the inner block was not assigned to a column.",
					"tags": [
						{
							"name": "param",
							"content": "Deprecated Columns inner block HTML.",
							"types": [
								"string"
							],
							"variable": "originalContent"
						},
						{
							"name": "return",
							"content": "Column to which inner block is to be assigned.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/embed/util.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getClassNames",
				"namespace": "block-library",
				"aliases": [],
				"line": 126,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					},
					{
						"name": "existingClassNames",
						"default": null,
						"type": "string"
					},
					{
						"name": "allowResponsive",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns class names with any relevant responsive aspect ratio names.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The preview HTML that possibly contains an iframe with width and height set.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "param",
							"content": "Any existing class names.",
							"types": [
								"string"
							],
							"variable": "existingClassNames"
						},
						{
							"name": "param",
							"content": "If the responsive class names should be added, or removed.",
							"types": [
								"boolean"
							],
							"variable": "allowResponsive"
						},
						{
							"name": "return",
							"content": "Deduped class names.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fallback",
				"namespace": "block-library",
				"aliases": [],
				"line": 174,
				"end_line": 179,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "onReplace",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Fallback behaviour for unembeddable URLs.",
					"long_description": "Creates a paragraph block containing a link to the URL, and calls `onReplace`.",
					"tags": [
						{
							"name": "param",
							"content": "The URL that could not be embedded.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Function to call with the created fallback block.",
							"types": [
								"function"
							],
							"variable": "onReplace"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/embed/wp-embed-preview.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "checkFocus",
				"namespace": "block-library\\WpEmbedPreview",
				"aliases": [],
				"line": 25,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Checks whether the wp embed iframe is the activeElement,",
					"long_description": "if it is dispatch a focus event.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/heading/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLevelFromHeadingNodeName",
				"namespace": "block-library",
				"aliases": [],
				"line": 33,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a node name string for a heading node, returns its numeric level.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Heading node name.",
							"types": [
								"string"
							],
							"variable": "nodeName"
						},
						{
							"name": "return",
							"content": "Heading level.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/image/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isTemporaryImage",
				"namespace": "block-library",
				"aliases": [],
				"line": 81,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Is the URL a temporary blob URL? A blob URL is one that is used temporarily",
					"long_description": "while the image is being uploaded and will not have an id yet allocated.",
					"tags": [
						{
							"name": "param",
							"content": "The id of the image.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The url of the image.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the URL a Blob URL",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isExternalImage",
				"namespace": "block-library",
				"aliases": [],
				"line": 92,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Is the url for the image hosted externally. An externally hosted image has no id",
					"long_description": "and is not a blob url.",
					"tags": [
						{
							"name": "param",
							"content": "The id of the image.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The url of the image.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the url an externally hosted url?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/latest-comments/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/latest-posts/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/media-text/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/media-text/media-container.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/paragraph/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "splitBlock",
				"namespace": "block-library\\ParagraphBlock",
				"aliases": [],
				"line": 96,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "before",
						"default": null,
						"type": "Array"
					},
					{
						"name": "after",
						"default": null,
						"type": "Array"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Split handler for RichText value, namely when content is pasted or the",
					"long_description": "user presses the Enter key.",
					"tags": [
						{
							"name": "param",
							"content": "Optional before value, to be used as content\n                           in place of what exists currently for the\n                           block. If undefined, the block is deleted.",
							"types": [
								"Array"
							],
							"variable": "before"
						},
						{
							"name": "param",
							"content": "Optional after value, to be appended in a new\n                           paragraph block to the set of blocks passed\n                           as spread.",
							"types": [
								"Array"
							],
							"variable": "after"
						},
						{
							"name": "param",
							"content": "Optional blocks inserted between the before\n                           and after value blocks.",
							"types": [
								"WPBlock"
							],
							"variable": "blocks"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/paragraph/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "splitBlock",
				"namespace": "block-library\\ParagraphEdit",
				"aliases": [],
				"line": 44,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "before",
						"default": null,
						"type": "Array"
					},
					{
						"name": "after",
						"default": null,
						"type": "Array"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Split handler for RichText value, namely when content is pasted or the",
					"long_description": "user presses the Enter key.",
					"tags": [
						{
							"name": "param",
							"content": "Optional before value, to be used as content\n                           in place of what exists currently for the\n                           block. If undefined, the block is deleted.",
							"types": [
								"Array"
							],
							"variable": "before"
						},
						{
							"name": "param",
							"content": "Optional after value, to be appended in a new\n                           paragraph block to the set of blocks passed\n                           as spread.",
							"types": [
								"Array"
							],
							"variable": "after"
						},
						{
							"name": "param",
							"content": "Optional blocks inserted between the before\n                           and after value blocks.",
							"types": [
								"WPBlock"
							],
							"variable": "blocks"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/table/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onChangeInitialColumnCount",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 96,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "initialColumnCount",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Updates the initial column count used for table creation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New initial column count.",
							"types": [
								"number"
							],
							"variable": "initialColumnCount"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onChangeInitialRowCount",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 105,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "initialRowCount",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Updates the initial row count used for table creation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New initial row count.",
							"types": [
								"number"
							],
							"variable": "initialRowCount"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onCreateTable",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 114,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a table based on dimensions in local state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Form submit event.",
							"types": [
								"Object"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onChangeFixedLayout",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 132,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Toggles whether the table has a fixed layout or not.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onChange",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 144,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Changes the content of the currently selected cell.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A RichText content value.",
							"types": [
								"Array"
							],
							"variable": "content"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onInsertRow",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 167,
				"end_line": 182,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "delta",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a row at the currently selected row index, plus `delta`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Offset for selected row index at which to insert.",
							"types": [
								"number"
							],
							"variable": "delta"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onInsertRowBefore",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 187,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Inserts a row before the currently selected row.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onInsertRowAfter",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 194,
				"end_line": 196,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Inserts a row after the currently selected row.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onDeleteRow",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 201,
				"end_line": 213,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Deletes the currently selected row.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onInsertColumn",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 220,
				"end_line": 235,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "delta",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a column at the currently selected column index, plus `delta`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Offset for selected column index at which to insert.",
							"types": [
								"number"
							],
							"variable": "delta"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onInsertColumnBefore",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 240,
				"end_line": 242,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Inserts a column before the currently selected column.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onInsertColumnAfter",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 247,
				"end_line": 249,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Inserts a column after the currently selected column.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onDeleteColumn",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 254,
				"end_line": 266,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Deletes the currently selected column.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "createOnFocus",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 276,
				"end_line": 280,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCell",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates an onFocus handler for a specified cell.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object with `section`, `rowIndex`, and\n                             `columnIndex` properties.",
							"types": [
								"Object"
							],
							"variable": "selectedCell"
						},
						{
							"name": "return",
							"content": "Function to call on focus.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTableControls",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 287,
				"end_line": 328,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Gets the table controls to display in the block toolbar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Table controls.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderSection",
				"namespace": "block-library\\TableEdit",
				"aliases": [],
				"line": 338,
				"end_line": 383,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.type",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rows",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Renders a table section.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Section type: head, body, or foot.",
							"types": [
								"string"
							],
							"variable": "options.type"
						},
						{
							"name": "param",
							"content": "The rows to render.",
							"types": [
								"Array"
							],
							"variable": "options.rows"
						},
						{
							"name": "return",
							"content": "React element for the section.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-library/src/table/state.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createTable",
				"namespace": "block-library",
				"aliases": [],
				"line": 14,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.rowCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.columnCount",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Creates a table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Row count for the table to create.",
							"types": [
								"number"
							],
							"variable": "options.rowCount"
						},
						{
							"name": "param",
							"content": "Column count for the table to create.",
							"types": [
								"number"
							],
							"variable": "options.columnCount"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCellContent",
				"namespace": "block-library",
				"aliases": [],
				"line": 39,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "options.content",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Updates cell content in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section of the cell to update.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index of the cell to update.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "param",
							"content": "Column index of the cell to update.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "param",
							"content": "Content to set for the cell.",
							"types": [
								"Array"
							],
							"variable": "options.content"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertRow",
				"namespace": "block-library",
				"aliases": [],
				"line": 76,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a row in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to insert the row.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index at which to insert the row.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteRow",
				"namespace": "block-library",
				"aliases": [],
				"line": 105,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.rowIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Deletes a row from the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to delete the row.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Row index to delete.",
							"types": [
								"number"
							],
							"variable": "options.rowIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 123,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Inserts a column in the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to insert the column.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Column index at which to insert the column.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteColumn",
				"namespace": "block-library",
				"aliases": [],
				"line": 150,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.section",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.columnIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Deletes a column from the table state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current table state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Section in which to delete the column.",
							"types": [
								"string"
							],
							"variable": "options.section"
						},
						{
							"name": "param",
							"content": "Column index to delete.",
							"types": [
								"number"
							],
							"variable": "options.columnIndex"
						},
						{
							"name": "return",
							"content": "New table state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-serialization-default-parser/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parseJSON",
				"namespace": "block-serialization-default-parser",
				"aliases": [],
				"line": 213,
				"end_line": 219,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Parse JSON if valid, otherwise return null",
					"long_description": "\nNote that JSON coming from the block comment\ndelimiters is constrained to be an object\nand cannot be things like `true` or `null`",
					"tags": [
						{
							"name": "param",
							"content": "JSON input string to parse",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "parsed JSON if valid",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-serialization-default-parser/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parseJSON",
				"namespace": "block-serialization-default-parser",
				"aliases": [],
				"line": 201,
				"end_line": 207,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Parse JSON if valid, otherwise return null",
					"long_description": "\nNote that JSON coming from the block comment\ndelimiters is constrained to be an object\nand cannot be things like `true` or `null`",
					"tags": [
						{
							"name": "param",
							"content": "JSON input string to parse",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "parsed JSON if valid",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/block-serialization-default-parser/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parseJSON",
				"namespace": "block-serialization-default-parser",
				"aliases": [],
				"line": 211,
				"end_line": 217,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Parse JSON if valid, otherwise return null",
					"long_description": "\nNote that JSON coming from the block comment\ndelimiters is constrained to be an object\nand cannot be things like `true` or `null`",
					"tags": [
						{
							"name": "param",
							"content": "JSON input string to parse",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "parsed JSON if valid",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/categories.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all the block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "categories",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Sets the block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							],
							"variable": "categories"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCategory",
				"namespace": "blocks",
				"aliases": [],
				"line": 42,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "category",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Updates a category.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block category slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "Object containing the category properties that should be updated.",
							"types": [
								"Object"
							],
							"variable": "category"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/children.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSerializeCapableElement",
				"namespace": "blocks",
				"aliases": [],
				"line": 46,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given block children, returns a serialize-capable WordPress element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block children object to convert.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "A serialize-capable element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getChildrenArray",
				"namespace": "blocks",
				"aliases": [],
				"line": 64,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given block children, returns an array of block nodes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block children object to convert.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "An array of individual block nodes.",
							"types": [
								"Array.<WPBlockNode>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "concat",
				"namespace": "blocks",
				"aliases": [],
				"line": 80,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockNodes",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given two or more block nodes, returns a new block node representing a",
					"long_description": "concatenation of its values.",
					"tags": [
						{
							"name": "param",
							"content": "Block nodes to concatenate.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "blockNodes"
						},
						{
							"name": "return",
							"content": "Concatenated block node.",
							"types": [
								"WPBlockChildren"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromDOM",
				"namespace": "blocks",
				"aliases": [],
				"line": 110,
				"end_line": 121,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domNodes",
						"default": null,
						"type": "Iterable.<Node>"
					}
				],
				"doc": {
					"description": "Given an iterable set of DOM nodes, returns equivalent block children.",
					"long_description": "Ignores any non-element/text nodes included in set.",
					"tags": [
						{
							"name": "param",
							"content": "Iterable set of DOM nodes to convert.",
							"types": [
								"Iterable.<Node>"
							],
							"variable": "domNodes"
						},
						{
							"name": "return",
							"content": "Block children equivalent to DOM nodes.",
							"types": [
								"WPBlockChildren"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 131,
				"end_line": 134,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given a block node, returns its HTML string representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block node(s) to convert to string.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "String HTML representation of block node.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 145,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a selector, returns an hpq matcher generating a WPBlockChildren value",
					"long_description": "matching the selector result.",
					"tags": [
						{
							"name": "param",
							"content": "DOM selector.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "return",
							"content": "hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/factory.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 50,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns a block object given its type and attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Block object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cloneBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 101,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					},
					{
						"name": "mergeAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newInnerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block object, returns a copy of the block object, optionally merging",
					"long_description": "new attributes and/or replacing its inner blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "mergeAttributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "newInnerBlocks"
						},
						{
							"name": "return",
							"content": "A cloned block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPossibleTransformForSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 125,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transform",
						"default": null,
						"type": "Object"
					},
					{
						"name": "direction",
						"default": null,
						"type": "string"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns a boolean indicating whether a transform is possible based on",
					"long_description": "various bits of context.",
					"tags": [
						{
							"name": "param",
							"content": "The transform object to validate.",
							"types": [
								"Object"
							],
							"variable": "transform"
						},
						{
							"name": "param",
							"content": "Is this a 'from' or 'to' transform.",
							"types": [
								"string"
							],
							"variable": "direction"
						},
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Is the transform possible?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypesForPossibleFromTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 176,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns block types that the 'blocks' can be transformed into, based on",
					"long_description": "'from' transforms on other blocks.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the blocks can be transformed into.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypesForPossibleToTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 201,
				"end_line": 221,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns block types that the 'blocks' can be transformed into, based on",
					"long_description": "the source block's own 'to' transforms.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the source can be transformed into.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPossibleBlockTransformations",
				"namespace": "blocks",
				"aliases": [],
				"line": 232,
				"end_line": 249,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an array of block types that the set of blocks received as argument",
					"long_description": "can be transformed into.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks array.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the blocks argument can be transformed to.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "findTransform",
				"namespace": "blocks",
				"aliases": [],
				"line": 264,
				"end_line": 285,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transforms",
						"default": null,
						"type": "Array.<Object>"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given an array of transforms, returns the highest-priority transform where",
					"long_description": "the predicate function returns a truthy value. A higher-priority transform\nis one with a lower priority value (i.e. first in priority order). Returns\nnull if the transforms set is empty or the predicate function returns a\nfalsey value for all entries.",
					"tags": [
						{
							"name": "param",
							"content": "Transforms to search.",
							"types": [
								"Array.<Object>"
							],
							"variable": "transforms"
						},
						{
							"name": "param",
							"content": "Function returning true on matching transform.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Highest-priority transform candidate.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 299,
				"end_line": 325,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "direction",
						"default": null,
						"type": "string"
					},
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns normal block transforms for a given transform direction, optionally",
					"long_description": "for a specific block by name, or an empty array if there are no transforms.\nIf no block name is provided, returns transforms for all blocks. A normal\ntransform object includes `blockName` as a property.",
					"tags": [
						{
							"name": "param",
							"content": "Transform direction (\"to\", \"from\").",
							"types": [
								"string"
							],
							"variable": "direction"
						},
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "return",
							"content": "Block transforms for direction.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "switchToBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 336,
				"end_line": 417,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switch one or more blocks into one or more blocks of the new block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Blocks array or block object.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Array of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/matchers.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "html",
				"namespace": "blocks",
				"aliases": [],
				"line": 57,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/node.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isNodeOfType",
				"namespace": "blocks",
				"aliases": [],
				"line": 51,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "WPBlockNode"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a single node and a node type (e.g. `'br'`), returns true if the node",
					"long_description": "corresponds to that type, false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Block node to test",
							"types": [
								"WPBlockNode"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Node to type to test against.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Whether node is of intended type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNamedNodeMapAsObject",
				"namespace": "blocks",
				"aliases": [],
				"line": 66,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeMap",
						"default": null,
						"type": "NamedNodeMap"
					}
				],
				"doc": {
					"description": "Given an object implementing the NamedNodeMap interface, returns a plain",
					"long_description": "object equivalent value of name, value key-value pairs.",
					"tags": [
						{
							"name": "param",
							"content": "NamedNodeMap to convert to object.",
							"types": [
								"NamedNodeMap"
							],
							"variable": "nodeMap"
						},
						{
							"name": "return",
							"content": "Object equivalent value of NamedNodeMap.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromDOM",
				"namespace": "blocks",
				"aliases": [],
				"line": 90,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domNode",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Given a DOM Element or Text node, returns an equivalent block node. Throws",
					"long_description": "if passed any node type other than element or text.",
					"tags": [
						{
							"name": "param",
							"content": "DOM node to convert.",
							"types": [
								"Node"
							],
							"variable": "domNode"
						},
						{
							"name": "return",
							"content": "Block node equivalent to DOM node.",
							"types": [
								"WPBlockNode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 115,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "WPBlockNode"
					}
				],
				"doc": {
					"description": "Given a block node, returns its HTML string representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block node to convert to string.",
							"types": [
								"WPBlockNode"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "String HTML representation of block node.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 128,
				"end_line": 142,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a selector, returns an hpq matcher generating a WPBlockNode value",
					"long_description": "matching the selector result.",
					"tags": [
						{
							"name": "param",
							"content": "DOM selector.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "return",
							"content": "hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/parser.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toBooleanAttributeMatcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 76,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "matcher",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order hpq matcher which enhances an attribute matcher to return true",
					"long_description": "or false depending on whether the original matcher returns undefined. This\nis useful for boolean attributes (e.g. disabled) whose attribute values may\nbe technically falsey (empty string), though their mere presence should be\nenough to infer as true.",
					"tags": [
						{
							"name": "param",
							"content": "Original hpq matcher.",
							"types": [
								"function"
							],
							"variable": "matcher"
						},
						{
							"name": "return",
							"content": "Enhanced hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isOfTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 145,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "types",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns true if value is of an array of given JSON schema types, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Value to test.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Types to test.",
							"types": [
								"Array.<string>"
							],
							"variable": "types"
						},
						{
							"name": "return",
							"content": "Whether value is of types.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAmbiguousStringSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 166,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the given attribute schema describes a value which may be",
					"long_description": "an ambiguous string.\n\nSome sources are ambiguously serialized as strings, for which value casting\nis enabled. This is only possible when a singular type is assigned to the\nattribute schema, since the string ambiguity makes it impossible to know the\ncorrect type of multiple to which to cast.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "return",
							"content": "Whether attribute schema defines an ambiguous string\n                  source.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "asType",
				"namespace": "blocks",
				"aliases": [],
				"line": 185,
				"end_line": 212,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns value coerced to the specified JSON schema type string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Type to coerce.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Coerced value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcherFromSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 222,
				"end_line": 258,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "sourceConfig",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an hpq matcher given a source object.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute Source object.",
							"types": [
								"Object"
							],
							"variable": "sourceConfig"
						},
						{
							"name": "return",
							"content": "A hpq Matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "parseWithAttributeSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 270,
				"end_line": 272,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a block's raw content and an attribute's schema returns the attribute's",
					"long_description": "value depending on its source.",
					"tags": [
						{
							"name": "param",
							"content": "Block's raw content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockAttribute",
				"namespace": "blocks",
				"aliases": [],
				"line": 287,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributeKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "commentAttributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an attribute key, an attribute's schema, a block's raw content and the",
					"long_description": "commentAttributes returns the attribute value depending on its source\ndefinition of the given attribute key.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"string"
							],
							"variable": "attributeKey"
						},
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "param",
							"content": "Block's raw content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Block's comment attributes.",
							"types": [
								"Object"
							],
							"variable": "commentAttributes"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 332,
				"end_line": 339,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the block attributes of a registered block node given its type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Raw block content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Known block attributes (from delimiters).",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "All block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMigratedBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 351,
				"end_line": 411,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Given a block object, returns a new copy of the block with any applicable",
					"long_description": "deprecated migrations applied, or the original block if it was both valid\nand no eligible migrations exist.",
					"tags": [
						{
							"name": "param",
							"content": "Original block object.",
							"types": [
								"WPBlock"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Migrated block object.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockWithFallback",
				"namespace": "blocks",
				"aliases": [],
				"line": 421,
				"end_line": 494,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockNode",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a block with fallback to the unknown type handler.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parsed block node.",
							"types": [
								"Object"
							],
							"variable": "blockNode"
						},
						{
							"name": "return",
							"content": "An initialized block object (if possible).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createParse",
				"namespace": "blocks",
				"aliases": [],
				"line": 504,
				"end_line": 516,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "parseImplementation",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Creates a parse implementation for the post content which returns a list of blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parse implementation.",
							"types": [
								"function"
							],
							"variable": "parseImplementation"
						},
						{
							"name": "return",
							"content": "An implementation which parses the post content.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/blockquote-normaliser.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "blocks",
				"aliases": [],
				"line": 15,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/figure-content-reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFigureContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 28,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the given node is figure content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "True if figure content, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canHaveAnchor",
				"namespace": "blocks",
				"aliases": [],
				"line": 48,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the given node can have an anchor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "True if it can, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_default",
				"namespace": "blocks",
				"aliases": [],
				"line": 64,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "This filter takes figure content out of paragraphs, wraps it in a figure",
					"long_description": "element, and moves any anchors with it if needed.",
					"tags": [
						{
							"name": "param",
							"content": "The node to filter.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The document of the node.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/iframe-remover.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "blocks",
				"aliases": [],
				"line": 21,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Removes iframes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/image-corrector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterInlineHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 78,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filters HTML to only contain phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to filter.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "return",
							"content": "HTML only containing phrasing content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "htmlToBlocks",
				"namespace": "blocks",
				"aliases": [],
				"line": 112,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.html",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.rawTransforms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Converts HTML directly to blocks. Looks for a matching transform for each",
					"long_description": "top-level tag. The HTML should be filtered to not have any text between\ntop-level tags and formatted in a way that blocks can handle the HTML.",
					"tags": [
						{
							"name": "param",
							"content": "Named parameters.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "HTML to convert.",
							"types": [
								"string"
							],
							"variable": "$1.html"
						},
						{
							"name": "param",
							"content": "Transforms that can be used.",
							"types": [
								"Array"
							],
							"variable": "$1.rawTransforms"
						},
						{
							"name": "return",
							"content": "An array of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "pasteHandler",
				"namespace": "blocks",
				"aliases": [],
				"line": 154,
				"end_line": 252,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.plainText",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.mode",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.tagName",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.canUserUseUnfilteredHTML",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Converts an HTML string to known blocks. Strips everything else.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to convert.",
							"types": [
								"string"
							],
							"variable": "options.HTML"
						},
						{
							"name": "param",
							"content": "Plain text version.",
							"types": [
								"string"
							],
							"variable": "options.plainText"
						},
						{
							"name": "param",
							"content": "Handle content as blocks or inline content.\n                                                    * 'AUTO': Decide based on the content passed.\n                                                    * 'INLINE': Always handle as inline content, and return string.\n                                                    * 'BLOCKS': Always handle as blocks, and return array of blocks.",
							"types": [
								"string"
							],
							"variable": "options.mode"
						},
						{
							"name": "param",
							"content": "The tag into which content will be inserted.",
							"types": [
								"Array"
							],
							"variable": "options.tagName"
						},
						{
							"name": "param",
							"content": "Whether or not the user can use unfiltered HTML.",
							"types": [
								"boolean"
							],
							"variable": "options.canUserUseUnfilteredHTML"
						},
						{
							"name": "return",
							"content": "A list of blocks or a string, depending on `handlerMode`.",
							"types": [
								"Array",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "rawHandler",
				"namespace": "blocks",
				"aliases": [],
				"line": 262,
				"end_line": 298,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1.HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts an HTML string to known blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to convert.",
							"types": [
								"string"
							],
							"variable": "$1.HTML"
						},
						{
							"name": "return",
							"content": "A list of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/is-inline-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isInline",
				"namespace": "blocks",
				"aliases": [],
				"line": 29,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "contextTag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks if the given node should be considered inline content, optionally",
					"long_description": "depending on a context tag.",
					"tags": [
						{
							"name": "param",
							"content": "Node name.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Tag name.",
							"types": [
								"string"
							],
							"variable": "contextTag"
						},
						{
							"name": "return",
							"content": "True if the node is inline content, false if nohe.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/list-reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isList",
				"namespace": "blocks",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/markdown-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "slackMarkdownVariantCorrector",
				"namespace": "blocks",
				"aliases": [],
				"line": 35,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Corrects the Slack Markdown variant of the code block.",
					"long_description": "If uncorrected, it will be converted to inline code.",
					"tags": [
						{
							"name": "param",
							"content": "The potential Markdown text to correct.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The corrected Markdown.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_default",
				"namespace": "blocks",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts a piece of text into HTML based on any Markdown present.",
					"long_description": "Also decodes any encoded HTML.",
					"tags": [
						{
							"name": "param",
							"content": "The plain text to convert.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/ms-list-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/normalise-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/phrasing-content-reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "blocks",
				"aliases": [],
				"line": 13,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/phrasing-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPhrasingContentSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 45,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Get schema of possible paths for phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Schema.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPhrasingContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 59,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Find out whether or not the given node is phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to test.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "True if phrasing content, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/shortcode-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "segmentHTMLToShortcodeBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 35,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/special-comment-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "blocks",
				"aliases": [],
				"line": 35,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					}
				],
				"doc": {
					"description": "Looks for `<!--nextpage-->` and `<!--more-->` comments, as well as the",
					"long_description": "`<!--more Some text-->` variant and its `<!--noteaser-->` companion,\nand replaces them with a custom element representing a future block.\n\nThe custom element is a way to bypass the rest of the `raw-handling`\ntransforms, which would eliminate other kinds of node with which to carry\n`<!--more-->`'s data: nodes with `data` attributes, empty paragraphs, etc.\n\nThe custom element is then expected to be recognized by any registered\nblock's `raw` transform.",
					"tags": [
						{
							"name": "param",
							"content": "The node to be processed.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The document of the node.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/raw-handling/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockContentSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 53,
				"end_line": 111,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transforms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given raw transforms from blocks, merges all schemas into one.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block transforms, of the `raw` type.",
							"types": [
								"Array"
							],
							"variable": "transforms"
						},
						{
							"name": "return",
							"content": "A complete block content schema.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEmpty",
				"namespace": "blocks",
				"aliases": [],
				"line": 122,
				"end_line": 144,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Recursively checks if an element is empty. An element is not empty if it",
					"long_description": "contains text or contains elements with attributes such as images.",
					"tags": [
						{
							"name": "param",
							"content": "The element to check.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Wether or not the element is empty.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPlain",
				"namespace": "blocks",
				"aliases": [],
				"line": 155,
				"end_line": 157,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks wether HTML can be considered plain text. That is, it does not contain",
					"long_description": "any elements that are not line breaks.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to check.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "return",
							"content": "Wether the HTML can be considered plain text.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deepFilterNodeList",
				"namespace": "blocks",
				"aliases": [],
				"line": 168,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeList",
						"default": null,
						"type": "NodeList"
					},
					{
						"name": "filters",
						"default": null,
						"type": "Array"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given node filters, deeply filters and mutates a NodeList.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The nodeList to filter.",
							"types": [
								"NodeList"
							],
							"variable": "nodeList"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Array"
							],
							"variable": "filters"
						},
						{
							"name": "param",
							"content": "The document of the nodeList.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deepFilterHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 193,
				"end_line": 200,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "filters",
						"default": null,
						"type": "Array"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given node filters, deeply filters HTML tags.",
					"long_description": "Filters from the deepest nodes to the top.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to filter.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Array"
							],
							"variable": "filters"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "The filtered HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cleanNodeList",
				"namespace": "blocks",
				"aliases": [],
				"line": 212,
				"end_line": 319,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeList",
						"default": null,
						"type": "NodeList"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "inline",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a schema, unwraps or removes nodes, attributes and classes on a node",
					"long_description": "list.",
					"tags": [
						{
							"name": "param",
							"content": "The nodeList to filter.",
							"types": [
								"NodeList"
							],
							"variable": "nodeList"
						},
						{
							"name": "param",
							"content": "The document of the nodeList.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "param",
							"content": "Whether to clean for inline mode.",
							"types": [
								"Object"
							],
							"variable": "inline"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeInvalidHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 331,
				"end_line": 336,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "inline",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a schema, unwraps or removes nodes, attributes and classes on HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to clean up.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "param",
							"content": "Schema for the HTML.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "param",
							"content": "Whether to clean for inline mode.",
							"types": [
								"Object"
							],
							"variable": "inline"
						},
						{
							"name": "return",
							"content": "The cleaned up HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/registration.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unstable__bootstrapServerSideBlockDefinitions",
				"namespace": "blocks",
				"aliases": [],
				"line": 79,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "definitions",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Set the server side block definition of blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Server-side block definitions",
							"types": [
								"Object"
							],
							"variable": "definitions"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 96,
				"end_line": 164,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a new block provided a unique name and an object defining its",
					"long_description": "behavior. Once registered, the block is made available as an option to any\neditor interface where blocks are implemented.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The block, if it has been successfully registered;\n                    otherwise `undefined`.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unregisterBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 175,
				"end_line": 185,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous block value, if it has been successfully\n                    unregistered; otherwise `undefined`.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setFreeformContentHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 193,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns name of block for handling non-block content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFreeformContentHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 204,
				"end_line": 206,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves name of block handling non-block content, or undefined if no",
					"long_description": "handler has been defined.",
					"tags": [
						{
							"name": "return",
							"content": "Blog name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setUnregisteredTypeHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 214,
				"end_line": 216,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns name of block handling unregistered block types.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getUnregisteredTypeHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 225,
				"end_line": 227,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves name of block handling unregistered block types, or undefined if no",
					"long_description": "handler has been defined.",
					"tags": [
						{
							"name": "return",
							"content": "Blog name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 235,
				"end_line": 237,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 245,
				"end_line": 247,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 257,
				"end_line": 259,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 267,
				"end_line": 269,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 282,
				"end_line": 284,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the block support value for a feature, if defined.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name or type object",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to retrieve",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Default value to return if not\n                                          explicitly defined",
							"types": [
								"*"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Block support value",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 297,
				"end_line": 299,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the block defines support for a feature, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name or type object.",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to test.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Whether feature is supported by\n                                         default if not explicitly defined.",
							"types": [
								"boolean"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Whether block supports feature.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isReusableBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 311,
				"end_line": 313,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockOrType",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Determines whether or not the given block is a reusable block. This is a",
					"long_description": "special block type that is used to point to a global block stored via the\nAPI.",
					"tags": [
						{
							"name": "param",
							"content": "Block or Block Type to test.",
							"types": [
								"Object"
							],
							"variable": "blockOrType"
						},
						{
							"name": "return",
							"content": "Whether the given block is a reusable block.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getChildBlockNames",
				"namespace": "blocks",
				"aliases": [],
				"line": 323,
				"end_line": 325,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an array with the child blocks of a given block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Name of block (example: “latest-posts”).",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "Array of child block names.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/serializer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockDefaultClassName",
				"namespace": "blocks",
				"aliases": [],
				"line": 54,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's default classname from its name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The block's default class.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockMenuDefaultClassName",
				"namespace": "blocks",
				"aliases": [],
				"line": 69,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's default menu item classname from its name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The block's default menu item class.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSaveElement",
				"namespace": "blocks",
				"aliases": [],
				"line": 87,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block type containing a save render implementation and attributes, returns the",
					"long_description": "enhanced element to be saved or string when raw HTML expected.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Save element or raw HTML string.",
							"types": [
								"Object",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSaveContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 146,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block type containing a save render implementation and attributes, returns the",
					"long_description": "static markup to be saved.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Save content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCommentAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 168,
				"end_line": 191,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockType",
						"default": null,
						"type": "Object.<string, *>"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object.<string, *>"
					}
				],
				"doc": {
					"description": "Returns attributes which are to be saved and serialized into the block",
					"long_description": "comment delimiter.\n\nWhen a block exists in memory it contains as its attributes both those\nparsed the block comment delimiter _and_ those which matched from the\ncontents of the block.\n\nThis function returns only those attributes which are needed to persist and\nwhich cannot be matched from the block content.",
					"tags": [
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object.<string, *>"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Attributes from in-memory block data.",
							"types": [
								"Object.<string, *>"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Subset of attributes for comment serialization.",
							"types": [
								"Object.<string, *>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serializeAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 202,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an attributes object, returns a string in the serialized attributes",
					"long_description": "format prepared for post content.",
					"tags": [
						{
							"name": "param",
							"content": "Attributes object.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Serialized attributes.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 220,
				"end_line": 236,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a block object, returns the Block's Inner HTML markup.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCommentDelimitedContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 248,
				"end_line": 258,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rawBlockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the content of a block, including comment delimiters.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "rawBlockName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Block save content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "return",
							"content": "Comment-delimited block content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serializeBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 269,
				"end_line": 285,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the content of a block, including comment delimiters, determining",
					"long_description": "serialized attributes and content form from the current state of the block.",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Serialized block.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serialize",
				"namespace": "blocks",
				"aliases": [],
				"line": 295,
				"end_line": 297,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Takes a block or set of blocks and returns the serialized post content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block(s) to serialize.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "The post content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/templates.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "doBlocksMatchTemplate",
				"namespace": "blocks",
				"aliases": [],
				"line": 43,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "template",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Checks whether a list of blocks matches a template by comparing the block names.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block list.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block template.",
							"types": [
								"Array"
							],
							"variable": "template"
						},
						{
							"name": "return",
							"content": "Whether the list of blocks matches a templates",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "synchronizeBlocksWithTemplate",
				"namespace": "blocks",
				"aliases": [],
				"line": 70,
				"end_line": 132,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "template",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Synchronize a block list with a block template.",
					"long_description": "\nSynchronizing a block list with a block template means that we loop over the blocks\nkeep the block as is if it matches the block at the same position in the template\n(If it has the same name) and if doesn't match, we create a new block based on the template.\nExtra blocks not present in the template are removed.",
					"tags": [
						{
							"name": "param",
							"content": "Block list.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block template.",
							"types": [
								"Array"
							],
							"variable": "template"
						},
						{
							"name": "return",
							"content": "Updated Block list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isUnmodifiedDefaultBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 56,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Determines whether the block is a default block",
					"long_description": "and its attributes are equal to the default attributes\nwhich means the block is unmodified.",
					"tags": [
						{
							"name": "param",
							"content": "Block Object",
							"types": [
								"WPBlock"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Whether the block is an unmodified default block",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidIcon",
				"namespace": "blocks",
				"aliases": [],
				"line": 84,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "icon",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Function that checks if the parameter is a valid icon.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parameter to be checked.",
							"types": [
								"*"
							],
							"variable": "icon"
						},
						{
							"name": "return",
							"content": "True if the parameter is a valid icon and false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeIconObject",
				"namespace": "blocks",
				"aliases": [],
				"line": 100,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "icon",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Function that receives an icon as set by the blocks during the registration",
					"long_description": "and returns a new icon object that is normalized so we can rely on just on possible icon structure\nin the codebase.",
					"tags": [
						{
							"name": "param",
							"content": "Slug of the Dashicon to be shown\n                                         as the icon for the block in the\n                                         inserter, or element or an object describing the icon.",
							"types": [
								"Object",
								"string",
								"WPElement"
							],
							"variable": "icon"
						},
						{
							"name": "return",
							"content": "Object describing the icon.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 136,
				"end_line": 142,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Normalizes block type passed as param. When string is passed then",
					"long_description": "it converts it to the matching block type object.\nIt passes the original object otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "return",
							"content": "Block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/api/validation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isValidCharacterReference",
				"namespace": "blocks",
				"aliases": [],
				"line": 187,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given string is a valid character reference segment, or",
					"long_description": "false otherwise. The text should be stripped of `&` and `;` demarcations.",
					"tags": [
						{
							"name": "param",
							"content": "Text to test.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Whether text is valid character reference.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "value",
				"namespace": "blocks",
				"aliases": [],
				"line": 217,
				"end_line": 221,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entity",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a substitute string for an entity string sequence between `&`",
					"long_description": "and `;`, or undefined if no substitution should occur.",
					"tags": [
						{
							"name": "param",
							"content": "Entity fragment discovered in HTML.",
							"types": [
								"string"
							],
							"variable": "entity"
						},
						{
							"name": "return",
							"content": "Entity substitute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTextPiecesSplitOnWhitespace",
				"namespace": "blocks",
				"aliases": [],
				"line": 280,
				"end_line": 282,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a specified string, returns an array of strings split by consecutive",
					"long_description": "whitespace, ignoring leading or trailing whitespace.",
					"tags": [
						{
							"name": "param",
							"content": "Original text.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Text pieces split on whitespace.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTextWithCollapsedWhitespace",
				"namespace": "blocks",
				"aliases": [],
				"line": 293,
				"end_line": 299,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a specified string, returns a new trimmed string where all consecutive",
					"long_description": "whitespace is collapsed to a single space.",
					"tags": [
						{
							"name": "param",
							"content": "Original text.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Trimmed text with consecutive whitespace collapsed.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMeaningfulAttributePairs",
				"namespace": "blocks",
				"aliases": [],
				"line": 313,
				"end_line": 321,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "token",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns attribute pairs of the given StartTag token, including only pairs",
					"long_description": "where the value is non-empty or the attribute is a boolean attribute, an\nenumerated attribute, or a custom data- attribute.",
					"tags": [
						{
							"name": "param",
							"content": "StartTag token.",
							"types": [
								"Object"
							],
							"variable": "token"
						},
						{
							"name": "return",
							"content": "Attribute pairs.",
							"types": [
								"Array.<Array>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEquivalentTextTokens",
				"namespace": "blocks",
				"aliases": [],
				"line": 333,
				"end_line": 353,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "Object"
					},
					{
						"name": "expected",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if two text tokens (with `chars` property) are equivalent, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Actual token.",
							"types": [
								"Object"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected token.",
							"types": [
								"Object"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether two text tokens are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalizedStyleValue",
				"namespace": "blocks",
				"aliases": [],
				"line": 364,
				"end_line": 367,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a style value, returns a normalized style value for strict equality",
					"long_description": "comparison.",
					"tags": [
						{
							"name": "param",
							"content": "Style value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized style value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getStyleProperties",
				"namespace": "blocks",
				"aliases": [],
				"line": 377,
				"end_line": 392,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a style attribute string, returns an object of style properties.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Style attribute.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Style properties.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLTokens",
				"namespace": "blocks",
				"aliases": [],
				"line": 520,
				"end_line": 528,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Tokenize an HTML string, gracefully handling any errors thrown during",
					"long_description": "underlying tokenization.",
					"tags": [
						{
							"name": "param",
							"content": "HTML string to tokenize.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "Array of valid tokenized HTML elements, or null on error",
							"types": [
								"Array.<Object>",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isClosedByToken",
				"namespace": "blocks",
				"aliases": [],
				"line": 539,
				"end_line": 551,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "currentToken",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nextToken",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the next HTML token closes the current token.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current token to compare with.",
							"types": [
								"Object"
							],
							"variable": "currentToken"
						},
						{
							"name": "param",
							"content": "Next token to compare against.",
							"types": [
								"Object",
								"undefined"
							],
							"variable": "nextToken"
						},
						{
							"name": "return",
							"content": "true if `nextToken` closes `currentToken`, false otherwise",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEquivalentHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 564,
				"end_line": 621,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "string"
					},
					{
						"name": "expected",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given HTML strings are effectively equivalent, or",
					"long_description": "false otherwise. Invalid HTML is not considered equivalent, even if the\nstrings directly match.",
					"tags": [
						{
							"name": "param",
							"content": "Actual HTML string.",
							"types": [
								"string"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected HTML string.",
							"types": [
								"string"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether HTML strings are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidBlockContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 637,
				"end_line": 655,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the parsed block is valid given the input content. A block",
					"long_description": "is considered valid if, when serialized with assumed attributes, the content\nmatches the original value.\n\nLogs to console in development environments when invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Parsed block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Original block content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Whether block is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/block-content-provider/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockContentProvider",
				"namespace": "blocks",
				"aliases": [],
				"line": 47,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "An internal block component used in block content serialization to inject",
					"long_description": "nested block content within the `save` implementation of the ancestor\ncomponent in which it is nested. The component provides a pre-bound\n`BlockContent` component via context, which is used by the developer-facing\n`InnerBlocks.Content` component to render block content.",
					"tags": [
						{
							"name": "return",
							"content": "Element with BlockContent injected via context.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 29,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that block types have been added.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block types received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "blockTypes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 44,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "names",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a registered block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string",
								"Array"
							],
							"variable": "names"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 60,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that new block styles have been added.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Block styles.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "styles"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 77,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "styleNames",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that block styles have been removed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Block style names.",
							"types": [
								"Array",
								"string"
							],
							"variable": "styleNames"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 93,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setFreeformFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 109,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the name of the block used as a fallback",
					"long_description": "for non-block content.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setUnregisteredFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 125,
				"end_line": 130,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the name of the block used as a fallback",
					"long_description": "for unregistered blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 140,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "categories",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used to set block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							],
							"variable": "categories"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCategory",
				"namespace": "blocks",
				"aliases": [],
				"line": 156,
				"end_line": 162,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "category",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to update a category.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block category slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "Object containing the category properties that should be updated.",
							"types": [
								"Object"
							],
							"variable": "category"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "blockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 93,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the block style variations.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockNameSetterReducer",
				"namespace": "blocks",
				"aliases": [],
				"line": 127,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "setActionType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order Reducer creating a reducer keeping track of given block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Action type.",
							"types": [
								"string"
							],
							"variable": "setActionType"
						},
						{
							"name": "return",
							"content": "Reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 61,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns block styles by block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block Styles.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 73,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all the available categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Categories list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 85,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Default block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFreeformFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 97,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the block for handling non-block content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Name of the block for handling non-block content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getUnregisteredFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 109,
				"end_line": 111,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the block for handling unregistered blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Name of the block for handling unregistered blocks.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasChildBlocks",
				"namespace": "blocks",
				"aliases": [],
				"line": 178,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a boolean indicating if a block has child blocks or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block type name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "True if a block contains child blocks and false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/categories.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all the block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 20,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "categories",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Sets the block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							],
							"variable": "categories"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCategory",
				"namespace": "blocks",
				"aliases": [],
				"line": 30,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "category",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Updates a category.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block category slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "Object containing the category properties that should be updated.",
							"types": [
								"Object"
							],
							"variable": "category"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/children.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSerializeCapableElement",
				"namespace": "blocks",
				"aliases": [],
				"line": 29,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given block children, returns a serialize-capable WordPress element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block children object to convert.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "A serialize-capable element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getChildrenArray",
				"namespace": "blocks",
				"aliases": [],
				"line": 46,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given block children, returns an array of block nodes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block children object to convert.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "An array of individual block nodes.",
							"types": [
								"Array.<WPBlockNode>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "concat",
				"namespace": "blocks",
				"aliases": [],
				"line": 62,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockNodes",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given two or more block nodes, returns a new block node representing a",
					"long_description": "concatenation of its values.",
					"tags": [
						{
							"name": "param",
							"content": "Block nodes to concatenate.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "blockNodes"
						},
						{
							"name": "return",
							"content": "Concatenated block node.",
							"types": [
								"WPBlockChildren"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromDOM",
				"namespace": "blocks",
				"aliases": [],
				"line": 91,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domNodes",
						"default": null,
						"type": "Iterable.<Node>"
					}
				],
				"doc": {
					"description": "Given an iterable set of DOM nodes, returns equivalent block children.",
					"long_description": "Ignores any non-element/text nodes included in set.",
					"tags": [
						{
							"name": "param",
							"content": "Iterable set of DOM nodes to convert.",
							"types": [
								"Iterable.<Node>"
							],
							"variable": "domNodes"
						},
						{
							"name": "return",
							"content": "Block children equivalent to DOM nodes.",
							"types": [
								"WPBlockChildren"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 111,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given a block node, returns its HTML string representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block node(s) to convert to string.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "String HTML representation of block node.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 124,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a selector, returns an hpq matcher generating a WPBlockChildren value",
					"long_description": "matching the selector result.",
					"tags": [
						{
							"name": "param",
							"content": "DOM selector.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "return",
							"content": "hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/factory.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 30,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns a block object given its type and attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Block object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cloneBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 80,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					},
					{
						"name": "mergeAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newInnerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block object, returns a copy of the block object, optionally merging",
					"long_description": "new attributes and/or replacing its inner blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "mergeAttributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "newInnerBlocks"
						},
						{
							"name": "return",
							"content": "A cloned block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPossibleTransformForSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 103,
				"end_line": 143,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transform",
						"default": null,
						"type": "Object"
					},
					{
						"name": "direction",
						"default": null,
						"type": "string"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns a boolean indicating whether a transform is possible based on",
					"long_description": "various bits of context.",
					"tags": [
						{
							"name": "param",
							"content": "The transform object to validate.",
							"types": [
								"Object"
							],
							"variable": "transform"
						},
						{
							"name": "param",
							"content": "Is this a 'from' or 'to' transform.",
							"types": [
								"string"
							],
							"variable": "direction"
						},
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Is the transform possible?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypesForPossibleFromTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 154,
				"end_line": 168,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns block types that the 'blocks' can be transformed into, based on",
					"long_description": "'from' transforms on other blocks.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the blocks can be transformed into.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypesForPossibleToTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 179,
				"end_line": 199,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns block types that the 'blocks' can be transformed into, based on",
					"long_description": "the source block's own 'to' transforms.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the source can be transformed into.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPossibleBlockTransformations",
				"namespace": "blocks",
				"aliases": [],
				"line": 210,
				"end_line": 227,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an array of block types that the set of blocks received as argument",
					"long_description": "can be transformed into.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks array.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the blocks argument can be transformed to.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "findTransform",
				"namespace": "blocks",
				"aliases": [],
				"line": 241,
				"end_line": 262,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transforms",
						"default": null,
						"type": "Array.<Object>"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given an array of transforms, returns the highest-priority transform where",
					"long_description": "the predicate function returns a truthy value. A higher-priority transform\nis one with a lower priority value (i.e. first in priority order). Returns\nnull if the transforms set is empty or the predicate function returns a\nfalsey value for all entries.",
					"tags": [
						{
							"name": "param",
							"content": "Transforms to search.",
							"types": [
								"Array.<Object>"
							],
							"variable": "transforms"
						},
						{
							"name": "param",
							"content": "Function returning true on matching transform.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Highest-priority transform candidate.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 275,
				"end_line": 301,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "direction",
						"default": null,
						"type": "string"
					},
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns normal block transforms for a given transform direction, optionally",
					"long_description": "for a specific block by name, or an empty array if there are no transforms.\nIf no block name is provided, returns transforms for all blocks. A normal\ntransform object includes `blockName` as a property.",
					"tags": [
						{
							"name": "param",
							"content": "Transform direction (\"to\", \"from\").",
							"types": [
								"string"
							],
							"variable": "direction"
						},
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "return",
							"content": "Block transforms for direction.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "switchToBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 311,
				"end_line": 393,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switch one or more blocks into one or more blocks of the new block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Blocks array or block object.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Array of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/node.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isNodeOfType",
				"namespace": "blocks",
				"aliases": [],
				"line": 35,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "WPBlockNode"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a single node and a node type (e.g. `'br'`), returns true if the node",
					"long_description": "corresponds to that type, false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Block node to test",
							"types": [
								"WPBlockNode"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Node to type to test against.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Whether node is of intended type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNamedNodeMapAsObject",
				"namespace": "blocks",
				"aliases": [],
				"line": 50,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeMap",
						"default": null,
						"type": "NamedNodeMap"
					}
				],
				"doc": {
					"description": "Given an object implementing the NamedNodeMap interface, returns a plain",
					"long_description": "object equivalent value of name, value key-value pairs.",
					"tags": [
						{
							"name": "param",
							"content": "NamedNodeMap to convert to object.",
							"types": [
								"NamedNodeMap"
							],
							"variable": "nodeMap"
						},
						{
							"name": "return",
							"content": "Object equivalent value of NamedNodeMap.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromDOM",
				"namespace": "blocks",
				"aliases": [],
				"line": 73,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domNode",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Given a DOM Element or Text node, returns an equivalent block node. Throws",
					"long_description": "if passed any node type other than element or text.",
					"tags": [
						{
							"name": "param",
							"content": "DOM node to convert.",
							"types": [
								"Node"
							],
							"variable": "domNode"
						},
						{
							"name": "return",
							"content": "Block node equivalent to DOM node.",
							"types": [
								"WPBlockNode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 97,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "WPBlockNode"
					}
				],
				"doc": {
					"description": "Given a block node, returns its HTML string representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block node to convert to string.",
							"types": [
								"WPBlockNode"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "String HTML representation of block node.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 109,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a selector, returns an hpq matcher generating a WPBlockNode value",
					"long_description": "matching the selector result.",
					"tags": [
						{
							"name": "param",
							"content": "DOM selector.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "return",
							"content": "hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/parser.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isOfType",
				"namespace": "blocks",
				"aliases": [],
				"line": 74,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if value is of the given JSON schema type, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to test.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Type to test.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Whether value is of type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isOfTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 110,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "types",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns true if value is of an array of given JSON schema types, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Value to test.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Types to test.",
							"types": [
								"Array.<string>"
							],
							"variable": "types"
						},
						{
							"name": "return",
							"content": "Whether value is of types.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAmbiguousStringSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 130,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the given attribute schema describes a value which may be",
					"long_description": "an ambiguous string.\n\nSome sources are ambiguously serialized as strings, for which value casting\nis enabled. This is only possible when a singular type is assigned to the\nattribute schema, since the string ambiguity makes it impossible to know the\ncorrect type of multiple to which to cast.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "return",
							"content": "Whether attribute schema defines an ambiguous string\n                  source.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "asType",
				"namespace": "blocks",
				"aliases": [],
				"line": 148,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns value coerced to the specified JSON schema type string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Type to coerce.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Coerced value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcherFromSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 184,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "sourceConfig",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an hpq matcher given a source object.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute Source object.",
							"types": [
								"Object"
							],
							"variable": "sourceConfig"
						},
						{
							"name": "return",
							"content": "A hpq Matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "parseWithAttributeSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 231,
				"end_line": 233,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a block's raw content and an attribute's schema returns the attribute's",
					"long_description": "value depending on its source.",
					"tags": [
						{
							"name": "param",
							"content": "Block's raw content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockAttribute",
				"namespace": "blocks",
				"aliases": [],
				"line": 247,
				"end_line": 280,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributeKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "commentAttributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an attribute key, an attribute's schema, a block's raw content and the",
					"long_description": "commentAttributes returns the attribute value depending on its source\ndefinition of the given attribute key.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"string"
							],
							"variable": "attributeKey"
						},
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "param",
							"content": "Block's raw content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Block's comment attributes.",
							"types": [
								"Object"
							],
							"variable": "commentAttributes"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 291,
				"end_line": 298,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the block attributes of a registered block node given its type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Raw block content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Known block attributes (from delimiters).",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "All block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMigratedBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 309,
				"end_line": 369,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Given a block object, returns a new copy of the block with any applicable",
					"long_description": "deprecated migrations applied, or the original block if it was both valid\nand no eligible migrations exist.",
					"tags": [
						{
							"name": "param",
							"content": "Original block object.",
							"types": [
								"WPBlock"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Migrated block object.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockWithFallback",
				"namespace": "blocks",
				"aliases": [],
				"line": 378,
				"end_line": 451,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockNode",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a block with fallback to the unknown type handler.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parsed block node.",
							"types": [
								"Object"
							],
							"variable": "blockNode"
						},
						{
							"name": "return",
							"content": "An initialized block object (if possible).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createParse",
				"namespace": "blocks",
				"aliases": [],
				"line": 460,
				"end_line": 472,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "parseImplementation",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Creates a parse implementation for the post content which returns a list of blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parse implementation.",
							"types": [
								"function"
							],
							"variable": "parseImplementation"
						},
						{
							"name": "return",
							"content": "An implementation which parses the post content.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/figure-content-reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFigureContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 19,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the given node is figure content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "True if figure content, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canHaveAnchor",
				"namespace": "blocks",
				"aliases": [],
				"line": 39,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the given node can have an anchor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "True if it can, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 55,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "This filter takes figure content out of paragraphs, wraps it in a figure",
					"long_description": "element, and moves any anchors with it if needed.",
					"tags": [
						{
							"name": "param",
							"content": "The node to filter.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The document of the node.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/iframe-remover.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 13,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Removes iframes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/image-corrector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterInlineHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 44,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filters HTML to only contain phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to filter.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "return",
							"content": "HTML only containing phrasing content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "htmlToBlocks",
				"namespace": "blocks",
				"aliases": [],
				"line": 78,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.html",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.rawTransforms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Converts HTML directly to blocks. Looks for a matching transform for each",
					"long_description": "top-level tag. The HTML should be filtered to not have any text between\ntop-level tags and formatted in a way that blocks can handle the HTML.",
					"tags": [
						{
							"name": "param",
							"content": "Named parameters.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "HTML to convert.",
							"types": [
								"string"
							],
							"variable": "$1.html"
						},
						{
							"name": "param",
							"content": "Transforms that can be used.",
							"types": [
								"Array"
							],
							"variable": "$1.rawTransforms"
						},
						{
							"name": "return",
							"content": "An array of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "pasteHandler",
				"namespace": "blocks",
				"aliases": [],
				"line": 120,
				"end_line": 219,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.plainText",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.mode",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.tagName",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.canUserUseUnfilteredHTML",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Converts an HTML string to known blocks. Strips everything else.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to convert.",
							"types": [
								"string"
							],
							"variable": "options.HTML"
						},
						{
							"name": "param",
							"content": "Plain text version.",
							"types": [
								"string"
							],
							"variable": "options.plainText"
						},
						{
							"name": "param",
							"content": "Handle content as blocks or inline content.\n                                                    * 'AUTO': Decide based on the content passed.\n                                                    * 'INLINE': Always handle as inline content, and return string.\n                                                    * 'BLOCKS': Always handle as blocks, and return array of blocks.",
							"types": [
								"string"
							],
							"variable": "options.mode"
						},
						{
							"name": "param",
							"content": "The tag into which content will be inserted.",
							"types": [
								"Array"
							],
							"variable": "options.tagName"
						},
						{
							"name": "param",
							"content": "Whether or not the user can use unfiltered HTML.",
							"types": [
								"boolean"
							],
							"variable": "options.canUserUseUnfilteredHTML"
						},
						{
							"name": "return",
							"content": "A list of blocks or a string, depending on `handlerMode`.",
							"types": [
								"Array",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "rawHandler",
				"namespace": "blocks",
				"aliases": [],
				"line": 228,
				"end_line": 264,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1.HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts an HTML string to known blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to convert.",
							"types": [
								"string"
							],
							"variable": "$1.HTML"
						},
						{
							"name": "return",
							"content": "A list of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/is-inline-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isInline",
				"namespace": "blocks",
				"aliases": [],
				"line": 20,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "contextTag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks if the given node should be considered inline content, optionally",
					"long_description": "depending on a context tag.",
					"tags": [
						{
							"name": "param",
							"content": "Node name.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Tag name.",
							"types": [
								"string"
							],
							"variable": "contextTag"
						},
						{
							"name": "return",
							"content": "True if the node is inline content, false if nohe.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/markdown-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "slackMarkdownVariantCorrector",
				"namespace": "blocks",
				"aliases": [],
				"line": 25,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Corrects the Slack Markdown variant of the code block.",
					"long_description": "If uncorrected, it will be converted to inline code.",
					"tags": [
						{
							"name": "param",
							"content": "The potential Markdown text to correct.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The corrected Markdown.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 40,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts a piece of text into HTML based on any Markdown present.",
					"long_description": "Also decodes any encoded HTML.",
					"tags": [
						{
							"name": "param",
							"content": "The plain text to convert.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/ms-list-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/normalise-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/phrasing-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPhrasingContentSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Get schema of possible paths for phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Schema.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPhrasingContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 49,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Find out whether or not the given node is phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to test.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "True if phrasing content, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/special-comment-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 27,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					}
				],
				"doc": {
					"description": "Looks for `<!--nextpage-->` and `<!--more-->` comments, as well as the",
					"long_description": "`<!--more Some text-->` variant and its `<!--noteaser-->` companion,\nand replaces them with a custom element representing a future block.\n\nThe custom element is a way to bypass the rest of the `raw-handling`\ntransforms, which would eliminate other kinds of node with which to carry\n`<!--more-->`'s data: nodes with `data` attributes, empty paragraphs, etc.\n\nThe custom element is then expected to be recognized by any registered\nblock's `raw` transform.",
					"tags": [
						{
							"name": "param",
							"content": "The node to be processed.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The document of the node.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/raw-handling/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockContentSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 34,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transforms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given raw transforms from blocks, merges all schemas into one.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block transforms, of the `raw` type.",
							"types": [
								"Array"
							],
							"variable": "transforms"
						},
						{
							"name": "return",
							"content": "A complete block content schema.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEmpty",
				"namespace": "blocks",
				"aliases": [],
				"line": 102,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Recursively checks if an element is empty. An element is not empty if it",
					"long_description": "contains text or contains elements with attributes such as images.",
					"tags": [
						{
							"name": "param",
							"content": "The element to check.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Wether or not the element is empty.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPlain",
				"namespace": "blocks",
				"aliases": [],
				"line": 134,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks wether HTML can be considered plain text. That is, it does not contain",
					"long_description": "any elements that are not line breaks.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to check.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "return",
							"content": "Wether the HTML can be considered plain text.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deepFilterNodeList",
				"namespace": "blocks",
				"aliases": [],
				"line": 146,
				"end_line": 158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeList",
						"default": null,
						"type": "NodeList"
					},
					{
						"name": "filters",
						"default": null,
						"type": "Array"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given node filters, deeply filters and mutates a NodeList.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The nodeList to filter.",
							"types": [
								"NodeList"
							],
							"variable": "nodeList"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Array"
							],
							"variable": "filters"
						},
						{
							"name": "param",
							"content": "The document of the nodeList.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deepFilterHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 170,
				"end_line": 177,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "filters",
						"default": null,
						"type": "Array"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given node filters, deeply filters HTML tags.",
					"long_description": "Filters from the deepest nodes to the top.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to filter.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Array"
							],
							"variable": "filters"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "The filtered HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cleanNodeList",
				"namespace": "blocks",
				"aliases": [],
				"line": 188,
				"end_line": 295,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeList",
						"default": null,
						"type": "NodeList"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "inline",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a schema, unwraps or removes nodes, attributes and classes on a node",
					"long_description": "list.",
					"tags": [
						{
							"name": "param",
							"content": "The nodeList to filter.",
							"types": [
								"NodeList"
							],
							"variable": "nodeList"
						},
						{
							"name": "param",
							"content": "The document of the nodeList.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "param",
							"content": "Whether to clean for inline mode.",
							"types": [
								"Object"
							],
							"variable": "inline"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeInvalidHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 307,
				"end_line": 312,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "inline",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a schema, unwraps or removes nodes, attributes and classes on HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to clean up.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "param",
							"content": "Schema for the HTML.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "param",
							"content": "Whether to clean for inline mode.",
							"types": [
								"Object"
							],
							"variable": "inline"
						},
						{
							"name": "return",
							"content": "The cleaned up HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/registration.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unstable__bootstrapServerSideBlockDefinitions",
				"namespace": "blocks",
				"aliases": [],
				"line": 52,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "definitions",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Set the server side block definition of blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Server-side block definitions",
							"types": [
								"Object"
							],
							"variable": "definitions"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 68,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a new block provided a unique name and an object defining its",
					"long_description": "behavior. Once registered, the block is made available as an option to any\neditor interface where blocks are implemented.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The block, if it has been successfully registered;\n                    otherwise `undefined`.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unregisterBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 146,
				"end_line": 156,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous block value, if it has been successfully\n                    unregistered; otherwise `undefined`.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setFreeformContentHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 163,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns name of block for handling non-block content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFreeformContentHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 173,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves name of block handling non-block content, or undefined if no",
					"long_description": "handler has been defined.",
					"tags": [
						{
							"name": "return",
							"content": "Blog name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setUnregisteredTypeHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 182,
				"end_line": 184,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns name of block handling unregistered block types.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getUnregisteredTypeHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 192,
				"end_line": 194,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves name of block handling unregistered block types, or undefined if no",
					"long_description": "handler has been defined.",
					"tags": [
						{
							"name": "return",
							"content": "Blog name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 201,
				"end_line": 203,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 210,
				"end_line": 212,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 221,
				"end_line": 223,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 230,
				"end_line": 232,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 244,
				"end_line": 246,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the block support value for a feature, if defined.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name or type object",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to retrieve",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Default value to return if not\n                                          explicitly defined",
							"types": [
								"*"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Block support value",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 258,
				"end_line": 260,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the block defines support for a feature, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name or type object.",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to test.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Whether feature is supported by\n                                         default if not explicitly defined.",
							"types": [
								"boolean"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Whether block supports feature.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isReusableBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 271,
				"end_line": 273,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockOrType",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Determines whether or not the given block is a reusable block. This is a",
					"long_description": "special block type that is used to point to a global block stored via the\nAPI.",
					"tags": [
						{
							"name": "param",
							"content": "Block or Block Type to test.",
							"types": [
								"Object"
							],
							"variable": "blockOrType"
						},
						{
							"name": "return",
							"content": "Whether the given block is a reusable block.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/serializer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockDefaultClassName",
				"namespace": "blocks",
				"aliases": [],
				"line": 30,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's default classname from its name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The block's default class.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockMenuDefaultClassName",
				"namespace": "blocks",
				"aliases": [],
				"line": 44,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's default menu item classname from its name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The block's default menu item class.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSaveElement",
				"namespace": "blocks",
				"aliases": [],
				"line": 61,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block type containing a save render implementation and attributes, returns the",
					"long_description": "enhanced element to be saved or string when raw HTML expected.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Save element or raw HTML string.",
							"types": [
								"Object",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSaveContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 119,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block type containing a save render implementation and attributes, returns the",
					"long_description": "static markup to be saved.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Save content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCommentAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 140,
				"end_line": 163,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockType",
						"default": null,
						"type": "Object.<string, *>"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object.<string, *>"
					}
				],
				"doc": {
					"description": "Returns attributes which are to be saved and serialized into the block",
					"long_description": "comment delimiter.\n\nWhen a block exists in memory it contains as its attributes both those\nparsed the block comment delimiter _and_ those which matched from the\ncontents of the block.\n\nThis function returns only those attributes which are needed to persist and\nwhich cannot be matched from the block content.",
					"tags": [
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object.<string, *>"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Attributes from in-memory block data.",
							"types": [
								"Object.<string, *>"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Subset of attributes for comment serialization.",
							"types": [
								"Object.<string, *>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serializeAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 173,
				"end_line": 181,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an attributes object, returns a string in the serialized attributes",
					"long_description": "format prepared for post content.",
					"tags": [
						{
							"name": "param",
							"content": "Attributes object.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Serialized attributes.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 190,
				"end_line": 206,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a block object, returns the Block's Inner HTML markup.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCommentDelimitedContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 217,
				"end_line": 227,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rawBlockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the content of a block, including comment delimiters.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "rawBlockName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Block save content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "return",
							"content": "Comment-delimited block content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serializeBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 237,
				"end_line": 253,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the content of a block, including comment delimiters, determining",
					"long_description": "serialized attributes and content form from the current state of the block.",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Serialized block.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 262,
				"end_line": 264,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Takes a block or set of blocks and returns the serialized post content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block(s) to serialize.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "The post content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/templates.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "doBlocksMatchTemplate",
				"namespace": "blocks",
				"aliases": [],
				"line": 28,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "template",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Checks whether a list of blocks matches a template by comparing the block names.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block list.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block template.",
							"types": [
								"Array"
							],
							"variable": "template"
						},
						{
							"name": "return",
							"content": "Whether the list of blocks matches a templates",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "synchronizeBlocksWithTemplate",
				"namespace": "blocks",
				"aliases": [],
				"line": 54,
				"end_line": 116,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "template",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Synchronize a block list with a block template.",
					"long_description": "\nSynchronizing a block list with a block template means that we loop over the blocks\nkeep the block as is if it matches the block at the same position in the template\n(If it has the same name) and if doesn't match, we create a new block based on the template.\nExtra blocks not present in the template are removed.",
					"tags": [
						{
							"name": "param",
							"content": "Block list.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block template.",
							"types": [
								"Array"
							],
							"variable": "template"
						},
						{
							"name": "return",
							"content": "Updated Block list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isUnmodifiedDefaultBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 37,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Determines whether the block is a default block",
					"long_description": "and its attributes are equal to the default attributes\nwhich means the block is unmodified.",
					"tags": [
						{
							"name": "param",
							"content": "Block Object",
							"types": [
								"WPBlock"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Whether the block is an unmodified default block",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidIcon",
				"namespace": "blocks",
				"aliases": [],
				"line": 64,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "icon",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Function that checks if the parameter is a valid icon.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parameter to be checked.",
							"types": [
								"*"
							],
							"variable": "icon"
						},
						{
							"name": "return",
							"content": "True if the parameter is a valid icon and false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeIconObject",
				"namespace": "blocks",
				"aliases": [],
				"line": 79,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "icon",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Function that receives an icon as set by the blocks during the registration",
					"long_description": "and returns a new icon object that is normalized so we can rely on just on possible icon structure\nin the codebase.",
					"tags": [
						{
							"name": "param",
							"content": "Slug of the Dashicon to be shown\n                                         as the icon for the block in the\n                                         inserter, or element or an object describing the icon.",
							"types": [
								"Object",
								"string",
								"WPElement"
							],
							"variable": "icon"
						},
						{
							"name": "return",
							"content": "Object describing the icon.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 114,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Normalizes block type passed as param. When string is passed then",
					"long_description": "it converts it to the matching block type object.\nIt passes the original object otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "return",
							"content": "Block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/api/validation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isValidCharacterReference",
				"namespace": "blocks",
				"aliases": [],
				"line": 156,
				"end_line": 158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given string is a valid character reference segment, or",
					"long_description": "false otherwise. The text should be stripped of `&` and `;` demarcations.",
					"tags": [
						{
							"name": "param",
							"content": "Text to test.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Whether text is valid character reference.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "value",
				"namespace": "blocks",
				"aliases": [],
				"line": 185,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entity",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a substitute string for an entity string sequence between `&`",
					"long_description": "and `;`, or undefined if no substitution should occur.",
					"tags": [
						{
							"name": "param",
							"content": "Entity fragment discovered in HTML.",
							"types": [
								"string"
							],
							"variable": "entity"
						},
						{
							"name": "return",
							"content": "Entity substitute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTextPiecesSplitOnWhitespace",
				"namespace": "blocks",
				"aliases": [],
				"line": 246,
				"end_line": 248,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a specified string, returns an array of strings split by consecutive",
					"long_description": "whitespace, ignoring leading or trailing whitespace.",
					"tags": [
						{
							"name": "param",
							"content": "Original text.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Text pieces split on whitespace.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTextWithCollapsedWhitespace",
				"namespace": "blocks",
				"aliases": [],
				"line": 258,
				"end_line": 264,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a specified string, returns a new trimmed string where all consecutive",
					"long_description": "whitespace is collapsed to a single space.",
					"tags": [
						{
							"name": "param",
							"content": "Original text.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Trimmed text with consecutive whitespace collapsed.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMeaningfulAttributePairs",
				"namespace": "blocks",
				"aliases": [],
				"line": 277,
				"end_line": 285,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "token",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns attribute pairs of the given StartTag token, including only pairs",
					"long_description": "where the value is non-empty or the attribute is a boolean attribute, an\nenumerated attribute, or a custom data- attribute.",
					"tags": [
						{
							"name": "param",
							"content": "StartTag token.",
							"types": [
								"Object"
							],
							"variable": "token"
						},
						{
							"name": "return",
							"content": "Attribute pairs.",
							"types": [
								"Array.<Array>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEquivalentTextTokens",
				"namespace": "blocks",
				"aliases": [],
				"line": 296,
				"end_line": 316,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "Object"
					},
					{
						"name": "expected",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if two text tokens (with `chars` property) are equivalent, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Actual token.",
							"types": [
								"Object"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected token.",
							"types": [
								"Object"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether two text tokens are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalizedStyleValue",
				"namespace": "blocks",
				"aliases": [],
				"line": 326,
				"end_line": 329,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a style value, returns a normalized style value for strict equality",
					"long_description": "comparison.",
					"tags": [
						{
							"name": "param",
							"content": "Style value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized style value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getStyleProperties",
				"namespace": "blocks",
				"aliases": [],
				"line": 338,
				"end_line": 353,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a style attribute string, returns an object of style properties.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Style attribute.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "Style properties.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEqualTagAttributePairs",
				"namespace": "blocks",
				"aliases": [],
				"line": 382,
				"end_line": 422,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "Array.<Array>"
					},
					{
						"name": "expected",
						"default": null,
						"type": "Array.<Array>"
					}
				],
				"doc": {
					"description": "Given two sets of attribute tuples, returns true if the attribute sets are",
					"long_description": "equivalent.",
					"tags": [
						{
							"name": "param",
							"content": "Actual attributes tuples.",
							"types": [
								"Array.<Array>"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected attributes tuples.",
							"types": [
								"Array.<Array>"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether attributes are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNextNonWhitespaceToken",
				"namespace": "blocks",
				"aliases": [],
				"line": 452,
				"end_line": 464,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tokens",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Given an array of tokens, returns the first token which is not purely",
					"long_description": "whitespace.\n\nMutates the tokens array.",
					"tags": [
						{
							"name": "param",
							"content": "Set of tokens to search.",
							"types": [
								"Array.<Object>"
							],
							"variable": "tokens"
						},
						{
							"name": "return",
							"content": "Next non-whitespace token.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLTokens",
				"namespace": "blocks",
				"aliases": [],
				"line": 474,
				"end_line": 482,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Tokenize an HTML string, gracefully handling any errors thrown during",
					"long_description": "underlying tokenization.",
					"tags": [
						{
							"name": "param",
							"content": "HTML string to tokenize.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "Array of valid tokenized HTML elements, or null on error",
							"types": [
								"Array.<Object>",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isClosedByToken",
				"namespace": "blocks",
				"aliases": [],
				"line": 493,
				"end_line": 505,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "currentToken",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nextToken",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the next HTML token closes the current token.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current token to compare with.",
							"types": [
								"Object"
							],
							"variable": "currentToken"
						},
						{
							"name": "param",
							"content": "Next token to compare against.",
							"types": [
								"Object",
								"undefined"
							],
							"variable": "nextToken"
						},
						{
							"name": "return",
							"content": "true if `nextToken` closes `currentToken`, false otherwise",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEquivalentHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 517,
				"end_line": 574,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actual",
						"default": null,
						"type": "string"
					},
					{
						"name": "expected",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given HTML strings are effectively equivalent, or",
					"long_description": "false otherwise. Invalid HTML is not considered equivalent, even if the\nstrings directly match.",
					"tags": [
						{
							"name": "param",
							"content": "Actual HTML string.",
							"types": [
								"string"
							],
							"variable": "actual"
						},
						{
							"name": "param",
							"content": "Expected HTML string.",
							"types": [
								"string"
							],
							"variable": "expected"
						},
						{
							"name": "return",
							"content": "Whether HTML strings are equivalent.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidBlockContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 589,
				"end_line": 607,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the parsed block is valid given the input content. A block",
					"long_description": "is considered valid if, when serialized with assumed attributes, the content\nmatches the original value.\n\nLogs to console in development environments when invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Parsed block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Original block content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Whether block is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/block-content-provider/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockContentProvider",
				"namespace": "blocks",
				"aliases": [],
				"line": 37,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "An internal block component used in block content serialization to inject",
					"long_description": "nested block content within the `save` implementation of the ancestor\ncomponent in which it is nested. The component provides a pre-bound\n`BlockContent` component via context, which is used by the developer-facing\n`InnerBlocks.Content` component to render block content.",
					"tags": [
						{
							"name": "return",
							"content": "Element with BlockContent injected via context.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 13,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that block types have been added.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block types received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "blockTypes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 27,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "names",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a registered block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string",
								"Array"
							],
							"variable": "names"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 42,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that new block styles have been added.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Block styles.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "styles"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 58,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "styleNames",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that block styles have been removed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Block style names.",
							"types": [
								"Array",
								"string"
							],
							"variable": "styleNames"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 73,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setFreeformFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 88,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the name of the block used as a fallback",
					"long_description": "for non-block content.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setUnregisteredFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 103,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the name of the block used as a fallback",
					"long_description": "for unregistered blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 117,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "categories",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used to set block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							],
							"variable": "categories"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCategory",
				"namespace": "blocks",
				"aliases": [],
				"line": 132,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "category",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to update a category.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block category slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "Object containing the category properties that should be updated.",
							"types": [
								"Object"
							],
							"variable": "category"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "blockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 47,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the block types",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "blockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 72,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the block style variations.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockNameSetterReducer",
				"namespace": "blocks",
				"aliases": [],
				"line": 105,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "setActionType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order Reducer creating a reducer keeping track of given block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Action type.",
							"types": [
								"string"
							],
							"variable": "setActionType"
						},
						{
							"name": "return",
							"content": "Reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "categories",
				"namespace": "blocks",
				"aliases": [],
				"line": 137,
				"end_line": 166,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the categories",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a block type by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block Type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 40,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns block styles by block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block Styles.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 51,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all the available categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Categories list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 62,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Default block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFreeformFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 73,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the block for handling non-block content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Name of the block for handling non-block content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getUnregisteredFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 84,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the block for handling unregistered blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Name of the block for handling unregistered blocks.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 134,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the block defines support for a feature, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block name or type object.",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to test.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Whether feature is supported by\n                                         default if not explicitly defined.",
							"types": [
								"boolean"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Whether block supports feature.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/categories.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all the block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 20,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "categories",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Sets the block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							],
							"variable": "categories"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCategory",
				"namespace": "blocks",
				"aliases": [],
				"line": 30,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "category",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Updates a category.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block category slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "Object containing the category properties that should be updated.",
							"types": [
								"Object"
							],
							"variable": "category"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/children.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSerializeCapableElement",
				"namespace": "blocks",
				"aliases": [],
				"line": 29,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given block children, returns a serialize-capable WordPress element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block children object to convert.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "A serialize-capable element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getChildrenArray",
				"namespace": "blocks",
				"aliases": [],
				"line": 46,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given block children, returns an array of block nodes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block children object to convert.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "An array of individual block nodes.",
							"types": [
								"Array.<WPBlockNode>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "concat",
				"namespace": "blocks",
				"aliases": [],
				"line": 61,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockNodes",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given two or more block nodes, returns a new block node representing a",
					"long_description": "concatenation of its values.",
					"tags": [
						{
							"name": "param",
							"content": "Block nodes to concatenate.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "blockNodes"
						},
						{
							"name": "return",
							"content": "Concatenated block node.",
							"types": [
								"WPBlockChildren"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromDOM",
				"namespace": "blocks",
				"aliases": [],
				"line": 91,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domNodes",
						"default": null,
						"type": "Iterable.<Node>"
					}
				],
				"doc": {
					"description": "Given an iterable set of DOM nodes, returns equivalent block children.",
					"long_description": "Ignores any non-element/text nodes included in set.",
					"tags": [
						{
							"name": "param",
							"content": "Iterable set of DOM nodes to convert.",
							"types": [
								"Iterable.<Node>"
							],
							"variable": "domNodes"
						},
						{
							"name": "return",
							"content": "Block children equivalent to DOM nodes.",
							"types": [
								"WPBlockChildren"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 111,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "WPBlockChildren"
					}
				],
				"doc": {
					"description": "Given a block node, returns its HTML string representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block node(s) to convert to string.",
							"types": [
								"WPBlockChildren"
							],
							"variable": "children"
						},
						{
							"name": "return",
							"content": "String HTML representation of block node.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 125,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a selector, returns an hpq matcher generating a WPBlockChildren value",
					"long_description": "matching the selector result.",
					"tags": [
						{
							"name": "param",
							"content": "DOM selector.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "return",
							"content": "hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/factory.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 39,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns a block object given its type and attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Block object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cloneBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 90,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					},
					{
						"name": "mergeAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newInnerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block object, returns a copy of the block object, optionally merging",
					"long_description": "new attributes and/or replacing its inner blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "mergeAttributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "newInnerBlocks"
						},
						{
							"name": "return",
							"content": "A cloned block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPossibleTransformForSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 115,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transform",
						"default": null,
						"type": "Object"
					},
					{
						"name": "direction",
						"default": null,
						"type": "string"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns a boolean indicating whether a transform is possible based on",
					"long_description": "various bits of context.",
					"tags": [
						{
							"name": "param",
							"content": "The transform object to validate.",
							"types": [
								"Object"
							],
							"variable": "transform"
						},
						{
							"name": "param",
							"content": "Is this a 'from' or 'to' transform.",
							"types": [
								"string"
							],
							"variable": "direction"
						},
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Is the transform possible?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypesForPossibleFromTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 159,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns block types that the 'blocks' can be transformed into, based on",
					"long_description": "'from' transforms on other blocks.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the blocks can be transformed into.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypesForPossibleToTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 190,
				"end_line": 213,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns block types that the 'blocks' can be transformed into, based on",
					"long_description": "the source block's own 'to' transforms.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to transform from.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the source can be transformed into.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPossibleBlockTransformations",
				"namespace": "blocks",
				"aliases": [],
				"line": 223,
				"end_line": 241,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an array of block types that the set of blocks received as argument",
					"long_description": "can be transformed into.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks array.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Block types that the blocks argument can be transformed to.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "findTransform",
				"namespace": "blocks",
				"aliases": [],
				"line": 255,
				"end_line": 274,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transforms",
						"default": null,
						"type": "Array.<Object>"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given an array of transforms, returns the highest-priority transform where",
					"long_description": "the predicate function returns a truthy value. A higher-priority transform\nis one with a lower priority value (i.e. first in priority order). Returns\nnull if the transforms set is empty or the predicate function returns a\nfalsey value for all entries.",
					"tags": [
						{
							"name": "param",
							"content": "Transforms to search.",
							"types": [
								"Array.<Object>"
							],
							"variable": "transforms"
						},
						{
							"name": "param",
							"content": "Function returning true on matching transform.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Highest-priority transform candidate.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTransforms",
				"namespace": "blocks",
				"aliases": [],
				"line": 287,
				"end_line": 308,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "direction",
						"default": null,
						"type": "string"
					},
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns normal block transforms for a given transform direction, optionally",
					"long_description": "for a specific block by name, or an empty array if there are no transforms.\nIf no block name is provided, returns transforms for all blocks. A normal\ntransform object includes `blockName` as a property.",
					"tags": [
						{
							"name": "param",
							"content": "Transform direction (\"to\", \"from\").",
							"types": [
								"string"
							],
							"variable": "direction"
						},
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "return",
							"content": "Block transforms for direction.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "switchToBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 318,
				"end_line": 399,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switch one or more blocks into one or more blocks of the new block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Blocks array or block object.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Array of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/node.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isNodeOfType",
				"namespace": "blocks",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "WPBlockNode"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a single node and a node type (e.g. `'br'`), returns true if the node",
					"long_description": "corresponds to that type, false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Block node to test",
							"types": [
								"WPBlockNode"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Node to type to test against.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Whether node is of intended type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNamedNodeMapAsObject",
				"namespace": "blocks",
				"aliases": [],
				"line": 45,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeMap",
						"default": null,
						"type": "NamedNodeMap"
					}
				],
				"doc": {
					"description": "Given an object implementing the NamedNodeMap interface, returns a plain",
					"long_description": "object equivalent value of name, value key-value pairs.",
					"tags": [
						{
							"name": "param",
							"content": "NamedNodeMap to convert to object.",
							"types": [
								"NamedNodeMap"
							],
							"variable": "nodeMap"
						},
						{
							"name": "return",
							"content": "Object equivalent value of NamedNodeMap.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromDOM",
				"namespace": "blocks",
				"aliases": [],
				"line": 65,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domNode",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Given a DOM Element or Text node, returns an equivalent block node. Throws",
					"long_description": "if passed any node type other than element or text.",
					"tags": [
						{
							"name": "param",
							"content": "DOM node to convert.",
							"types": [
								"Node"
							],
							"variable": "domNode"
						},
						{
							"name": "return",
							"content": "Block node equivalent to DOM node.",
							"types": [
								"WPBlockNode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 93,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "WPBlockNode"
					}
				],
				"doc": {
					"description": "Given a block node, returns its HTML string representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block node to convert to string.",
							"types": [
								"WPBlockNode"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "String HTML representation of block node.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcher",
				"namespace": "blocks",
				"aliases": [],
				"line": 105,
				"end_line": 119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a selector, returns an hpq matcher generating a WPBlockNode value",
					"long_description": "matching the selector result.",
					"tags": [
						{
							"name": "param",
							"content": "DOM selector.",
							"types": [
								"string"
							],
							"variable": "selector"
						},
						{
							"name": "return",
							"content": "hpq matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/parser.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isOfType",
				"namespace": "blocks",
				"aliases": [],
				"line": 79,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if value is of the given JSON schema type, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to test.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Type to test.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Whether value is of type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isOfTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 115,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "types",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns true if value is of an array of given JSON schema types, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Value to test.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Types to test.",
							"types": [
								"Array.<string>"
							],
							"variable": "types"
						},
						{
							"name": "return",
							"content": "Whether value is of types.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAmbiguousStringSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 133,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the given attribute schema describes a value which may be",
					"long_description": "an ambiguous string.\n\nSome sources are ambiguously serialized as strings, for which value casting\nis enabled. This is only possible when a singular type is assigned to the\nattribute schema, since the string ambiguity makes it impossible to know the\ncorrect type of multiple to which to cast.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "return",
							"content": "Whether attribute schema defines an ambiguous string\n                  source.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "asType",
				"namespace": "blocks",
				"aliases": [],
				"line": 152,
				"end_line": 179,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns value coerced to the specified JSON schema type string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Type to coerce.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Coerced value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matcherFromSource",
				"namespace": "blocks",
				"aliases": [],
				"line": 188,
				"end_line": 217,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "sourceConfig",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an hpq matcher given a source object.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute Source object.",
							"types": [
								"Object"
							],
							"variable": "sourceConfig"
						},
						{
							"name": "return",
							"content": "A hpq Matcher.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "parseWithAttributeSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 228,
				"end_line": 230,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a block's raw content and an attribute's schema returns the attribute's",
					"long_description": "value depending on its source.",
					"tags": [
						{
							"name": "param",
							"content": "Block's raw content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockAttribute",
				"namespace": "blocks",
				"aliases": [],
				"line": 244,
				"end_line": 276,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributeKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributeSchema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "commentAttributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an attribute key, an attribute's schema, a block's raw content and the",
					"long_description": "commentAttributes returns the attribute value depending on its source\ndefinition of the given attribute key.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"string"
							],
							"variable": "attributeKey"
						},
						{
							"name": "param",
							"content": "Attribute's schema.",
							"types": [
								"Object"
							],
							"variable": "attributeSchema"
						},
						{
							"name": "param",
							"content": "Block's raw content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Block's comment attributes.",
							"types": [
								"Object"
							],
							"variable": "commentAttributes"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 287,
				"end_line": 300,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the block attributes of a registered block node given its type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Raw block content.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "param",
							"content": "Known block attributes (from delimiters).",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "All block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMigratedBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 311,
				"end_line": 377,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Given a block object, returns a new copy of the block with any applicable",
					"long_description": "deprecated migrations applied, or the original block if it was both valid\nand no eligible migrations exist.",
					"tags": [
						{
							"name": "param",
							"content": "Original block object.",
							"types": [
								"WPBlock"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Migrated block object.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockWithFallback",
				"namespace": "blocks",
				"aliases": [],
				"line": 386,
				"end_line": 474,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockNode",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a block with fallback to the unknown type handler.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parsed block node.",
							"types": [
								"Object"
							],
							"variable": "blockNode"
						},
						{
							"name": "return",
							"content": "An initialized block object (if possible).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createParse",
				"namespace": "blocks",
				"aliases": [],
				"line": 483,
				"end_line": 490,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "parseImplementation",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Creates a parse implementation for the post content which returns a list of blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parse implementation.",
							"types": [
								"function"
							],
							"variable": "parseImplementation"
						},
						{
							"name": "return",
							"content": "An implementation which parses the post content.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/figure-content-reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFigureContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 19,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the given node is figure content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "True if figure content, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canHaveAnchor",
				"namespace": "blocks",
				"aliases": [],
				"line": 39,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the given node can have an anchor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "True if it can, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 55,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "This filter takes figure content out of paragraphs, wraps it in a figure",
					"long_description": "element, and moves any anchors with it if needed.",
					"tags": [
						{
							"name": "param",
							"content": "The node to filter.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The document of the node.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/iframe-remover.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 13,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Removes iframes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to check.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "filterInlineHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 47,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filters HTML to only contain phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to filter.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "return",
							"content": "HTML only containing phrasing content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "htmlToBlocks",
				"namespace": "blocks",
				"aliases": [],
				"line": 78,
				"end_line": 111,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.html",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.rawTransforms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Converts HTML directly to blocks. Looks for a matching transform for each",
					"long_description": "top-level tag. The HTML should be filtered to not have any text between\ntop-level tags and formatted in a way that blocks can handle the HTML.",
					"tags": [
						{
							"name": "param",
							"content": "Named parameters.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "HTML to convert.",
							"types": [
								"string"
							],
							"variable": "$1.html"
						},
						{
							"name": "param",
							"content": "Transforms that can be used.",
							"types": [
								"Array"
							],
							"variable": "$1.rawTransforms"
						},
						{
							"name": "return",
							"content": "An array of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "pasteHandler",
				"namespace": "blocks",
				"aliases": [],
				"line": 127,
				"end_line": 242,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.plainText",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.mode",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.tagName",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.canUserUseUnfilteredHTML",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Converts an HTML string to known blocks. Strips everything else.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to convert.",
							"types": [
								"string"
							],
							"variable": "options.HTML"
						},
						{
							"name": "param",
							"content": "Plain text version.",
							"types": [
								"string"
							],
							"variable": "options.plainText"
						},
						{
							"name": "param",
							"content": "Handle content as blocks or inline content.\n                                                    * 'AUTO': Decide based on the content passed.\n                                                    * 'INLINE': Always handle as inline content, and return string.\n                                                    * 'BLOCKS': Always handle as blocks, and return array of blocks.",
							"types": [
								"string"
							],
							"variable": "options.mode"
						},
						{
							"name": "param",
							"content": "The tag into which content will be inserted.",
							"types": [
								"Array"
							],
							"variable": "options.tagName"
						},
						{
							"name": "param",
							"content": "Whether or not the user can use unfiltered HTML.",
							"types": [
								"boolean"
							],
							"variable": "options.canUserUseUnfilteredHTML"
						},
						{
							"name": "return",
							"content": "A list of blocks or a string, depending on `handlerMode`.",
							"types": [
								"Array",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "rawHandler",
				"namespace": "blocks",
				"aliases": [],
				"line": 251,
				"end_line": 289,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1.HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts an HTML string to known blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to convert.",
							"types": [
								"string"
							],
							"variable": "$1.HTML"
						},
						{
							"name": "return",
							"content": "A list of blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/is-inline-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isInline",
				"namespace": "blocks",
				"aliases": [],
				"line": 20,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "contextTag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks if the given node should be considered inline content, optionally",
					"long_description": "depending on a context tag.",
					"tags": [
						{
							"name": "param",
							"content": "Node name.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Tag name.",
							"types": [
								"string"
							],
							"variable": "contextTag"
						},
						{
							"name": "return",
							"content": "True if the node is inline content, false if nohe.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/markdown-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "slackMarkdownVariantCorrector",
				"namespace": "blocks",
				"aliases": [],
				"line": 26,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Corrects the Slack Markdown variant of the code block.",
					"long_description": "If uncorrected, it will be converted to inline code.",
					"tags": [
						{
							"name": "param",
							"content": "The potential Markdown text to correct.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The corrected Markdown.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts a piece of text into HTML based on any Markdown present.",
					"long_description": "Also decodes any encoded HTML.",
					"tags": [
						{
							"name": "param",
							"content": "The plain text to convert.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/phrasing-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPhrasingContentSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 34,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Get schema of possible paths for phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Schema.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPhrasingContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 47,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Find out whether or not the given node is phrasing content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to test.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "True if phrasing content, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/special-comment-converter.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 27,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					}
				],
				"doc": {
					"description": "Looks for `<!--nextpage-->` and `<!--more-->` comments, as well as the",
					"long_description": "`<!--more Some text-->` variant and its `<!--noteaser-->` companion,\nand replaces them with a custom element representing a future block.\n\nThe custom element is a way to bypass the rest of the `raw-handling`\ntransforms, which would eliminate other kinds of node with which to carry\n`<!--more-->`'s data: nodes with `data` attributes, empty paragraphs, etc.\n\nThe custom element is then expected to be recognized by any registered\nblock's `raw` transform.",
					"tags": [
						{
							"name": "param",
							"content": "The node to be processed.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The document of the node.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/raw-handling/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockContentSchema",
				"namespace": "blocks",
				"aliases": [],
				"line": 29,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "transforms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given raw transforms from blocks, merges all schemas into one.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block transforms, of the `raw` type.",
							"types": [
								"Array"
							],
							"variable": "transforms"
						},
						{
							"name": "return",
							"content": "A complete block content schema.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEmpty",
				"namespace": "blocks",
				"aliases": [],
				"line": 89,
				"end_line": 111,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Recursively checks if an element is empty. An element is not empty if it",
					"long_description": "contains text or contains elements with attributes such as images.",
					"tags": [
						{
							"name": "param",
							"content": "The element to check.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Wether or not the element is empty.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPlain",
				"namespace": "blocks",
				"aliases": [],
				"line": 121,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks wether HTML can be considered plain text. That is, it does not contain",
					"long_description": "any elements that are not line breaks.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to check.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "return",
							"content": "Wether the HTML can be considered plain text.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deepFilterNodeList",
				"namespace": "blocks",
				"aliases": [],
				"line": 133,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeList",
						"default": null,
						"type": "NodeList"
					},
					{
						"name": "filters",
						"default": null,
						"type": "Array"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given node filters, deeply filters and mutates a NodeList.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The nodeList to filter.",
							"types": [
								"NodeList"
							],
							"variable": "nodeList"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Array"
							],
							"variable": "filters"
						},
						{
							"name": "param",
							"content": "The document of the nodeList.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deepFilterHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 158,
				"end_line": 166,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "filters",
						"default": null,
						"type": "Array"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given node filters, deeply filters HTML tags.",
					"long_description": "Filters from the deepest nodes to the top.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to filter.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Array"
							],
							"variable": "filters"
						},
						{
							"name": "param",
							"content": "The schema to use.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "return",
							"content": "The filtered HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cleanNodeList",
				"namespace": "blocks",
				"aliases": [],
				"line": 177,
				"end_line": 278,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nodeList",
						"default": null,
						"type": "NodeList"
					},
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "inline",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a schema, unwraps or removes nodes, attributes and classes on a node",
					"long_description": "list.",
					"tags": [
						{
							"name": "param",
							"content": "The nodeList to filter.",
							"types": [
								"NodeList"
							],
							"variable": "nodeList"
						},
						{
							"name": "param",
							"content": "The document of the nodeList.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "An array of functions that can mutate with the provided node.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "param",
							"content": "Whether to clean for inline mode.",
							"types": [
								"Object"
							],
							"variable": "inline"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeInvalidHTML",
				"namespace": "blocks",
				"aliases": [],
				"line": 289,
				"end_line": 297,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "HTML",
						"default": null,
						"type": "string"
					},
					{
						"name": "schema",
						"default": null,
						"type": "Object"
					},
					{
						"name": "inline",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a schema, unwraps or removes nodes, attributes and classes on HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The HTML to clean up.",
							"types": [
								"string"
							],
							"variable": "HTML"
						},
						{
							"name": "param",
							"content": "Schema for the HTML.",
							"types": [
								"Object"
							],
							"variable": "schema"
						},
						{
							"name": "param",
							"content": "Whether to clean for inline mode.",
							"types": [
								"Object"
							],
							"variable": "inline"
						},
						{
							"name": "return",
							"content": "The cleaned up HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/registration.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unstable__bootstrapServerSideBlockDefinitions",
				"namespace": "blocks",
				"aliases": [],
				"line": 51,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "definitions",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Set the server side block definition of blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Server-side block definitions",
							"types": [
								"Object"
							],
							"variable": "definitions"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 66,
				"end_line": 152,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a new block provided a unique name and an object defining its",
					"long_description": "behavior. Once registered, the block is made available as an option to any\neditor interface where blocks are implemented.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The block, if it has been successfully registered;\n                    otherwise `undefined`.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unregisterBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 162,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous block value, if it has been successfully\n                    unregistered; otherwise `undefined`.",
							"types": [
								"WPBlock"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setFreeformContentHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 179,
				"end_line": 181,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns name of block for handling non-block content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFreeformContentHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 189,
				"end_line": 191,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves name of block handling non-block content, or undefined if no",
					"long_description": "handler has been defined.",
					"tags": [
						{
							"name": "return",
							"content": "Blog name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setUnregisteredTypeHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 198,
				"end_line": 200,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns name of block handling unregistered block types.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getUnregisteredTypeHandlerName",
				"namespace": "blocks",
				"aliases": [],
				"line": 208,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves name of block handling unregistered block types, or undefined if no",
					"long_description": "handler has been defined.",
					"tags": [
						{
							"name": "return",
							"content": "Blog name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 217,
				"end_line": 219,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Assigns the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 226,
				"end_line": 228,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Retrieves the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 237,
				"end_line": 239,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 246,
				"end_line": 248,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Block settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 260,
				"end_line": 262,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the block support value for a feature, if defined.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name or type object",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to retrieve",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Default value to return if not\n                                          explicitly defined",
							"types": [
								"*"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Block support value",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 274,
				"end_line": 276,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the block defines support for a feature, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name or type object.",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to test.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Whether feature is supported by\n                                         default if not explicitly defined.",
							"types": [
								"boolean"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Whether block supports feature.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isReusableBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 287,
				"end_line": 289,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockOrType",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Determines whether or not the given block is a reusable block. This is a",
					"long_description": "special block type that is used to point to a global block stored via the\nAPI.",
					"tags": [
						{
							"name": "param",
							"content": "Block or Block Type to test.",
							"types": [
								"Object"
							],
							"variable": "blockOrType"
						},
						{
							"name": "return",
							"content": "Whether the given block is a reusable block.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/serializer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockDefaultClassName",
				"namespace": "blocks",
				"aliases": [],
				"line": 31,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's default classname from its name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The block's default class.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockMenuDefaultClassName",
				"namespace": "blocks",
				"aliases": [],
				"line": 46,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's default menu item classname from its name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The block's default menu item class.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSaveElement",
				"namespace": "blocks",
				"aliases": [],
				"line": 64,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block type containing a save render implementation and attributes, returns the",
					"long_description": "enhanced element to be saved or string when raw HTML expected.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Save element or raw HTML string.",
							"types": [
								"Object",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSaveContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 124,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerBlocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given a block type containing a save render implementation and attributes, returns the",
					"long_description": "static markup to be saved.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Nested blocks.",
							"types": [
								"Array"
							],
							"variable": "innerBlocks"
						},
						{
							"name": "return",
							"content": "Save content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCommentAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 146,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockType",
						"default": null,
						"type": "Object.<string, *>"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object.<string, *>"
					}
				],
				"doc": {
					"description": "Returns attributes which are to be saved and serialized into the block",
					"long_description": "comment delimiter.\n\nWhen a block exists in memory it contains as its attributes both those\nparsed the block comment delimiter _and_ those which matched from the\ncontents of the block.\n\nThis function returns only those attributes which are needed to persist and\nwhich cannot be matched from the block content.",
					"tags": [
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object.<string, *>"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Attributes from in-memory block data.",
							"types": [
								"Object.<string, *>"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Subset of attributes for comment serialization.",
							"types": [
								"Object.<string, *>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serializeAttributes",
				"namespace": "blocks",
				"aliases": [],
				"line": 180,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given an attributes object, returns a string in the serialized attributes",
					"long_description": "format prepared for post content.",
					"tags": [
						{
							"name": "param",
							"content": "Attributes object.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Serialized attributes.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 204,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a block object, returns the Block's Inner HTML markup.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "HTML.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCommentDelimitedContent",
				"namespace": "blocks",
				"aliases": [],
				"line": 231,
				"end_line": 252,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rawBlockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the content of a block, including comment delimiters.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "rawBlockName"
						},
						{
							"name": "param",
							"content": "Block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Block save content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "return",
							"content": "Comment-delimited block content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "serializeBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 262,
				"end_line": 277,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the content of a block, including comment delimiters, determining",
					"long_description": "serialized attributes and content form from the current state of the block.",
					"tags": [
						{
							"name": "param",
							"content": "Block instance.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Serialized block.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "blocks\\module",
				"aliases": [],
				"line": 286,
				"end_line": 288,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Takes a block or set of blocks and returns the serialized post content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block(s) to serialize.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "The post content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/templates.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "doBlocksMatchTemplate",
				"namespace": "blocks",
				"aliases": [],
				"line": 25,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "template",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Checks whether a list of blocks matches a template by comparing the block names.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block list.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block template.",
							"types": [
								"Array"
							],
							"variable": "template"
						},
						{
							"name": "return",
							"content": "Whether the list of blocks matches a templates",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "synchronizeBlocksWithTemplate",
				"namespace": "blocks",
				"aliases": [],
				"line": 51,
				"end_line": 106,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "template",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Synchronize a block list with a block template.",
					"long_description": "\nSynchronizing a block list with a block template means that we loop over the blocks\nkeep the block as is if it matches the block at the same position in the template\n(If it has the same name) and if doesn't match, we create a new block based on the template.\nExtra blocks not present in the template are removed.",
					"tags": [
						{
							"name": "param",
							"content": "Block list.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Block template.",
							"types": [
								"Array"
							],
							"variable": "template"
						},
						{
							"name": "return",
							"content": "Updated Block list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/api/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isUnmodifiedDefaultBlock",
				"namespace": "blocks",
				"aliases": [],
				"line": 35,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "WPBlock"
					}
				],
				"doc": {
					"description": "Determines whether the block is a default block",
					"long_description": "and its attributes are equal to the default attributes\nwhich means the block is unmodified.",
					"tags": [
						{
							"name": "param",
							"content": "Block Object",
							"types": [
								"WPBlock"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Whether the block is an unmodified default block",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidIcon",
				"namespace": "blocks",
				"aliases": [],
				"line": 66,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "icon",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Function that checks if the parameter is a valid icon.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Parameter to be checked.",
							"types": [
								"*"
							],
							"variable": "icon"
						},
						{
							"name": "return",
							"content": "True if the parameter is a valid icon and false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeIconObject",
				"namespace": "blocks",
				"aliases": [],
				"line": 86,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "icon",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Function that receives an icon as set by the blocks during the registration",
					"long_description": "and returns a new icon object that is normalized so we can rely on just on possible icon structure\nin the codebase.",
					"tags": [
						{
							"name": "param",
							"content": "Slug of the Dashicon to be shown\n                                         as the icon for the block in the\n                                         inserter, or element or an object describing the icon.",
							"types": [
								"Object",
								"string",
								"WPElement"
							],
							"variable": "icon"
						},
						{
							"name": "return",
							"content": "Object describing the icon.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 121,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypeOrName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Normalizes block type passed as param. When string is passed then",
					"long_description": "it converts it to the matching block type object.\nIt passes the original object otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Block type or name.",
							"types": [
								"string",
								"Object"
							],
							"variable": "blockTypeOrName"
						},
						{
							"name": "return",
							"content": "Block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/block-content-provider/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockContentProvider",
				"namespace": "blocks",
				"aliases": [],
				"line": 31,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "An internal block component used in block content serialization to inject",
					"long_description": "nested block content within the `save` implementation of the ancestor\ncomponent in which it is nested. The component provides a pre-bound\n`BlockContent` component via context, which is used by the developer-facing\n`InnerBlocks.Content` component to render block content.",
					"tags": [
						{
							"name": "return",
							"content": "Element with BlockContent injected via context.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 13,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that block types have been added.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block types received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "blockTypes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 27,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "names",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a registered block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string",
								"Array"
							],
							"variable": "names"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 42,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that new block styles have been added.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Block styles.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "styles"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 58,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "styleNames",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that block styles have been removed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Block style names.",
							"types": [
								"Array",
								"string"
							],
							"variable": "styleNames"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 73,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setFreeformFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 88,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the name of the block used as a fallback",
					"long_description": "for non-block content.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setUnregisteredFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 103,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to set the name of the block used as a fallback",
					"long_description": "for unregistered blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 117,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "categories",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used to set block categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block categories.",
							"types": [
								"Array.<Object>"
							],
							"variable": "categories"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateCategory",
				"namespace": "blocks",
				"aliases": [],
				"line": 132,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "category",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to update a category.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block category slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "Object containing the category properties that should be updated.",
							"types": [
								"Object"
							],
							"variable": "category"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "blockTypes",
				"namespace": "blocks",
				"aliases": [],
				"line": 42,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the block types",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "blockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 67,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the block style variations.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockNameSetterReducer",
				"namespace": "blocks",
				"aliases": [],
				"line": 107,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "setActionType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order Reducer creating a reducer keeping track of given block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Action type.",
							"types": [
								"string"
							],
							"variable": "setActionType"
						},
						{
							"name": "return",
							"content": "Reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "categories",
				"namespace": "blocks",
				"aliases": [],
				"line": 136,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the categories",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/blocks/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockType",
				"namespace": "blocks",
				"aliases": [],
				"line": 29,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a block type by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block Type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockStyles",
				"namespace": "blocks",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns block styles by block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Block Styles.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCategories",
				"namespace": "blocks",
				"aliases": [],
				"line": 52,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all the available categories.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Categories list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDefaultBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 63,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the default block name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Default block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFreeformFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 74,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the block for handling non-block content.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Name of the block for handling non-block content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getUnregisteredFallbackBlockName",
				"namespace": "blocks",
				"aliases": [],
				"line": 85,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the name of the block for handling unregistered blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Name of the block for handling unregistered blocks.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasBlockSupport",
				"namespace": "blocks",
				"aliases": [],
				"line": 144,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nameOrType",
						"default": null,
						"type": "string"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultSupports",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the block defines support for a feature, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block name or type object.",
							"types": [
								"string",
								"Object"
							],
							"variable": "nameOrType"
						},
						{
							"name": "param",
							"content": "Feature to test.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Whether feature is supported by\n                                         default if not explicitly defined.",
							"types": [
								"boolean"
							],
							"variable": "defaultSupports"
						},
						{
							"name": "return",
							"content": "Whether block supports feature.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/autocomplete/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/base-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BaseControl",
				"namespace": "components",
				"aliases": [],
				"line": 17,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Button",
				"namespace": "components",
				"aliases": [],
				"line": 26,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/button/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/button-group/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ButtonGroup",
				"namespace": "components",
				"aliases": [],
				"line": 21,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/checkbox-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "CheckboxControl",
				"namespace": "components",
				"aliases": [],
				"line": 27,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/clipboard-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-indicator/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ColorIndicator",
				"namespace": "components",
				"aliases": [],
				"line": 21,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-palette/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ColorPalette",
				"namespace": "components",
				"aliases": [],
				"line": 39,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-picker/alpha.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-picker/hue.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-picker/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-picker/saturation.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/color-picker/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "colorToState",
				"namespace": "components",
				"aliases": [],
				"line": 57,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					},
					{
						"name": "oldHue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a hex color, get all other color properties (rgb, alpha, etc).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A hex color string or an object with a hex property",
							"types": [
								"Object",
								"string"
							],
							"variable": "data"
						},
						{
							"name": "param",
							"content": "A reference to the hue of the previous color, otherwise dragging the saturation to zero will reset the current hue to zero as well. See https://github.com/casesandberg/react-color/issues/29#issuecomment-132686909.",
							"types": [
								"string"
							],
							"variable": "oldHue"
						},
						{
							"name": "return",
							"content": "An object of different color representations.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPointOffset",
				"namespace": "components",
				"aliases": [],
				"line": 97,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Get the top/left offsets of a point in a container, also returns the container width/height.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Mouse or touch event with a location coordinate.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The container div, returned point is relative to this container.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "An object of the offset positions & container size.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidHex",
				"namespace": "components",
				"aliases": [],
				"line": 136,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hex",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check if a string is a valid hex color code.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A possible hex color.",
							"types": [
								"string"
							],
							"variable": "hex"
						},
						{
							"name": "return",
							"content": "True if the color is a valid hex color.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "simpleCheckForValidColor",
				"namespace": "components",
				"aliases": [],
				"line": 149,
				"end_line": 163,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check an object for any valid color properties.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A possible object representing a color.",
							"types": [
								"Object"
							],
							"variable": "data"
						},
						{
							"name": "return",
							"content": "If a valid representation of color, returns the data object. Otherwise returns false.",
							"types": [
								"Object",
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateAlphaChange",
				"namespace": "components",
				"aliases": [],
				"line": 174,
				"end_line": 192,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current alpha based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the alpha bar.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the alpha bar graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "If the alpha value has changed, returns a new color object.",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateHueChange",
				"namespace": "components",
				"aliases": [],
				"line": 203,
				"end_line": 222,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current hue based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the hue bar.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the hue bar graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "If the hue value has changed, returns a new color object.",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateSaturationChange",
				"namespace": "components",
				"aliases": [],
				"line": 233,
				"end_line": 255,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current saturation & brightness based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the saturation graph.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the 2D saturation graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "Returns a new color object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/dashicon/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/date-time/date.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/date-time/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/date-time/time.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/disabled/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/draggable/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/drop-zone/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "DropZone",
				"namespace": "components",
				"aliases": [],
				"line": 47,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/drop-zone/provider.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/dropdown/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/dropdown-menu/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "DropdownMenu",
				"namespace": "components",
				"aliases": [],
				"line": 35,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/external-link/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ExternalLink",
				"namespace": "components",
				"aliases": [],
				"line": 38,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/focal-point-picker/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/focusable-iframe/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/font-size-picker/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FontSizePicker",
				"namespace": "components",
				"aliases": [],
				"line": 39,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/form-file-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/form-toggle/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FormToggle",
				"namespace": "components",
				"aliases": [],
				"line": 29,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/form-token-field/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/form-token-field/suggestions-list.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/form-token-field/token-input.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/form-token-field/token.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Token",
				"namespace": "components",
				"aliases": [],
				"line": 33,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/navigate-regions/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-constrained-tabbing/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-fallback-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "components",
				"aliases": [],
				"line": 37,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-filters/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withFilters",
				"namespace": "components",
				"aliases": [],
				"line": 47,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hookName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a higher-order component which adds filtering capability to the",
					"long_description": "wrapped component. Filters get applied when the original component is about\nto be mounted. When a filter is added or removed that matches the hook name,\nthe wrapped component re-renders.",
					"tags": [
						{
							"name": "param",
							"content": "Hook name exposed to be used by filters.",
							"types": [
								"string"
							],
							"variable": "hookName"
						},
						{
							"name": "return",
							"content": "Higher-order component factory.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-focus-outside/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFocusNormalizedButton",
				"namespace": "components",
				"aliases": [],
				"line": 56,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the given element is a button element subject to focus",
					"long_description": "normalization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a button.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-focus-outside/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFocusNormalizedButton",
				"namespace": "components",
				"aliases": [],
				"line": 58,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the given element is a button element subject to focus",
					"long_description": "normalization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a button.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-focus-return/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/higher-order/with-spoken-messages/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/icon/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Icon",
				"namespace": "components",
				"aliases": [],
				"line": 19,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/icon-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/isolated-event-container/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/keyboard-shortcuts/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/menu-group/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MenuGroup",
				"namespace": "components",
				"aliases": [],
				"line": 30,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MenuItem",
				"namespace": "components",
				"aliases": [],
				"line": 46,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders a generic menu item for use inside the more menu.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "More menu item.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/menu-items-choice/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MenuItemsChoice",
				"namespace": "components",
				"aliases": [],
				"line": 17,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/modal/aria-helper.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hideApp",
				"namespace": "components",
				"aliases": [],
				"line": 31,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "unhiddenElement",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Hides all elements in the body element from screen-readers except",
					"long_description": "the provided element and elements that should not be hidden from\nscreen-readers.\n\nThe reason we do this is because `aria-modal=\"true\"` currently is bugged\nin Safari, and support is spotty in other browsers overall. In the future\nwe should consider removing these helper functions in favor of\n`aria-modal=\"true\"`.",
					"tags": [
						{
							"name": "param",
							"content": "The element that should not be hidden.",
							"types": [
								"Element"
							],
							"variable": "unhiddenElement"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "elementShouldBeHidden",
				"namespace": "components",
				"aliases": [],
				"line": 58,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Determines if the passed element should not be hidden from screen readers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The element that should be checked.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether the element should not be hidden from screen-readers.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "showApp",
				"namespace": "components",
				"aliases": [],
				"line": 68,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Makes all elements in the body that have been hidden by `hideApp`",
					"long_description": "visible again to screen-readers.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/modal/frame.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/modal/header.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ModalHeader",
				"namespace": "components",
				"aliases": [],
				"line": 23,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/modal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/navigable-container/container.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "cycleValue",
				"namespace": "components",
				"aliases": [],
				"line": 39,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/navigable-container/menu.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "NavigableMenu",
				"namespace": "components",
				"aliases": [],
				"line": 34,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/navigable-container/tabbable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TabbableContainer",
				"namespace": "components",
				"aliases": [],
				"line": 28,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/notice/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Notice",
				"namespace": "components",
				"aliases": [],
				"line": 31,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/notice/list.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "NoticeList",
				"namespace": "components",
				"aliases": [],
				"line": 38,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.notices",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.onRemove",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.className",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.children",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a list of notices.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Props passed to the component.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Array of notices to render.",
							"types": [
								"Array"
							],
							"variable": "$0.notices"
						},
						{
							"name": "param",
							"content": "Function called when a notice should be removed / dismissed.",
							"types": [
								"function"
							],
							"variable": "$0.onRemove"
						},
						{
							"name": "param",
							"content": "Name of the class used by the component.",
							"types": [
								"Object"
							],
							"variable": "$0.className"
						},
						{
							"name": "param",
							"content": "Array of children to be rendered inside the notice list.",
							"types": [
								"Object"
							],
							"variable": "$0.children"
						},
						{
							"name": "return",
							"content": "The rendered notices list.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/panel/body.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Panel",
				"namespace": "components",
				"aliases": [],
				"line": 23,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/panel/row.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PanelRow",
				"namespace": "components",
				"aliases": [],
				"line": 17,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/placeholder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Placeholder",
				"namespace": "components",
				"aliases": [],
				"line": 36,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a placeholder. Normally used by blocks to render their empty state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The component props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "The rendered placeholder.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/popover/detect-outside.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/popover/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/popover/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "computePopoverXAxisPosition",
				"namespace": "components",
				"aliases": [],
				"line": 41,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "xAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "chosenYAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position over the xAxis",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Desired xAxis.",
							"types": [
								"string"
							],
							"variable": "xAxis"
						},
						{
							"name": "param",
							"content": "yAxis to be used.",
							"types": [
								"string"
							],
							"variable": "chosenYAxis"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover xAxis position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computePopoverYAxisPosition",
				"namespace": "components",
				"aliases": [],
				"line": 110,
				"end_line": 157,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "yAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position over the yAxis",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Desired yAxis.",
							"types": [
								"string"
							],
							"variable": "yAxis"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover xAxis position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computePopoverPosition",
				"namespace": "components",
				"aliases": [],
				"line": 171,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "position",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position and the content max width/height for a popover",
					"long_description": "given its anchor rect and its content size.",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Position.",
							"types": [
								"string"
							],
							"variable": "position"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/primitives/svg/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Circle",
				"namespace": "components",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/primitives/svg/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SVG",
				"namespace": "components",
				"aliases": [],
				"line": 59,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/query-controls/category-select.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "CategorySelect",
				"namespace": "components",
				"aliases": [],
				"line": 21,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/query-controls/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/query-controls/terms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "buildTermsTree",
				"namespace": "components",
				"aliases": [],
				"line": 25,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "flatTerms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns terms in a tree form.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of terms in flat format.",
							"types": [
								"Array"
							],
							"variable": "flatTerms"
						},
						{
							"name": "return",
							"content": "Array of terms in tree format.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/radio-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "RadioControl",
				"namespace": "components",
				"aliases": [],
				"line": 31,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/range-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "RangeControl",
				"namespace": "components",
				"aliases": [],
				"line": 37,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/resizable-box/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ResizableBox",
				"namespace": "components",
				"aliases": [],
				"line": 23,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/responsive-wrapper/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ResponsiveWrapper",
				"namespace": "components",
				"aliases": [],
				"line": 21,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/sandbox/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/scroll-lock/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createScrollLockComponent",
				"namespace": "components",
				"aliases": [],
				"line": 38,
				"end_line": 152,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "args",
						"default": null,
						"type": "Object"
					},
					{
						"name": "args.htmlDocument",
						"default": null,
						"type": "HTMLDocument"
					},
					{
						"name": "args.className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a ScrollLock component bound to the specified document.",
					"long_description": "\nThis function creates a ScrollLock component for the specified document\nand is exposed so we can create an isolated component for unit testing.",
					"tags": [
						{
							"name": "param",
							"content": "Keyword args.",
							"types": [
								"Object"
							],
							"variable": "args"
						},
						{
							"name": "param",
							"content": "The document to lock the scroll for.",
							"types": [
								"HTMLDocument"
							],
							"variable": "args.htmlDocument"
						},
						{
							"name": "param",
							"content": "The name of the class used to lock scrolling.",
							"types": [
								"string"
							],
							"variable": "args.className"
						},
						{
							"name": "return",
							"content": "The bound ScrollLock component.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setLocked",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 61,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "locked",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Locks and unlocks scroll depending on the boolean argument.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Whether or not scroll should be locked.",
							"types": [
								"boolean"
							],
							"variable": "locked"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "requestLock",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 86,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests scroll lock.",
					"long_description": "\nThis function tracks requests for scroll lock. It locks scroll on the first\nrequest and counts each request so `releaseLock` can unlock scroll when\nall requests have been released.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "releaseLock",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 101,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Releases a request for scroll lock.",
					"long_description": "\nThis function tracks released requests for scroll lock. When all requests\nhave been released, it unlocks scroll.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "value",
				"namespace": "components",
				"aliases": [],
				"line": 125,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests scroll lock on mount.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/select-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SelectControl",
				"namespace": "components",
				"aliases": [],
				"line": 35,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/server-side-render/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "rendererPath",
				"namespace": "components",
				"aliases": [],
				"line": 48,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/shortcut/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Shortcut",
				"namespace": "components",
				"aliases": [],
				"line": 15,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/slot-fill/context.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/slot-fill/fill.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/slot-fill/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createSlotFill",
				"namespace": "components",
				"aliases": [],
				"line": 49,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/slot-fill/slot.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/tab-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TabButton",
				"namespace": "components",
				"aliases": [],
				"line": 47,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/text-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TextControl",
				"namespace": "components",
				"aliases": [],
				"line": 27,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/textarea-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TextareaControl",
				"namespace": "components",
				"aliases": [],
				"line": 27,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/toggle-control/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Toolbar",
				"namespace": "components",
				"aliases": [],
				"line": 64,
				"end_line": 104,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Array"
					},
					{
						"name": "children",
						"default": null,
						"type": "ReactElement"
					},
					{
						"name": "className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Renders a toolbar with controls.",
					"long_description": "\nThe `controls` prop accepts an array of sets. A set is an array of controls.\nControls have the following shape:\n\n```\n{\n  icon: string,\n  title: string,\n  subscript: string,\n  onClick: Function,\n  isActive: boolean,\n  isDisabled: boolean\n}\n```\n\nFor convenience it is also possible to pass only an array of controls. It is\nthen assumed this is the only set.\n\nEither `controls` or `children` is required, otherwise this components\nrenders nothing.",
					"tags": [
						{
							"name": "param",
							"content": "The controls to render in this toolbar.",
							"types": [
								"Array"
							],
							"variable": "controls"
						},
						{
							"name": "param",
							"content": "Any other things to render inside the\n                                 toolbar besides the controls.",
							"types": [
								"ReactElement"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Class to set on the container div.",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "return",
							"content": "The rendered toolbar.",
							"types": [
								"ReactElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/toolbar/toolbar-container.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ToolbarContainer",
				"namespace": "components",
				"aliases": [],
				"line": 19,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/toolbar-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ToolbarButton",
				"namespace": "components",
				"aliases": [],
				"line": 27,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/toolbar-button/toolbar-button-container.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "components",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/tooltip/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/tooltip/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Tooltip",
				"namespace": "components",
				"aliases": [],
				"line": 14,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build/tree-select/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectOptions",
				"namespace": "components",
				"aliases": [],
				"line": 29,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/autocomplete/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/color-picker/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "colorToState",
				"namespace": "components",
				"aliases": [],
				"line": 41,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					},
					{
						"name": "oldHue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a hex color, get all other color properties (rgb, alpha, etc).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A hex color string or an object with a hex property",
							"types": [
								"Object",
								"string"
							],
							"variable": "data"
						},
						{
							"name": "param",
							"content": "A reference to the hue of the previous color, otherwise dragging the saturation to zero will reset the current hue to zero as well. See https://github.com/casesandberg/react-color/issues/29#issuecomment-132686909.",
							"types": [
								"string"
							],
							"variable": "oldHue"
						},
						{
							"name": "return",
							"content": "An object of different color representations.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPointOffset",
				"namespace": "components",
				"aliases": [],
				"line": 80,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Get the top/left offsets of a point in a container, also returns the container width/height.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Mouse or touch event with a location coordinate.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The container div, returned point is relative to this container.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "An object of the offset positions & container size.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidHex",
				"namespace": "components",
				"aliases": [],
				"line": 119,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hex",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check if a string is a valid hex color code.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A possible hex color.",
							"types": [
								"string"
							],
							"variable": "hex"
						},
						{
							"name": "return",
							"content": "True if the color is a valid hex color.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "simpleCheckForValidColor",
				"namespace": "components",
				"aliases": [],
				"line": 131,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check an object for any valid color properties.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A possible object representing a color.",
							"types": [
								"Object"
							],
							"variable": "data"
						},
						{
							"name": "return",
							"content": "If a valid representation of color, returns the data object. Otherwise returns false.",
							"types": [
								"Object",
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateAlphaChange",
				"namespace": "components",
				"aliases": [],
				"line": 155,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current alpha based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the alpha bar.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the alpha bar graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "If the alpha value has changed, returns a new color object.",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateHueChange",
				"namespace": "components",
				"aliases": [],
				"line": 183,
				"end_line": 202,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current hue based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the hue bar.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the hue bar graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "If the hue value has changed, returns a new color object.",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateSaturationChange",
				"namespace": "components",
				"aliases": [],
				"line": 212,
				"end_line": 234,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current saturation & brightness based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the saturation graph.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the 2D saturation graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "Returns a new color object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/date-time/date.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/date-time/time.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/disabled/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/focusable-iframe/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/higher-order/with-filters/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "components\\module",
				"aliases": [],
				"line": 31,
				"end_line": 132,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "hookName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a higher-order component which adds filtering capability to the",
					"long_description": "wrapped component. Filters get applied when the original component is about\nto be mounted. When a filter is added or removed that matches the hook name,\nthe wrapped component re-renders.",
					"tags": [
						{
							"name": "param",
							"content": "Hook name exposed to be used by filters.",
							"types": [
								"string"
							],
							"variable": "hookName"
						},
						{
							"name": "return",
							"content": "Higher-order component factory.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/higher-order/with-focus-outside/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFocusNormalizedButton",
				"namespace": "components",
				"aliases": [],
				"line": 39,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the given element is a button element subject to focus",
					"long_description": "normalization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a button.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/higher-order/with-focus-outside/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFocusNormalizedButton",
				"namespace": "components",
				"aliases": [],
				"line": 40,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the given element is a button element subject to focus",
					"long_description": "normalization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a button.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/higher-order/with-focus-return/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/higher-order/with-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/higher-order/with-spoken-messages/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MenuItem",
				"namespace": "components",
				"aliases": [],
				"line": 28,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders a generic menu item for use inside the more menu.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "More menu item.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/modal/aria-helper.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hideApp",
				"namespace": "components",
				"aliases": [],
				"line": 21,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "unhiddenElement",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Hides all elements in the body element from screen-readers except",
					"long_description": "the provided element and elements that should not be hidden from\nscreen-readers.\n\nThe reason we do this is because `aria-modal=\"true\"` currently is bugged\nin Safari, and support is spotty in other browsers overall. In the future\nwe should consider removing these helper functions in favor of\n`aria-modal=\"true\"`.",
					"tags": [
						{
							"name": "param",
							"content": "The element that should not be hidden.",
							"types": [
								"Element"
							],
							"variable": "unhiddenElement"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "elementShouldBeHidden",
				"namespace": "components",
				"aliases": [],
				"line": 47,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Determines if the passed element should not be hidden from screen readers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The element that should be checked.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether the element should not be hidden from screen-readers.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "showApp",
				"namespace": "components",
				"aliases": [],
				"line": 56,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Makes all elements in the body that have been hidden by `hideApp`",
					"long_description": "visible again to screen-readers.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/notice/list.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "NoticeList",
				"namespace": "components",
				"aliases": [],
				"line": 25,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.notices",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.onRemove",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.className",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.children",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a list of notices.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Props passed to the component.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Array of notices to render.",
							"types": [
								"Array"
							],
							"variable": "$0.notices"
						},
						{
							"name": "param",
							"content": "Function called when a notice should be removed / dismissed.",
							"types": [
								"function"
							],
							"variable": "$0.onRemove"
						},
						{
							"name": "param",
							"content": "Name of the class used by the component.",
							"types": [
								"Object"
							],
							"variable": "$0.className"
						},
						{
							"name": "param",
							"content": "Array of children to be rendered inside the notice list.",
							"types": [
								"Object"
							],
							"variable": "$0.children"
						},
						{
							"name": "return",
							"content": "The rendered notices list.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/placeholder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Placeholder",
				"namespace": "components",
				"aliases": [],
				"line": 22,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a placeholder. Normally used by blocks to render their empty state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The component props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "The rendered placeholder.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/popover/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/popover/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "computePopoverXAxisPosition",
				"namespace": "components",
				"aliases": [],
				"line": 29,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "xAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "chosenYAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position over the xAxis",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Desired xAxis.",
							"types": [
								"string"
							],
							"variable": "xAxis"
						},
						{
							"name": "param",
							"content": "yAxis to be used.",
							"types": [
								"string"
							],
							"variable": "chosenYAxis"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover xAxis position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computePopoverYAxisPosition",
				"namespace": "components",
				"aliases": [],
				"line": 97,
				"end_line": 144,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "yAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position over the yAxis",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Desired yAxis.",
							"types": [
								"string"
							],
							"variable": "yAxis"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover xAxis position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computePopoverPosition",
				"namespace": "components",
				"aliases": [],
				"line": 157,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "position",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position and the content max width/height for a popover",
					"long_description": "given its anchor rect and its content size.",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Position.",
							"types": [
								"string"
							],
							"variable": "position"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/query-controls/terms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "buildTermsTree",
				"namespace": "components",
				"aliases": [],
				"line": 15,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "flatTerms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns terms in a tree form.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of terms in flat format.",
							"types": [
								"Array"
							],
							"variable": "flatTerms"
						},
						{
							"name": "return",
							"content": "Array of terms in tree format.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/scroll-lock/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createScrollLockComponent",
				"namespace": "components",
				"aliases": [],
				"line": 23,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "args",
						"default": null,
						"type": "Object"
					},
					{
						"name": "args.htmlDocument",
						"default": null,
						"type": "HTMLDocument"
					},
					{
						"name": "args.className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a ScrollLock component bound to the specified document.",
					"long_description": "\nThis function creates a ScrollLock component for the specified document\nand is exposed so we can create an isolated component for unit testing.",
					"tags": [
						{
							"name": "param",
							"content": "Keyword args.",
							"types": [
								"Object"
							],
							"variable": "args"
						},
						{
							"name": "param",
							"content": "The document to lock the scroll for.",
							"types": [
								"HTMLDocument"
							],
							"variable": "args.htmlDocument"
						},
						{
							"name": "param",
							"content": "The name of the class used to lock scrolling.",
							"types": [
								"string"
							],
							"variable": "args.className"
						},
						{
							"name": "return",
							"content": "The bound ScrollLock component.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setLocked",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 46,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "locked",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Locks and unlocks scroll depending on the boolean argument.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Whether or not scroll should be locked.",
							"types": [
								"boolean"
							],
							"variable": "locked"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "requestLock",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 71,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests scroll lock.",
					"long_description": "\nThis function tracks requests for scroll lock. It locks scroll on the first\nrequest and counts each request so `releaseLock` can unlock scroll when\nall requests have been released.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "releaseLock",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 86,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Releases a request for scroll lock.",
					"long_description": "\nThis function tracks released requests for scroll lock. When all requests\nhave been released, it unlocks scroll.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "value",
				"namespace": "components",
				"aliases": [],
				"line": 111,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests scroll lock on mount.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Toolbar",
				"namespace": "components",
				"aliases": [],
				"line": 48,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Array"
					},
					{
						"name": "children",
						"default": null,
						"type": "ReactElement"
					},
					{
						"name": "className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Renders a toolbar with controls.",
					"long_description": "\nThe `controls` prop accepts an array of sets. A set is an array of controls.\nControls have the following shape:\n\n```\n{\n  icon: string,\n  title: string,\n  subscript: string,\n  onClick: Function,\n  isActive: boolean,\n  isDisabled: boolean\n}\n```\n\nFor convenience it is also possible to pass only an array of controls. It is\nthen assumed this is the only set.\n\nEither `controls` or `children` is required, otherwise this components\nrenders nothing.",
					"tags": [
						{
							"name": "param",
							"content": "The controls to render in this toolbar.",
							"types": [
								"Array"
							],
							"variable": "controls"
						},
						{
							"name": "param",
							"content": "Any other things to render inside the\n                                 toolbar besides the controls.",
							"types": [
								"ReactElement"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Class to set on the container div.",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "return",
							"content": "The rendered toolbar.",
							"types": [
								"ReactElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/build-module/tooltip/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/autocomplete/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadOptions",
				"namespace": "components\\Autocomplete",
				"aliases": [],
				"line": 260,
				"end_line": 299,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "completer",
						"default": null,
						"type": "Completer"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Load options for an autocompleter.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The autocompleter.",
							"types": [
								"Completer"
							],
							"variable": "completer"
						},
						{
							"name": "param",
							"content": "The query, if any.",
							"types": [
								"string"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/color-picker/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "colorToState",
				"namespace": "components",
				"aliases": [],
				"line": 41,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					},
					{
						"name": "oldHue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a hex color, get all other color properties (rgb, alpha, etc).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A hex color string or an object with a hex property",
							"types": [
								"Object",
								"string"
							],
							"variable": "data"
						},
						{
							"name": "param",
							"content": "A reference to the hue of the previous color, otherwise dragging the saturation to zero will reset the current hue to zero as well. See https://github.com/casesandberg/react-color/issues/29#issuecomment-132686909.",
							"types": [
								"string"
							],
							"variable": "oldHue"
						},
						{
							"name": "return",
							"content": "An object of different color representations.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPointOffset",
				"namespace": "components",
				"aliases": [],
				"line": 77,
				"end_line": 101,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Get the top/left offsets of a point in a container, also returns the container width/height.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Mouse or touch event with a location coordinate.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The container div, returned point is relative to this container.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "An object of the offset positions & container size.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidHex",
				"namespace": "components",
				"aliases": [],
				"line": 109,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hex",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check if a string is a valid hex color code.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A possible hex color.",
							"types": [
								"string"
							],
							"variable": "hex"
						},
						{
							"name": "return",
							"content": "True if the color is a valid hex color.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "simpleCheckForValidColor",
				"namespace": "components",
				"aliases": [],
				"line": 123,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check an object for any valid color properties.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A possible object representing a color.",
							"types": [
								"Object"
							],
							"variable": "data"
						},
						{
							"name": "return",
							"content": "If a valid representation of color, returns the data object. Otherwise returns false.",
							"types": [
								"Object",
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateAlphaChange",
				"namespace": "components",
				"aliases": [],
				"line": 146,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current alpha based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the alpha bar.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the alpha bar graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "If the alpha value has changed, returns a new color object.",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateHueChange",
				"namespace": "components",
				"aliases": [],
				"line": 170,
				"end_line": 185,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current hue based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the hue bar.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the hue bar graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "If the hue value has changed, returns a new color object.",
							"types": [
								"Object",
								"null"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "calculateSaturationChange",
				"namespace": "components",
				"aliases": [],
				"line": 195,
				"end_line": 212,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "e",
						"default": null,
						"type": "Event"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "container",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Calculate the current saturation & brightness based on a mouse or touch event",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mouse or touch event on the saturation graph.",
							"types": [
								"Event"
							],
							"variable": "e"
						},
						{
							"name": "param",
							"content": "The current component props",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "The container div for the 2D saturation graph.",
							"types": [
								"HTMLElement"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "Returns a new color object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/date-time/date.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/date-time/time.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/disabled/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/draggable/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onDragEnd",
				"namespace": "components\\Draggable",
				"aliases": [],
				"line": 41,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Removes the element clone, resets cursor, and removes drag listener.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The non-custom DragEvent.",
							"types": [
								"Object"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onDragStart",
				"namespace": "components\\Draggable",
				"aliases": [],
				"line": 82,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Object"
					},
					{
						"name": "elementId",
						"default": null,
						"type": "string"
					},
					{
						"name": "transferData",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "- Clones the current element and spawns clone over original element.",
					"long_description": " - Adds a fake temporary drag image to avoid browser defaults.\n - Sets transfer data.\n - Adds dragover listener.",
					"tags": [
						{
							"name": "param",
							"content": "The non-custom DragEvent.",
							"types": [
								"Object"
							],
							"variable": "event"
						},
						{
							"name": "param",
							"content": "The HTML id of the element to be dragged.",
							"types": [
								"string"
							],
							"variable": "elementId"
						},
						{
							"name": "param",
							"content": "The data to be set to the event's dataTransfer - to be accessible in any later drop logic.",
							"types": [
								"Object"
							],
							"variable": "transferData"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetDragState",
				"namespace": "components\\Draggable",
				"aliases": [],
				"line": 161,
				"end_line": 176,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Cleans up drag state when drag has completed, or component unmounts",
					"long_description": "while dragging.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/dropdown/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "closeIfClickOutside",
				"namespace": "components\\Dropdown",
				"aliases": [],
				"line": 56,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "MouseEvent"
					}
				],
				"doc": {
					"description": "Closes the dropdown if a click occurs outside the dropdown wrapper. This",
					"long_description": "is intentionally distinct from `onClose` in that a click outside the\npopover may occur in the toggling of the dropdown via its toggle button.\nThe correct behavior is to keep the dropdown closed.",
					"tags": [
						{
							"name": "param",
							"content": "Click event triggering `onClickOutside`.",
							"types": [
								"MouseEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/focusable-iframe/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "checkFocus",
				"namespace": "components\\FocusableIframe",
				"aliases": [],
				"line": 31,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Checks whether the iframe is the activeElement, inferring that it has",
					"long_description": "then received focus, and calls the `onFocus` prop callback.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/form-token-field/test/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/higher-order/with-filters/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "components\\module",
				"aliases": [],
				"line": 25,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "hookName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a higher-order component which adds filtering capability to the",
					"long_description": "wrapped component. Filters get applied when the original component is about\nto be mounted. When a filter is added or removed that matches the hook name,\nthe wrapped component re-renders.",
					"tags": [
						{
							"name": "param",
							"content": "Hook name exposed to be used by filters.",
							"types": [
								"string"
							],
							"variable": "hookName"
						},
						{
							"name": "return",
							"content": "Higher-order component factory.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/higher-order/with-focus-outside/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFocusNormalizedButton",
				"namespace": "components",
				"aliases": [],
				"line": 33,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the given element is a button element subject to focus",
					"long_description": "normalization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a button.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeButtonFocus",
				"namespace": "components",
				"aliases": [],
				"line": 103,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "MouseEvent"
					}
				],
				"doc": {
					"description": "Handles a mousedown or mouseup event to respectively assign and",
					"long_description": "unassign a flag for preventing blur check on button elements. Some\nbrowsers, namely Firefox and Safari, do not emit a focus event on\nbutton elements when clicked, while others do. The logic here\nintends to normalize this as treating click on buttons as focus.",
					"tags": [
						{
							"name": "param",
							"content": "Event for mousedown or mouseup.",
							"types": [
								"MouseEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/higher-order/with-focus-outside/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFocusNormalizedButton",
				"namespace": "components",
				"aliases": [],
				"line": 34,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the given element is a button element subject to focus",
					"long_description": "normalization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a button.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "normalizeButtonFocus",
				"namespace": "components",
				"aliases": [],
				"line": 104,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "MouseEvent"
					}
				],
				"doc": {
					"description": "Handles a mousedown or mouseup event to respectively assign and",
					"long_description": "unassign a flag for preventing blur check on button elements. Some\nbrowsers, namely Firefox and Safari, do not emit a focus event on\nbutton elements when clicked, while others do. The logic here\nintends to normalize this as treating click on buttons as focus.",
					"tags": [
						{
							"name": "param",
							"content": "Event for mousedown or mouseup.",
							"types": [
								"MouseEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/higher-order/with-focus-return/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/higher-order/with-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNotice",
				"namespace": "components",
				"aliases": [],
				"line": 50,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "notice",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Function passed down as a prop that adds a new notice.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice to add.",
							"types": [
								"Object"
							],
							"variable": "notice"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createErrorNotice",
				"namespace": "components",
				"aliases": [],
				"line": 62,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "msg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Function passed as a prop that adds a new error notice.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Error message of the notice.",
							"types": [
								"string"
							],
							"variable": "msg"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeNotice",
				"namespace": "components",
				"aliases": [],
				"line": 71,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes a notice by id.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Id of the notice to remove.",
							"types": [
								"string"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeAllNotices",
				"namespace": "components",
				"aliases": [],
				"line": 80,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Removes all notices",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/higher-order/with-spoken-messages/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/keyboard-shortcuts/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "bindKeyTarget",
				"namespace": "components\\KeyboardShortcuts",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "When rendering with children, binds the wrapper node on which events",
					"long_description": "will be bound.",
					"tags": [
						{
							"name": "param",
							"content": "Key event target.",
							"types": [
								"Element"
							],
							"variable": "node"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MenuItem",
				"namespace": "components",
				"aliases": [],
				"line": 25,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders a generic menu item for use inside the more menu.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "More menu item.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/modal/aria-helper.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hideApp",
				"namespace": "components",
				"aliases": [],
				"line": 29,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "unhiddenElement",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Hides all elements in the body element from screen-readers except",
					"long_description": "the provided element and elements that should not be hidden from\nscreen-readers.\n\nThe reason we do this is because `aria-modal=\"true\"` currently is bugged\nin Safari, and support is spotty in other browsers overall. In the future\nwe should consider removing these helper functions in favor of\n`aria-modal=\"true\"`.",
					"tags": [
						{
							"name": "param",
							"content": "The element that should not be hidden.",
							"types": [
								"Element"
							],
							"variable": "unhiddenElement"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "elementShouldBeHidden",
				"namespace": "components",
				"aliases": [],
				"line": 55,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Determines if the passed element should not be hidden from screen readers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The element that should be checked.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether the element should not be hidden from screen-readers.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "showApp",
				"namespace": "components",
				"aliases": [],
				"line": 69,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Makes all elements in the body that have been hidden by `hideApp`",
					"long_description": "visible again to screen-readers.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/modal/frame.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "componentDidMount",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 33,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Focuses the first tabbable element when props.focusOnMount is true.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "focusFirstTabbable",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 43,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Focuses the first tabbable element.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "handleClickOutside",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 55,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Callback function called when clicked outside the modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Mouse click event.",
							"types": [
								"Object"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "handleKeyDown",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 66,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Callback function called when a key is pressed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key down event.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "handleEscapeKeyDown",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 79,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Handles a escape key down event.",
					"long_description": "\nCalls onRequestClose and prevents default key press behaviour.",
					"tags": [
						{
							"name": "param",
							"content": "Key down event.",
							"types": [
								"Object"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onRequestClose",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 91,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Calls the onRequestClose callback props when it is available.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Event object.",
							"types": [
								"Object"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "render",
				"namespace": "components\\ModalFrame",
				"aliases": [],
				"line": 103,
				"end_line": 130,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders the modal frame element.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The modal frame element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/modal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "componentDidMount",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 37,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Appends the modal's node to the DOM, so the portal can render the",
					"long_description": "modal in it. Also calls the openFirstModal when this is the first modal to be\nopened.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "componentWillUnmount",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 49,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Removes the modal's node from the DOM. Also calls closeLastModal when this is",
					"long_description": "the last modal to be closed.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "prepareDOM",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 68,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Prepares the DOM for the modals to be rendered.",
					"long_description": "\nEvery modal is mounted in a separate div appended to a parent div\nthat is appended to the document body.\n\nThe parent div will be created if it does not yet exist, and the\nseparate div for this specific modal will be appended to that.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "cleanDOM",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 80,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Removes the specific mounting point for this modal from the DOM.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "openFirstModal",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 91,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Prepares the DOM for this modal and any additional modal to be mounted.",
					"long_description": "\nIt appends an additional div to the body for the modals to be rendered in,\nit hides any other elements from screen-readers and adds an additional class\nto the body to prevent scrolling while the modal is open.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "closeLastModal",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 100,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Cleans up the DOM after the last modal is closed and makes the app available",
					"long_description": "for screen-readers again.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "render",
				"namespace": "components\\Modal",
				"aliases": [],
				"line": 110,
				"end_line": 162,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders the modal.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The modal element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/notice/list.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "NoticeList",
				"namespace": "components",
				"aliases": [],
				"line": 21,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.notices",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.onRemove",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.className",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.children",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a list of notices.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Props passed to the component.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Array of notices to render.",
							"types": [
								"Array"
							],
							"variable": "$0.notices"
						},
						{
							"name": "param",
							"content": "Function called when a notice should be removed / dismissed.",
							"types": [
								"function"
							],
							"variable": "$0.onRemove"
						},
						{
							"name": "param",
							"content": "Name of the class used by the component.",
							"types": [
								"Object"
							],
							"variable": "$0.className"
						},
						{
							"name": "param",
							"content": "Array of children to be rendered inside the notice list.",
							"types": [
								"Object"
							],
							"variable": "$0.children"
						},
						{
							"name": "return",
							"content": "The rendered notices list.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/placeholder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Placeholder",
				"namespace": "components",
				"aliases": [],
				"line": 18,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a placeholder. Normally used by blocks to render their empty state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The component props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "The rendered placeholder.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/popover/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "refreshOnAnchorMove",
				"namespace": "components\\Popover",
				"aliases": [],
				"line": 125,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Calling refreshOnAnchorMove",
					"long_description": "will only refresh the popover position if the anchor moves.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "refresh",
				"namespace": "components\\Popover",
				"aliases": [],
				"line": 140,
				"end_line": 157,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Calling `refresh()` will force the Popover to recalculate its size and",
					"long_description": "position. This is useful when a DOM change causes the anchor node to change\nposition.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/popover/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "computePopoverXAxisPosition",
				"namespace": "components",
				"aliases": [],
				"line": 20,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "xAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "chosenYAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position over the xAxis",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Desired xAxis.",
							"types": [
								"string"
							],
							"variable": "xAxis"
						},
						{
							"name": "param",
							"content": "yAxis to be used.",
							"types": [
								"string"
							],
							"variable": "chosenYAxis"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover xAxis position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computePopoverYAxisPosition",
				"namespace": "components",
				"aliases": [],
				"line": 90,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "yAxis",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position over the yAxis",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Desired yAxis.",
							"types": [
								"string"
							],
							"variable": "yAxis"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover xAxis position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computePopoverPosition",
				"namespace": "components",
				"aliases": [],
				"line": 153,
				"end_line": 164,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "anchorRect",
						"default": null,
						"type": "Object"
					},
					{
						"name": "contentSize",
						"default": null,
						"type": "Object"
					},
					{
						"name": "position",
						"default": null,
						"type": "string"
					},
					{
						"name": "expandOnMobile",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Utility used to compute the popover position and the content max width/height for a popover",
					"long_description": "given its anchor rect and its content size.",
					"tags": [
						{
							"name": "param",
							"content": "Anchor Rect.",
							"types": [
								"Object"
							],
							"variable": "anchorRect"
						},
						{
							"name": "param",
							"content": "Content Size.",
							"types": [
								"Object"
							],
							"variable": "contentSize"
						},
						{
							"name": "param",
							"content": "Position.",
							"types": [
								"string"
							],
							"variable": "position"
						},
						{
							"name": "param",
							"content": "Whether to expand the popover on mobile or not.",
							"types": [
								"boolean"
							],
							"variable": "expandOnMobile"
						},
						{
							"name": "return",
							"content": "Popover position and constraints.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/query-controls/terms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "buildTermsTree",
				"namespace": "components",
				"aliases": [],
				"line": 13,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "flatTerms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns terms in a tree form.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of terms in flat format.",
							"types": [
								"Array"
							],
							"variable": "flatTerms"
						},
						{
							"name": "return",
							"content": "Array of terms in tree format.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/scroll-lock/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createScrollLockComponent",
				"namespace": "components",
				"aliases": [],
				"line": 17,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "args",
						"default": null,
						"type": "Object"
					},
					{
						"name": "args.htmlDocument",
						"default": null,
						"type": "HTMLDocument"
					},
					{
						"name": "args.className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a ScrollLock component bound to the specified document.",
					"long_description": "\nThis function creates a ScrollLock component for the specified document\nand is exposed so we can create an isolated component for unit testing.",
					"tags": [
						{
							"name": "param",
							"content": "Keyword args.",
							"types": [
								"Object"
							],
							"variable": "args"
						},
						{
							"name": "param",
							"content": "The document to lock the scroll for.",
							"types": [
								"HTMLDocument"
							],
							"variable": "args.htmlDocument"
						},
						{
							"name": "param",
							"content": "The name of the class used to lock scrolling.",
							"types": [
								"string"
							],
							"variable": "args.className"
						},
						{
							"name": "return",
							"content": "The bound ScrollLock component.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setLocked",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 37,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "locked",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Locks and unlocks scroll depending on the boolean argument.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Whether or not scroll should be locked.",
							"types": [
								"boolean"
							],
							"variable": "locked"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "requestLock",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 62,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests scroll lock.",
					"long_description": "\nThis function tracks requests for scroll lock. It locks scroll on the first\nrequest and counts each request so `releaseLock` can unlock scroll when\nall requests have been released.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "releaseLock",
				"namespace": "components\\createScrollLockComponent",
				"aliases": [],
				"line": 76,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Releases a request for scroll lock.",
					"long_description": "\nThis function tracks released requests for scroll lock. When all requests\nhave been released, it unlocks scroll.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "componentDidMount",
				"namespace": "components",
				"aliases": [],
				"line": 88,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests scroll lock on mount.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "componentWillUnmount",
				"namespace": "components",
				"aliases": [],
				"line": 94,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Releases scroll lock before unmount.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "render",
				"namespace": "components",
				"aliases": [],
				"line": 103,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Render nothing as this component is merely a way to declare scroll lock.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Render nothing by returning `null`.",
							"types": [
								"null"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Toolbar",
				"namespace": "components",
				"aliases": [],
				"line": 44,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Array"
					},
					{
						"name": "children",
						"default": null,
						"type": "ReactElement"
					},
					{
						"name": "className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Renders a toolbar with controls.",
					"long_description": "\nThe `controls` prop accepts an array of sets. A set is an array of controls.\nControls have the following shape:\n\n```\n{\n  icon: string,\n  title: string,\n  subscript: string,\n  onClick: Function,\n  isActive: boolean,\n  isDisabled: boolean\n}\n```\n\nFor convenience it is also possible to pass only an array of controls. It is\nthen assumed this is the only set.\n\nEither `controls` or `children` is required, otherwise this components\nrenders nothing.",
					"tags": [
						{
							"name": "param",
							"content": "The controls to render in this toolbar.",
							"types": [
								"Array"
							],
							"variable": "controls"
						},
						{
							"name": "param",
							"content": "Any other things to render inside the\n                                 toolbar besides the controls.",
							"types": [
								"ReactElement"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Class to set on the container div.",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "return",
							"content": "The rendered toolbar.",
							"types": [
								"ReactElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/components/src/tooltip/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/create-higher-order-component/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHigherOrderComponent",
				"namespace": "compose",
				"aliases": [],
				"line": 25,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapComponentToEnhancedComponent",
						"default": null,
						"type": "function"
					},
					{
						"name": "modifierName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a function mapping a component to an enhanced component and modifier",
					"long_description": "name, returns the enhanced component augmented with a generated displayName.",
					"tags": [
						{
							"name": "param",
							"content": "Function mapping component\n                                                  to enhanced component.",
							"types": [
								"function"
							],
							"variable": "mapComponentToEnhancedComponent"
						},
						{
							"name": "param",
							"content": "Seed name from which to\n                                                  generated display name.",
							"types": [
								"string"
							],
							"variable": "modifierName"
						},
						{
							"name": "return",
							"content": "Component class with generated display name assigned.",
							"types": [
								"WPComponent"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/if-condition/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifCondition",
				"namespace": "compose",
				"aliases": [],
				"line": 26,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders if",
					"long_description": "the given condition is satisfied or with the given optional prop name.",
					"tags": [
						{
							"name": "param",
							"content": "Function to test condition.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/pure/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/with-global-events/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/with-global-events/listener.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/with-instance-id/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/with-safe-timeout/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build/with-state/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withState",
				"namespace": "compose",
				"aliases": [],
				"line": 44,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "initialState",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "A Higher Order Component used to provide and manage internal component state",
					"long_description": "via props.",
					"tags": [
						{
							"name": "param",
							"content": "Optional initial state of the component.",
							"types": [
								"Object"
							],
							"variable": "initialState"
						},
						{
							"name": "return",
							"content": "Wrapped component.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/create-higher-order-component/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHigherOrderComponent",
				"namespace": "compose",
				"aliases": [],
				"line": 17,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapComponentToEnhancedComponent",
						"default": null,
						"type": "function"
					},
					{
						"name": "modifierName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a function mapping a component to an enhanced component and modifier",
					"long_description": "name, returns the enhanced component augmented with a generated displayName.",
					"tags": [
						{
							"name": "param",
							"content": "Function mapping component\n                                                  to enhanced component.",
							"types": [
								"function"
							],
							"variable": "mapComponentToEnhancedComponent"
						},
						{
							"name": "param",
							"content": "Seed name from which to\n                                                  generated display name.",
							"types": [
								"string"
							],
							"variable": "modifierName"
						},
						{
							"name": "return",
							"content": "Component class with generated display name assigned.",
							"types": [
								"WPComponent"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/if-condition/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifCondition",
				"namespace": "compose",
				"aliases": [],
				"line": 16,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders if",
					"long_description": "the given condition is satisfied or with the given optional prop name.",
					"tags": [
						{
							"name": "param",
							"content": "Function to test condition.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/pure/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/with-global-events/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/with-global-events/listener.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/with-instance-id/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/with-safe-timeout/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/build-module/with-state/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "compose\\module",
				"aliases": [],
				"line": 28,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "initialState",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "A Higher Order Component used to provide and manage internal component state",
					"long_description": "via props.",
					"tags": [
						{
							"name": "param",
							"content": "Optional initial state of the component.",
							"types": [
								"Object"
							],
							"variable": "initialState"
						},
						{
							"name": "return",
							"content": "Wrapped component.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/create-higher-order-component/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHigherOrderComponent",
				"namespace": "compose",
				"aliases": [],
				"line": 17,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapComponentToEnhancedComponent",
						"default": null,
						"type": "function"
					},
					{
						"name": "modifierName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a function mapping a component to an enhanced component and modifier",
					"long_description": "name, returns the enhanced component augmented with a generated displayName.",
					"tags": [
						{
							"name": "param",
							"content": "Function mapping component\n                                                  to enhanced component.",
							"types": [
								"function"
							],
							"variable": "mapComponentToEnhancedComponent"
						},
						{
							"name": "param",
							"content": "Seed name from which to\n                                                  generated display name.",
							"types": [
								"string"
							],
							"variable": "modifierName"
						},
						{
							"name": "return",
							"content": "Component class with generated display name assigned.",
							"types": [
								"WPComponent"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/if-condition/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifCondition",
				"namespace": "compose",
				"aliases": [],
				"line": 14,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders if",
					"long_description": "the given condition is satisfied or with the given optional prop name.",
					"tags": [
						{
							"name": "param",
							"content": "Function to test condition.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/pure/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/with-global-events/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/with-instance-id/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/with-safe-timeout/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/compose/src/with-state/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "compose\\module",
				"aliases": [],
				"line": 19,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "initialState",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "A Higher Order Component used to provide and manage internal component state",
					"long_description": "via props.",
					"tags": [
						{
							"name": "param",
							"content": "Optional initial state of the component.",
							"types": [
								"Object"
							],
							"variable": "initialState"
						},
						{
							"name": "return",
							"content": "Wrapped component.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "receiveUserQuery",
				"namespace": "core-data",
				"aliases": [],
				"line": 39,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queryID",
						"default": null,
						"type": "string"
					},
					{
						"name": "users",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that authors have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Query ID.",
							"types": [
								"string"
							],
							"variable": "queryID"
						},
						{
							"name": "param",
							"content": "Users received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "users"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 55,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entities",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in adding new entities.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entities received.",
							"types": [
								"Array"
							],
							"variable": "entities"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 74,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "records",
						"default": null,
						"type": "Array"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					},
					{
						"name": "invalidateCache",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that entity records have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind of the received entity.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Name of the received entity.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Records received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "records"
						},
						{
							"name": "param",
							"content": "Query Object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "param",
							"content": "Should invalidate query caches",
							"types": [
								"boolean"
							],
							"variable": "invalidateCache"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 99,
				"end_line": 104,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "themeSupports",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the index has been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Theme support for the current theme.",
							"types": [
								"Object"
							],
							"variable": "themeSupports"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 116,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "preview",
						"default": null,
						"type": "Mixed"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the preview data for",
					"long_description": "a given URl has been received.",
					"tags": [
						{
							"name": "param",
							"content": "URL to preview the embed for.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Preview data.",
							"types": [
								"Mixed"
							],
							"variable": "preview"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "saveEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 134,
				"end_line": 181,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "record",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Action triggered to save an entity record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind of the received entity.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Name of the received entity.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record to be saved.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "return",
							"content": "Updated record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 191,
				"end_line": 197,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hasUploadPermissions",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that Upload permissions have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Does the user have permission to upload files?",
							"types": [
								"boolean"
							],
							"variable": "hasUploadPermissions"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveUserPermission",
				"namespace": "core-data",
				"aliases": [],
				"line": 209,
				"end_line": 215,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "isAllowed",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the current user has",
					"long_description": "permission to perform an action on a REST resource.",
					"tags": [
						{
							"name": "param",
							"content": "A key that represents the action and REST resource.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Whether or not the user can perform the action.",
							"types": [
								"boolean"
							],
							"variable": "isAllowed"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/controls.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "apiFetch",
				"namespace": "core-data",
				"aliases": [],
				"line": 28,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "request",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Trigger an API Fetch request.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "API Fetch Request Object.",
							"types": [
								"Object"
							],
							"variable": "request"
						},
						{
							"name": "return",
							"content": "control descriptor.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "select",
				"namespace": "core-data",
				"aliases": [],
				"line": 43,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Calls a selector using the current state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector arguments.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "control descriptor.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/entities.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadTaxonomyEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 95,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the list of the taxonomies entities.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Entities promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMethodName",
				"namespace": "core-data",
				"aliases": [],
				"line": 135,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "prefix",
						"default": null,
						"type": "string"
					},
					{
						"name": "usePlural",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the entity's getter method name given its kind and name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Function prefix.",
							"types": [
								"string"
							],
							"variable": "prefix"
						},
						{
							"name": "param",
							"content": "Whether to use the plural form or not.",
							"types": [
								"boolean"
							],
							"variable": "usePlural"
						},
						{
							"name": "return",
							"content": "Method name",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/queried-data/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "receiveItems",
				"namespace": "core-data",
				"aliases": [],
				"line": 26,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that items have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Items received.",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveQueriedItems",
				"namespace": "core-data",
				"aliases": [],
				"line": 43,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that queried data has been",
					"long_description": "received.",
					"tags": [
						{
							"name": "param",
							"content": "Queried items received.",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "param",
							"content": "Optional query object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/queried-data/get-query-parts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getQueryParts",
				"namespace": "core-data",
				"aliases": [],
				"line": 45,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a query object, returns an object of parts, including pagination",
					"long_description": "details (`page` and `perPage`, or default values). All other properties are\nencoded into a stable (idempotent) `stableKey` value.",
					"tags": [
						{
							"name": "param",
							"content": "Optional query object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Query parts.",
							"types": [
								"WPQueriedDataQueryParts"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/queried-data/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMergedItemIds",
				"namespace": "core-data",
				"aliases": [],
				"line": 42,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "itemIds",
						"default": null,
						"type": "Array.<number>"
					},
					{
						"name": "nextItemIds",
						"default": null,
						"type": "Array.<number>"
					},
					{
						"name": "page",
						"default": null,
						"type": "number"
					},
					{
						"name": "perPage",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns a merged array of item IDs, given details of the received paginated",
					"long_description": "items. The array is sparse-like with `undefined` entries where holes exist.",
					"tags": [
						{
							"name": "param",
							"content": "Original item IDs (default empty array).",
							"types": [
								"Array.<number>"
							],
							"variable": "itemIds"
						},
						{
							"name": "param",
							"content": "Item IDs to merge.",
							"types": [
								"Array.<number>"
							],
							"variable": "nextItemIds"
						},
						{
							"name": "param",
							"content": "Page of items merged.",
							"types": [
								"number"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Number of items per page.",
							"types": [
								"number"
							],
							"variable": "perPage"
						},
						{
							"name": "return",
							"content": "Merged array of item IDs.",
							"types": [
								"Array.<number>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "items",
				"namespace": "core-data",
				"aliases": [],
				"line": 69,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer tracking items state, keyed by ID. Items are assumed to be normal,",
					"long_description": "where identifiers are common across all queries.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Next state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/queried-data/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getQueriedItemsUncached",
				"namespace": "core-data",
				"aliases": [],
				"line": 41,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns items for a given query, or null if the items are not known.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional query.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Query items.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "terms",
				"namespace": "core-data",
				"aliases": [],
				"line": 58,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing terms state. Keyed by taxonomy slug, the value is either",
					"long_description": "undefined (if no request has been made for given taxonomy), null (if a\nrequest is in-flight for given taxonomy), or the array of terms for the\ntaxonomy.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "users",
				"namespace": "core-data",
				"aliases": [],
				"line": 79,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing authors state. Keyed by id.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "taxonomies",
				"namespace": "core-data",
				"aliases": [],
				"line": 108,
				"end_line": 118,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing taxonomies.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "themeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 129,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing theme supports data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entity",
				"namespace": "core-data",
				"aliases": [],
				"line": 151,
				"end_line": 162,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entityConfig",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher Order Reducer for a given entity config. It supports:",
					"long_description": "\n - Fetching a record by primary key",
					"tags": [
						{
							"name": "param",
							"content": "Entity config.",
							"types": [
								"Object"
							],
							"variable": "entityConfig"
						},
						{
							"name": "return",
							"content": "Reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entitiesConfig",
				"namespace": "core-data",
				"aliases": [],
				"line": 173,
				"end_line": 183,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the registered entities.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entities",
				"namespace": "core-data",
				"aliases": [],
				"line": 194,
				"end_line": 227,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the registered entities config and data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "userPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 264,
				"end_line": 274,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "State which tracks whether the user can perform an action on a REST",
					"long_description": "resource.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/resolvers.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAuthors",
				"namespace": "core-data",
				"aliases": [],
				"line": 55,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests authors from the REST API.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "getEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 87,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Requests an entity's record from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record's key",
							"types": [
								"number"
							],
							"variable": "key"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 137,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Requests the entity's records from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Query Object.",
							"types": [
								"Object"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 196,
				"end_line": 218,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests theme supports data from the index.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "getEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 226,
				"end_line": 261,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Requests a preview from the from the Embed API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL to get the preview for.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 270,
				"end_line": 286,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests Upload Permissions from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "deprecated",
							"content": "since",
							"description": "5.0. Callers should use the more generic `canUser()` selector instead of\n           `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`."
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUser",
				"namespace": "core-data",
				"aliases": [],
				"line": 298,
				"end_line": 365,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "string"
					},
					{
						"name": "resource",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks whether the current user can perform the given action on the given",
					"long_description": "REST resource.",
					"tags": [
						{
							"name": "param",
							"content": "Action to check. One of: 'create', 'read', 'update',\n                          'delete'.",
							"types": [
								"string"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "REST resource to check, e.g. 'media' or 'posts'.",
							"types": [
								"string"
							],
							"variable": "resource"
						},
						{
							"name": "param",
							"content": "ID of the rest resource to check.",
							"types": [
								"string"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isResolving",
				"namespace": "core-data",
				"aliases": [],
				"line": 54,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if resolution is in progress for the core selector of the given",
					"long_description": "name and arguments.",
					"tags": [
						{
							"name": "param",
							"content": "Core data selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution is in progress.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isRequestingEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 72,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a request is in progress for embed preview data, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "URL the preview would be for.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Whether a request is in progress for an embed preview.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAuthors",
				"namespace": "core-data",
				"aliases": [],
				"line": 84,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all available authors.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Authors list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntity",
				"namespace": "core-data",
				"aliases": [],
				"line": 132,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the entity object given its kind and name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Entity",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 150,
				"end_line": 152,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the Entity's record object by key.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State tree",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record's key",
							"types": [
								"number"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "Record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 165,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the Entity's records.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State tree",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Optional terms query.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Records.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 183,
				"end_line": 185,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return theme supports data in the index.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Index data.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 196,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the embed preview for the given URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Embedded URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPreviewEmbedFallback",
				"namespace": "core-data",
				"aliases": [],
				"line": 213,
				"end_line": 222,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines if the returned preview is an oEmbed link fallback.",
					"long_description": "\nWordPress can be configured to return a simple link to a URL if it is not embeddable.\nWe need to be able to determine if a URL is embeddable or not, based on what we\nget back from the oEmbed preview API.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Embedded URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the preview for the URL an oEmbed link fallback.",
							"types": [
								"booleans"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 241,
				"end_line": 246,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the current user can upload media.",
					"long_description": "\nCalling this may trigger an OPTIONS request to the REST API via the\n`canUser()` resolver.\n\nhttps://developer.wordpress.org/rest-api/reference/",
					"tags": [
						{
							"name": "deprecated",
							"content": "since",
							"description": "5.0. Callers should use the more generic `canUser()` selector instead of\n            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`."
						},
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n                  request is being made.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUser",
				"namespace": "core-data",
				"aliases": [],
				"line": 266,
				"end_line": 269,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "string"
					},
					{
						"name": "resource",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the current user can perform the given action on the given",
					"long_description": "REST resource.\n\nCalling this may trigger an OPTIONS request to the REST API via the\n`canUser()` resolver.\n\nhttps://developer.wordpress.org/rest-api/reference/",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action to check. One of: 'create', 'read', 'update', 'delete'.",
							"types": [
								"string"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "REST resource to check, e.g. 'media' or 'posts'.",
							"types": [
								"string"
							],
							"variable": "resource"
						},
						{
							"name": "param",
							"content": "Optional ID of the rest resource to check.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Whether or not the user can perform the action,\n                            or `undefined` if the OPTIONS request is still being made.",
							"types": [
								"boolean",
								"undefined"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/utils/if-matching-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifMatchingAction",
				"namespace": "core-data",
				"aliases": [],
				"line": 17,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isMatch",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "A higher-order reducer creator which invokes the original reducer only if",
					"long_description": "the dispatching action matches the given predicate, **OR** if state is\ninitializing (undefined).",
					"tags": [
						{
							"name": "param",
							"content": "Function predicate for allowing reducer call.",
							"types": [
								"function"
							],
							"variable": "isMatch"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/utils/on-sub-key.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onSubKey",
				"namespace": "core-data",
				"aliases": [],
				"line": 22,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actionProperty",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which creates a combined reducer object, keyed",
					"long_description": "by a property on the action object.",
					"tags": [
						{
							"name": "param",
							"content": "Action property by which to key object.",
							"types": [
								"string"
							],
							"variable": "actionProperty"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/utils/replace-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replaceAction",
				"namespace": "core-data",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "replacer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which substitutes the action object before",
					"long_description": "passing to the original reducer.",
					"tags": [
						{
							"name": "param",
							"content": "Function mapping original action to replacement.",
							"types": [
								"function"
							],
							"variable": "replacer"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build/utils/with-weak-map-cache.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withWeakMapCache",
				"namespace": "core-data",
				"aliases": [],
				"line": 23,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fn",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given a function, returns an enhanced function which caches the result and",
					"long_description": "tracks in WeakMap. The result is only cached if the original function is\npassed a valid object-like argument (requirement for WeakMap key).",
					"tags": [
						{
							"name": "param",
							"content": "Original function.",
							"types": [
								"function"
							],
							"variable": "fn"
						},
						{
							"name": "return",
							"content": "Enhanced caching function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "receiveUserQuery",
				"namespace": "core-data",
				"aliases": [],
				"line": 27,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queryID",
						"default": null,
						"type": "string"
					},
					{
						"name": "users",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that authors have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Query ID.",
							"types": [
								"string"
							],
							"variable": "queryID"
						},
						{
							"name": "param",
							"content": "Users received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "users"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 42,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entities",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in adding new entities.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entities received.",
							"types": [
								"Array"
							],
							"variable": "entities"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 60,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "records",
						"default": null,
						"type": "Array"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					},
					{
						"name": "invalidateCache",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that entity records have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind of the received entity.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Name of the received entity.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Records received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "records"
						},
						{
							"name": "param",
							"content": "Query Object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "param",
							"content": "Should invalidate query caches",
							"types": [
								"boolean"
							],
							"variable": "invalidateCache"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 84,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "themeSupports",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the index has been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Theme support for the current theme.",
							"types": [
								"Object"
							],
							"variable": "themeSupports"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 100,
				"end_line": 106,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "preview",
						"default": null,
						"type": "Mixed"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the preview data for",
					"long_description": "a given URl has been received.",
					"tags": [
						{
							"name": "param",
							"content": "URL to preview the embed for.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Preview data.",
							"types": [
								"Mixed"
							],
							"variable": "preview"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "saveEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 117,
				"end_line": 164,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "record",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Action triggered to save an entity record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind of the received entity.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Name of the received entity.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record to be saved.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "return",
							"content": "Updated record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 173,
				"end_line": 179,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hasUploadPermissions",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that Upload permissions have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Does the user have permission to upload files?",
							"types": [
								"boolean"
							],
							"variable": "hasUploadPermissions"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveUserPermission",
				"namespace": "core-data",
				"aliases": [],
				"line": 190,
				"end_line": 196,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "isAllowed",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the current user has",
					"long_description": "permission to perform an action on a REST resource.",
					"tags": [
						{
							"name": "param",
							"content": "A key that represents the action and REST resource.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Whether or not the user can perform the action.",
							"types": [
								"boolean"
							],
							"variable": "isAllowed"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/controls.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "apiFetch",
				"namespace": "core-data",
				"aliases": [],
				"line": 15,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "request",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Trigger an API Fetch request.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "API Fetch Request Object.",
							"types": [
								"Object"
							],
							"variable": "request"
						},
						{
							"name": "return",
							"content": "control descriptor.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "select",
				"namespace": "core-data",
				"aliases": [],
				"line": 29,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Calls a selector using the current state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector arguments.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "control descriptor.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/entities.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadPostTypeEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 52,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the list of post type entities.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Entities promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "loadTaxonomyEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 87,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the list of the taxonomies entities.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Entities promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getKindEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 147,
				"end_line": 196,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Loads the kind entities into the store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "return",
							"content": "Entities",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/queried-data/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "receiveItems",
				"namespace": "core-data",
				"aliases": [],
				"line": 15,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that items have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Items received.",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveQueriedItems",
				"namespace": "core-data",
				"aliases": [],
				"line": 31,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that queried data has been",
					"long_description": "received.",
					"tags": [
						{
							"name": "param",
							"content": "Queried items received.",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "param",
							"content": "Optional query object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/queried-data/get-query-parts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getQueryParts",
				"namespace": "core-data",
				"aliases": [],
				"line": 33,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a query object, returns an object of parts, including pagination",
					"long_description": "details (`page` and `perPage`, or default values). All other properties are\nencoded into a stable (idempotent) `stableKey` value.",
					"tags": [
						{
							"name": "param",
							"content": "Optional query object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Query parts.",
							"types": [
								"WPQueriedDataQueryParts"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/queried-data/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMergedItemIds",
				"namespace": "core-data",
				"aliases": [],
				"line": 27,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "itemIds",
						"default": null,
						"type": "Array.<number>"
					},
					{
						"name": "nextItemIds",
						"default": null,
						"type": "Array.<number>"
					},
					{
						"name": "page",
						"default": null,
						"type": "number"
					},
					{
						"name": "perPage",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns a merged array of item IDs, given details of the received paginated",
					"long_description": "items. The array is sparse-like with `undefined` entries where holes exist.",
					"tags": [
						{
							"name": "param",
							"content": "Original item IDs (default empty array).",
							"types": [
								"Array.<number>"
							],
							"variable": "itemIds"
						},
						{
							"name": "param",
							"content": "Item IDs to merge.",
							"types": [
								"Array.<number>"
							],
							"variable": "nextItemIds"
						},
						{
							"name": "param",
							"content": "Page of items merged.",
							"types": [
								"number"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Number of items per page.",
							"types": [
								"number"
							],
							"variable": "perPage"
						},
						{
							"name": "return",
							"content": "Merged array of item IDs.",
							"types": [
								"Array.<number>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "items",
				"namespace": "core-data",
				"aliases": [],
				"line": 53,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer tracking items state, keyed by ID. Items are assumed to be normal,",
					"long_description": "where identifiers are common across all queries.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Next state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/queried-data/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getQueriedItemsUncached",
				"namespace": "core-data",
				"aliases": [],
				"line": 29,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns items for a given query, or null if the items are not known.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional query.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Query items.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "terms",
				"namespace": "core-data",
				"aliases": [],
				"line": 34,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing terms state. Keyed by taxonomy slug, the value is either",
					"long_description": "undefined (if no request has been made for given taxonomy), null (if a\nrequest is in-flight for given taxonomy), or the array of terms for the\ntaxonomy.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "users",
				"namespace": "core-data",
				"aliases": [],
				"line": 54,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing authors state. Keyed by id.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "taxonomies",
				"namespace": "core-data",
				"aliases": [],
				"line": 82,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing taxonomies.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "themeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 102,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing theme supports data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entity",
				"namespace": "core-data",
				"aliases": [],
				"line": 123,
				"end_line": 134,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entityConfig",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher Order Reducer for a given entity config. It supports:",
					"long_description": "\n - Fetching a record by primary key",
					"tags": [
						{
							"name": "param",
							"content": "Entity config.",
							"types": [
								"Object"
							],
							"variable": "entityConfig"
						},
						{
							"name": "return",
							"content": "Reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entitiesConfig",
				"namespace": "core-data",
				"aliases": [],
				"line": 145,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the registered entities.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "embedPreviews",
				"namespace": "core-data",
				"aliases": [],
				"line": 208,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing embed preview data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "userPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 231,
				"end_line": 241,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "State which tracks whether the user can perform an action on a REST",
					"long_description": "resource.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/resolvers.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAuthors",
				"namespace": "core-data",
				"aliases": [],
				"line": 46,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests authors from the REST API.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "getEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 77,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Requests an entity's record from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record's key",
							"types": [
								"number"
							],
							"variable": "key"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 126,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Requests the entity's records from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Query Object.",
							"types": [
								"Object"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 185,
				"end_line": 207,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests theme supports data from the index.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "getEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 214,
				"end_line": 249,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Requests a preview from the from the Embed API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL to get the preview for.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 257,
				"end_line": 273,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests Upload Permissions from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "deprecated",
							"content": "since",
							"description": "5.0. Callers should use the more generic `canUser()` selector instead of\n           `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`."
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUser",
				"namespace": "core-data",
				"aliases": [],
				"line": 284,
				"end_line": 351,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "string"
					},
					{
						"name": "resource",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks whether the current user can perform the given action on the given",
					"long_description": "REST resource.",
					"tags": [
						{
							"name": "param",
							"content": "Action to check. One of: 'create', 'read', 'update',\n                          'delete'.",
							"types": [
								"string"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "REST resource to check, e.g. 'media' or 'posts'.",
							"types": [
								"string"
							],
							"variable": "resource"
						},
						{
							"name": "param",
							"content": "ID of the rest resource to check.",
							"types": [
								"string"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isResolving",
				"namespace": "core-data",
				"aliases": [],
				"line": 28,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if resolution is in progress for the core selector of the given",
					"long_description": "name and arguments.",
					"tags": [
						{
							"name": "param",
							"content": "Core data selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution is in progress.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isRequestingEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 46,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a request is in progress for embed preview data, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "URL the preview would be for.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Whether a request is in progress for an embed preview.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAuthors",
				"namespace": "core-data",
				"aliases": [],
				"line": 57,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all available authors.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Authors list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntitiesByKind",
				"namespace": "core-data",
				"aliases": [],
				"line": 86,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the entities for the give kind are loaded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "return",
							"content": "Whether the entities are loaded",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntity",
				"namespace": "core-data",
				"aliases": [],
				"line": 101,
				"end_line": 106,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the entity object given its kind and name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Entity",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 118,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the Entity's record object by key.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State tree",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record's key",
							"types": [
								"number"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "Record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 132,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the Entity's records.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State tree",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Optional terms query.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Records.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 149,
				"end_line": 151,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return theme supports data in the index.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Index data.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 161,
				"end_line": 163,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the embed preview for the given URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Embedded URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPreviewEmbedFallback",
				"namespace": "core-data",
				"aliases": [],
				"line": 177,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines if the returned preview is an oEmbed link fallback.",
					"long_description": "\nWordPress can be configured to return a simple link to a URL if it is not embeddable.\nWe need to be able to determine if a URL is embeddable or not, based on what we\nget back from the oEmbed preview API.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Embedded URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the preview for the URL an oEmbed link fallback.",
							"types": [
								"booleans"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 204,
				"end_line": 209,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the current user can upload media.",
					"long_description": "\nCalling this may trigger an OPTIONS request to the REST API via the\n`canUser()` resolver.\n\nhttps://developer.wordpress.org/rest-api/reference/",
					"tags": [
						{
							"name": "deprecated",
							"content": "since",
							"description": "5.0. Callers should use the more generic `canUser()` selector instead of\n            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`."
						},
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n                  request is being made.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUser",
				"namespace": "core-data",
				"aliases": [],
				"line": 228,
				"end_line": 231,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "string"
					},
					{
						"name": "resource",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the current user can perform the given action on the given",
					"long_description": "REST resource.\n\nCalling this may trigger an OPTIONS request to the REST API via the\n`canUser()` resolver.\n\nhttps://developer.wordpress.org/rest-api/reference/",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action to check. One of: 'create', 'read', 'update', 'delete'.",
							"types": [
								"string"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "REST resource to check, e.g. 'media' or 'posts'.",
							"types": [
								"string"
							],
							"variable": "resource"
						},
						{
							"name": "param",
							"content": "Optional ID of the rest resource to check.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Whether or not the user can perform the action,\n                            or `undefined` if the OPTIONS request is still being made.",
							"types": [
								"boolean",
								"undefined"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/utils/if-matching-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifMatchingAction",
				"namespace": "core-data",
				"aliases": [],
				"line": 10,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isMatch",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "A higher-order reducer creator which invokes the original reducer only if",
					"long_description": "the dispatching action matches the given predicate, **OR** if state is\ninitializing (undefined).",
					"tags": [
						{
							"name": "param",
							"content": "Function predicate for allowing reducer call.",
							"types": [
								"function"
							],
							"variable": "isMatch"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/utils/on-sub-key.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/utils/replace-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replaceAction",
				"namespace": "core-data",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "replacer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which substitutes the action object before",
					"long_description": "passing to the original reducer.",
					"tags": [
						{
							"name": "param",
							"content": "Function mapping original action to replacement.",
							"types": [
								"function"
							],
							"variable": "replacer"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/build-module/utils/with-weak-map-cache.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withWeakMapCache",
				"namespace": "core-data",
				"aliases": [],
				"line": 15,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fn",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given a function, returns an enhanced function which caches the result and",
					"long_description": "tracks in WeakMap. The result is only cached if the original function is\npassed a valid object-like argument (requirement for WeakMap key).",
					"tags": [
						{
							"name": "param",
							"content": "Original function.",
							"types": [
								"function"
							],
							"variable": "fn"
						},
						{
							"name": "return",
							"content": "Enhanced caching function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "receiveUserQuery",
				"namespace": "core-data",
				"aliases": [],
				"line": 24,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queryID",
						"default": null,
						"type": "string"
					},
					{
						"name": "users",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that authors have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Query ID.",
							"types": [
								"string"
							],
							"variable": "queryID"
						},
						{
							"name": "param",
							"content": "Users received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "users"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 39,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entities",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in adding new entities.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entities received.",
							"types": [
								"Array"
							],
							"variable": "entities"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 57,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "records",
						"default": null,
						"type": "Array"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					},
					{
						"name": "invalidateCache",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that entity records have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind of the received entity.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Name of the received entity.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Records received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "records"
						},
						{
							"name": "param",
							"content": "Query Object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "param",
							"content": "Should invalidate query caches",
							"types": [
								"boolean"
							],
							"variable": "invalidateCache"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 80,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "themeSupports",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the index has been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Theme support for the current theme.",
							"types": [
								"Object"
							],
							"variable": "themeSupports"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 96,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "preview",
						"default": null,
						"type": "Mixed"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the preview data for",
					"long_description": "a given URl has been received.",
					"tags": [
						{
							"name": "param",
							"content": "URL to preview the embed for.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Preview data.",
							"types": [
								"Mixed"
							],
							"variable": "preview"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "saveEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 113,
				"end_line": 129,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "record",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Action triggered to save an entity record.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind of the received entity.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Name of the received entity.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record to be saved.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "return",
							"content": "Updated record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 138,
				"end_line": 144,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hasUploadPermissions",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that Upload permissions have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Does the user have permission to upload files?",
							"types": [
								"boolean"
							],
							"variable": "hasUploadPermissions"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveUserPermission",
				"namespace": "core-data",
				"aliases": [],
				"line": 155,
				"end_line": 161,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "isAllowed",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the current user has",
					"long_description": "permission to perform an action on a REST resource.",
					"tags": [
						{
							"name": "param",
							"content": "A key that represents the action and REST resource.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Whether or not the user can perform the action.",
							"types": [
								"boolean"
							],
							"variable": "isAllowed"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/controls.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "apiFetch",
				"namespace": "core-data",
				"aliases": [],
				"line": 13,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "request",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Trigger an API Fetch request.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "API Fetch Request Object.",
							"types": [
								"Object"
							],
							"variable": "request"
						},
						{
							"name": "return",
							"content": "control descriptor.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "select",
				"namespace": "core-data",
				"aliases": [],
				"line": 27,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Calls a selector using the current state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector arguments.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "control descriptor.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/entities.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadPostTypeEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 30,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the list of post type entities.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Entities promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "loadTaxonomyEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 46,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the list of the taxonomies entities.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Entities promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getKindEntities",
				"namespace": "core-data",
				"aliases": [],
				"line": 82,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Loads the kind entities into the store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Kind",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "return",
							"content": "Entities",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/queried-data/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "receiveItems",
				"namespace": "core-data",
				"aliases": [],
				"line": 13,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that items have been received.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Items received.",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveQueriedItems",
				"namespace": "core-data",
				"aliases": [],
				"line": 29,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that queried data has been",
					"long_description": "received.",
					"tags": [
						{
							"name": "param",
							"content": "Queried items received.",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "param",
							"content": "Optional query object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/queried-data/get-query-parts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getQueryParts",
				"namespace": "core-data",
				"aliases": [],
				"line": 31,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Given a query object, returns an object of parts, including pagination",
					"long_description": "details (`page` and `perPage`, or default values). All other properties are\nencoded into a stable (idempotent) `stableKey` value.",
					"tags": [
						{
							"name": "param",
							"content": "Optional query object.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Query parts.",
							"types": [
								"WPQueriedDataQueryParts"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/queried-data/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMergedItemIds",
				"namespace": "core-data",
				"aliases": [],
				"line": 29,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "itemIds",
						"default": null,
						"type": "Array.<number>"
					},
					{
						"name": "nextItemIds",
						"default": null,
						"type": "Array.<number>"
					},
					{
						"name": "page",
						"default": null,
						"type": "number"
					},
					{
						"name": "perPage",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns a merged array of item IDs, given details of the received paginated",
					"long_description": "items. The array is sparse-like with `undefined` entries where holes exist.",
					"tags": [
						{
							"name": "param",
							"content": "Original item IDs (default empty array).",
							"types": [
								"Array.<number>"
							],
							"variable": "itemIds"
						},
						{
							"name": "param",
							"content": "Item IDs to merge.",
							"types": [
								"Array.<number>"
							],
							"variable": "nextItemIds"
						},
						{
							"name": "param",
							"content": "Page of items merged.",
							"types": [
								"number"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Number of items per page.",
							"types": [
								"number"
							],
							"variable": "perPage"
						},
						{
							"name": "return",
							"content": "Merged array of item IDs.",
							"types": [
								"Array.<number>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "items",
				"namespace": "core-data",
				"aliases": [],
				"line": 66,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer tracking items state, keyed by ID. Items are assumed to be normal,",
					"long_description": "where identifiers are common across all queries.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Next state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/queried-data/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getQueriedItemsUncached",
				"namespace": "core-data",
				"aliases": [],
				"line": 29,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns items for a given query, or null if the items are not known.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional query.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Query items.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "terms",
				"namespace": "core-data",
				"aliases": [],
				"line": 29,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing terms state. Keyed by taxonomy slug, the value is either",
					"long_description": "undefined (if no request has been made for given taxonomy), null (if a\nrequest is in-flight for given taxonomy), or the array of terms for the\ntaxonomy.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "users",
				"namespace": "core-data",
				"aliases": [],
				"line": 49,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing authors state. Keyed by id.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "taxonomies",
				"namespace": "core-data",
				"aliases": [],
				"line": 75,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing taxonomies.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "themeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 92,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing theme supports data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entity",
				"namespace": "core-data",
				"aliases": [],
				"line": 113,
				"end_line": 132,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "entityConfig",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher Order Reducer for a given entity config. It supports:",
					"long_description": "\n - Fetching a record by primary key",
					"tags": [
						{
							"name": "param",
							"content": "Entity config.",
							"types": [
								"Object"
							],
							"variable": "entityConfig"
						},
						{
							"name": "return",
							"content": "Reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "entitiesConfig",
				"namespace": "core-data",
				"aliases": [],
				"line": 142,
				"end_line": 152,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the registered entities.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "embedPreviews",
				"namespace": "core-data",
				"aliases": [],
				"line": 208,
				"end_line": 218,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing embed preview data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "userPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 229,
				"end_line": 239,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "State which tracks whether the user can perform an action on a REST",
					"long_description": "resource.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/resolvers.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAuthors",
				"namespace": "core-data",
				"aliases": [],
				"line": 28,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests authors from the REST API.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "getEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 40,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Requests an entity's record from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record's key",
							"types": [
								"number"
							],
							"variable": "key"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 57,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Requests the entity's records from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Query Object.",
							"types": [
								"Object"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 83,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests theme supports data from the index.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "getEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 93,
				"end_line": 101,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Requests a preview from the from the Embed API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL to get the preview for.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 109,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Requests Upload Permissions from the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "deprecated",
							"content": "since",
							"description": "5.0. Callers should use the more generic `canUser()` selector instead of\n           `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`."
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUser",
				"namespace": "core-data",
				"aliases": [],
				"line": 125,
				"end_line": 171,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "string"
					},
					{
						"name": "resource",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks whether the current user can perform the given action on the given",
					"long_description": "REST resource.",
					"tags": [
						{
							"name": "param",
							"content": "Action to check. One of: 'create', 'read', 'update',\n                          'delete'.",
							"types": [
								"string"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "REST resource to check, e.g. 'media' or 'posts'.",
							"types": [
								"string"
							],
							"variable": "resource"
						},
						{
							"name": "param",
							"content": "ID of the rest resource to check.",
							"types": [
								"string"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isResolving",
				"namespace": "core-data",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if resolution is in progress for the core selector of the given",
					"long_description": "name and arguments.",
					"tags": [
						{
							"name": "param",
							"content": "Core data selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution is in progress.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isRequestingEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a request is in progress for embed preview data, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "URL the preview would be for.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Whether a request is in progress for an embed preview.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAuthors",
				"namespace": "core-data",
				"aliases": [],
				"line": 52,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns all available authors.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Authors list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntitiesByKind",
				"namespace": "core-data",
				"aliases": [],
				"line": 81,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the entities for the give kind are loaded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "return",
							"content": "Whether the entities are loaded",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntity",
				"namespace": "core-data",
				"aliases": [],
				"line": 94,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the entity object given its kind and name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Entity",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecord",
				"namespace": "core-data",
				"aliases": [],
				"line": 108,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the Entity's record object by key.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State tree",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Record's key",
							"types": [
								"number"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "Record.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEntityRecords",
				"namespace": "core-data",
				"aliases": [],
				"line": 122,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "kind",
						"default": null,
						"type": "string"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the Entity's records.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "State tree",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Entity kind.",
							"types": [
								"string"
							],
							"variable": "kind"
						},
						{
							"name": "param",
							"content": "Entity name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Optional terms query.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Records.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getThemeSupports",
				"namespace": "core-data",
				"aliases": [],
				"line": 137,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return theme supports data in the index.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Index data.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEmbedPreview",
				"namespace": "core-data",
				"aliases": [],
				"line": 149,
				"end_line": 151,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the embed preview for the given URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Embedded URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPreviewEmbedFallback",
				"namespace": "core-data",
				"aliases": [],
				"line": 165,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines if the returned preview is an oEmbed link fallback.",
					"long_description": "\nWordPress can be configured to return a simple link to a URL if it is not embeddable.\nWe need to be able to determine if a URL is embeddable or not, based on what we\nget back from the oEmbed preview API.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Embedded URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Is the preview for the URL an oEmbed link fallback.",
							"types": [
								"booleans"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasUploadPermissions",
				"namespace": "core-data",
				"aliases": [],
				"line": 190,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the current user can upload media.",
					"long_description": "\nCalling this may trigger an OPTIONS request to the REST API via the\n`canUser()` resolver.\n\nhttps://developer.wordpress.org/rest-api/reference/",
					"tags": [
						{
							"name": "deprecated",
							"content": "since",
							"description": "5.0. Callers should use the more generic `canUser()` selector instead of\n            `hasUploadPermissions()`, e.g. `canUser( 'create', 'media' )`."
						},
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether or not the user can upload media. Defaults to `true` if the OPTIONS\n                  request is being made.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUser",
				"namespace": "core-data",
				"aliases": [],
				"line": 214,
				"end_line": 217,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "string"
					},
					{
						"name": "resource",
						"default": null,
						"type": "string"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the current user can perform the given action on the given",
					"long_description": "REST resource.\n\nCalling this may trigger an OPTIONS request to the REST API via the\n`canUser()` resolver.\n\nhttps://developer.wordpress.org/rest-api/reference/",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action to check. One of: 'create', 'read', 'update', 'delete'.",
							"types": [
								"string"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "REST resource to check, e.g. 'media' or 'posts'.",
							"types": [
								"string"
							],
							"variable": "resource"
						},
						{
							"name": "param",
							"content": "Optional ID of the rest resource to check.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Whether or not the user can perform the action,\n                            or `undefined` if the OPTIONS request is still being made.",
							"types": [
								"boolean",
								"undefined"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/utils/if-matching-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifMatchingAction",
				"namespace": "core-data",
				"aliases": [],
				"line": 10,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isMatch",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "A higher-order reducer creator which invokes the original reducer only if",
					"long_description": "the dispatching action matches the given predicate, **OR** if state is\ninitializing (undefined).",
					"tags": [
						{
							"name": "param",
							"content": "Function predicate for allowing reducer call.",
							"types": [
								"function"
							],
							"variable": "isMatch"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/utils/on-sub-key.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/utils/replace-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replaceAction",
				"namespace": "core-data",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "replacer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which substitutes the action object before",
					"long_description": "passing to the original reducer.",
					"tags": [
						{
							"name": "param",
							"content": "Function mapping original action to replacement.",
							"types": [
								"function"
							],
							"variable": "replacer"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/core-data/src/utils/with-weak-map-cache.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withWeakMapCache",
				"namespace": "core-data",
				"aliases": [],
				"line": 15,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fn",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given a function, returns an enhanced function which caches the result and",
					"long_description": "tracks in WeakMap. The result is only cached if the original function is\npassed a valid object-like argument (requirement for WeakMap key).",
					"tags": [
						{
							"name": "param",
							"content": "Original function.",
							"types": [
								"function"
							],
							"variable": "fn"
						},
						{
							"name": "return",
							"content": "Enhanced caching function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/custom-templated-path-webpack-plugin/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/custom-templated-path-webpack-plugin/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/custom-templated-path-webpack-plugin/test/fixtures/webpack.config.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/custom-templated-path-webpack-plugin/test/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/components/async-mode-provider/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/components/registry-provider/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/components/with-dispatch/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withDispatch",
				"namespace": "data",
				"aliases": [],
				"line": 54,
				"end_line": 131,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapDispatchToProps",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher-order component used to add dispatch props using registered action",
					"long_description": "creators.",
					"tags": [
						{
							"name": "param",
							"content": "Object of prop names where value is a\n                                   dispatch-bound action creator, or a\n                                   function to be called with with the\n                                   component's props and returning an\n                                   action creator.",
							"types": [
								"Object"
							],
							"variable": "mapDispatchToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with merged dispatcher props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/components/with-select/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withSelect",
				"namespace": "data",
				"aliases": [],
				"line": 55,
				"end_line": 216,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapSelectToProps",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order component used to inject state-derived props using registered",
					"long_description": "selectors.",
					"tags": [
						{
							"name": "param",
							"content": "Function called on every state change,\n                                  expected to return object of props to\n                                  merge with the component's own props.",
							"types": [
								"function"
							],
							"variable": "mapSelectToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with merged state data props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/namespace-store.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNamespace",
				"namespace": "data",
				"aliases": [],
				"line": 39,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a namespace object with a store derived from the reducer given.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Identifying string used for namespace and redex dev tools.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Contains reducer, actions, selectors, and resolvers.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Temporary registry reference, required for namespace updates.",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "return",
							"content": "Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createReduxStore",
				"namespace": "data",
				"aliases": [],
				"line": 106,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a redux store for a namespace.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Root reducer for redux store.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Registry reference, for resolver enhancer support.",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "return",
							"content": "Newly created redux store.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapSelectors",
				"namespace": "data",
				"aliases": [],
				"line": 129,
				"end_line": 152,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectors",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Maps selectors to a redux store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Selectors to register. Keys will be used as the\n                           public facing API. Selectors will get passed the\n                           state as first argument.",
							"types": [
								"Object"
							],
							"variable": "selectors"
						},
						{
							"name": "param",
							"content": "The redux store to which the selectors should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Selectors mapped to the redux store provided.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapActions",
				"namespace": "data",
				"aliases": [],
				"line": 162,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actions",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Maps actions to dispatch from a given store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Actions to register.",
							"types": [
								"Object"
							],
							"variable": "actions"
						},
						{
							"name": "param",
							"content": "The redux store to which the actions should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Actions mapped to the redux store provided.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapResolvers",
				"namespace": "data",
				"aliases": [],
				"line": 184,
				"end_line": 261,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "resolvers",
						"default": null,
						"type": "Object"
					},
					{
						"name": "selectors",
						"default": null,
						"type": "Object"
					},
					{
						"name": "fulfillment",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns resolvers with matched selectors for a given namespace.",
					"long_description": "Resolvers are side effects invoked once per argument set of a given selector call,\nused in ensuring that the data needs for the selector are satisfied.",
					"tags": [
						{
							"name": "param",
							"content": "Resolvers to register.",
							"types": [
								"Object"
							],
							"variable": "resolvers"
						},
						{
							"name": "param",
							"content": "The current selectors to be modified.",
							"types": [
								"Object"
							],
							"variable": "selectors"
						},
						{
							"name": "param",
							"content": "Fulfillment implementation functions.",
							"types": [
								"Object"
							],
							"variable": "fulfillment"
						},
						{
							"name": "param",
							"content": "The redux store to which the resolvers should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "An object containing updated selectors and resolvers.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCoreDataFulfillment",
				"namespace": "data",
				"aliases": [],
				"line": 271,
				"end_line": 309,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Bundles up fulfillment functions for resolvers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registry reference, for fulfilling via resolvers",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "An object providing fulfillment functions.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fulfillWithRegistry",
				"namespace": "data",
				"aliases": [],
				"line": 321,
				"end_line": 323,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Calls a resolver given arguments",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registry reference, for fulfilling via resolvers",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Selector name to fulfill.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector Arguments.",
							"types": [
								"Array"
							],
							"variable": "args"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/plugins/controls/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "data",
				"aliases": [],
				"line": 21,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/plugins/persistence/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withInitialState",
				"namespace": "data",
				"aliases": [],
				"line": 64,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					},
					{
						"name": "initialState",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Higher-order reducer to provides an initial value when state is undefined.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "param",
							"content": "Value to use as initial state.",
							"types": [
								"*"
							],
							"variable": "initialState"
						},
						{
							"name": "return",
							"content": "Enhanced reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withLazySameState",
				"namespace": "data",
				"aliases": [],
				"line": 82,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which invokes the original reducer only if state is",
					"long_description": "inequal from that of the action's `nextState` property, otherwise returning\nthe original state reference.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "get",
				"namespace": "data\\createPersistenceInterface",
				"aliases": [],
				"line": 115,
				"end_line": 135,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the persisted data as an object, defaulting to an empty object.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Persisted data.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "data\\createPersistenceInterface",
				"aliases": [],
				"line": 144,
				"end_line": 147,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Merges an updated reducer state into the persisted data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key to update.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Updated value.",
							"types": [
								"*"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_default",
				"namespace": "data",
				"aliases": [],
				"line": 164,
				"end_line": 230,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "WPDataRegistry"
					},
					{
						"name": "pluginOptions",
						"default": null,
						"type": "WPDataPersistencePluginOptions"
					}
				],
				"doc": {
					"description": "Data plugin to persist store state into a single storage key.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data registry.",
							"types": [
								"WPDataRegistry"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Plugin options.",
							"types": [
								"WPDataPersistencePluginOptions"
							],
							"variable": "pluginOptions"
						},
						{
							"name": "return",
							"content": "Data plugin.",
							"types": [
								"WPDataPlugin"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createPersistOnChange",
				"namespace": "data\\_default",
				"aliases": [],
				"line": 177,
				"end_line": 213,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "getState",
						"default": null,
						"type": "function"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "keys",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Creates an enhanced store dispatch function, triggering the state of the",
					"long_description": "given reducer key to be persisted when changed.",
					"tags": [
						{
							"name": "param",
							"content": "Function which returns current state.",
							"types": [
								"function"
							],
							"variable": "getState"
						},
						{
							"name": "param",
							"content": "Reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Optional subset of keys to save.",
							"types": [
								"Array.<string>"
							],
							"variable": "keys"
						},
						{
							"name": "return",
							"content": "Enhanced dispatch function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/plugins/persistence/storage/default.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/promise-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "promiseMiddleware",
				"namespace": "data",
				"aliases": [],
				"line": 21,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Simplest possible promise redux middleware.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "middleware.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/registry.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRegistry",
				"namespace": "data",
				"aliases": [],
				"line": 54,
				"end_line": 199,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "storeConfigs",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a new store registry, given an optional object of initial store",
					"long_description": "configurations.",
					"tags": [
						{
							"name": "param",
							"content": "Initial store configurations.",
							"types": [
								"Object"
							],
							"variable": "storeConfigs"
						},
						{
							"name": "return",
							"content": "Data registry.",
							"types": [
								"WPDataRegistry"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "globalListener",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 62,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Global listener called for each store's update.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "subscribe",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 76,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "listener",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Subscribe to changes to any data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Listener function.",
							"types": [
								"function"
							],
							"variable": "listener"
						},
						{
							"name": "return",
							"content": "Unsubscribe function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "select",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 92,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Calls a selector given the current state and extra arguments.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                           selectors for.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "The selector's returned value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dispatch",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 106,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the available actions for a part of the state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Part of the state shape to dispatch the\n                           action for.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "The action's returned value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerGenericStore",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 134,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "config",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a generic store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store registry key.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Configuration (getSelectors, getActions, subscribe).",
							"types": [
								"Object"
							],
							"variable": "config"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerStore",
				"namespace": "data\\createRegistry~registry",
				"aliases": [],
				"line": 170,
				"end_line": 178,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a standard `@wordpress/data` store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Store description (reducer, actions, selectors, resolvers).",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Registered store object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/resolvers-cache-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createResolversCacheMiddleware",
				"namespace": "data",
				"aliases": [],
				"line": 28,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "creates a middleware handling resolvers cache invalidation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "middleware",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "startResolution",
				"namespace": "data",
				"aliases": [],
				"line": 20,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that selector resolution has",
					"long_description": "started.",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver triggered.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "finishResolution",
				"namespace": "data",
				"aliases": [],
				"line": 40,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that selector resolution has",
					"long_description": "completed.",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver triggered.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "invalidateResolution",
				"namespace": "data",
				"aliases": [],
				"line": 59,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that we should invalidate the resolution cache.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver should be invalidated.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getIsResolving",
				"namespace": "data",
				"aliases": [],
				"line": 31,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns the raw `isResolving` value for a given reducer key, selector name,",
					"long_description": "and arguments set. May be undefined if the selector has never been resolved\nor not resolved for the given set of arguments, otherwise true or false for\nresolution started and completed respectively.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "isResolving value.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasStartedResolution",
				"namespace": "data",
				"aliases": [],
				"line": 53,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has already been triggered for a given reducer",
					"long_description": "key, selector name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector (default `[]`).",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution has been triggered.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasFinishedResolution",
				"namespace": "data",
				"aliases": [],
				"line": 70,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has completed for a given reducer key, selector",
					"long_description": "name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution has completed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isResolving",
				"namespace": "data",
				"aliases": [],
				"line": 87,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has been triggered but has not yet completed for",
					"long_description": "a given reducer key, selector name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution is in progress.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCachedResolvers",
				"namespace": "data",
				"aliases": [],
				"line": 101,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the list of the cached resolvers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "Resolvers mapped by args and selectorName.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build/store/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onSubKey",
				"namespace": "data",
				"aliases": [],
				"line": 22,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actionProperty",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which creates a combined reducer object, keyed",
					"long_description": "by a property on the action object.",
					"tags": [
						{
							"name": "param",
							"content": "Action property by which to key object.",
							"types": [
								"string"
							],
							"variable": "actionProperty"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/components/with-dispatch/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withDispatch",
				"namespace": "data",
				"aliases": [],
				"line": 37,
				"end_line": 116,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapDispatchToProps",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher-order component used to add dispatch props using registered action",
					"long_description": "creators.",
					"tags": [
						{
							"name": "param",
							"content": "Object of prop names where value is a\n                                   dispatch-bound action creator, or a\n                                   function to be called with with the\n                                   component's props and returning an\n                                   action creator.",
							"types": [
								"Object"
							],
							"variable": "mapDispatchToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with merged dispatcher props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/components/with-select/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withSelect",
				"namespace": "data",
				"aliases": [],
				"line": 35,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapSelectToProps",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order component used to inject state-derived props using registered",
					"long_description": "selectors.",
					"tags": [
						{
							"name": "param",
							"content": "Function called on every state change,\n                                  expected to return object of props to\n                                  merge with the component's own props.",
							"types": [
								"function"
							],
							"variable": "mapSelectToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with merged state data props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/namespace-store.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "data\\module",
				"aliases": [],
				"line": 25,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a namespace object with a store derived from the reducer given.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Identifying string used for namespace and redex dev tools.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Contains reducer, actions, selectors, and resolvers.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Temporary registry reference, required for namespace updates.",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "return",
							"content": "Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createReduxStore",
				"namespace": "data",
				"aliases": [],
				"line": 91,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a redux store for a namespace.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Root reducer for redux store.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Registry reference, for resolver enhancer support.",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "return",
							"content": "Newly created redux store.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapSelectors",
				"namespace": "data",
				"aliases": [],
				"line": 114,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectors",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Maps selectors to a redux store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Selectors to register. Keys will be used as the\n                           public facing API. Selectors will get passed the\n                           state as first argument.",
							"types": [
								"Object"
							],
							"variable": "selectors"
						},
						{
							"name": "param",
							"content": "The redux store to which the selectors should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Selectors mapped to the redux store provided.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapActions",
				"namespace": "data",
				"aliases": [],
				"line": 147,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actions",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Maps actions to dispatch from a given store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Actions to register.",
							"types": [
								"Object"
							],
							"variable": "actions"
						},
						{
							"name": "param",
							"content": "The redux store to which the actions should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Actions mapped to the redux store provided.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapResolvers",
				"namespace": "data",
				"aliases": [],
				"line": 169,
				"end_line": 246,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "resolvers",
						"default": null,
						"type": "Object"
					},
					{
						"name": "selectors",
						"default": null,
						"type": "Object"
					},
					{
						"name": "fulfillment",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns resolvers with matched selectors for a given namespace.",
					"long_description": "Resolvers are side effects invoked once per argument set of a given selector call,\nused in ensuring that the data needs for the selector are satisfied.",
					"tags": [
						{
							"name": "param",
							"content": "Resolvers to register.",
							"types": [
								"Object"
							],
							"variable": "resolvers"
						},
						{
							"name": "param",
							"content": "The current selectors to be modified.",
							"types": [
								"Object"
							],
							"variable": "selectors"
						},
						{
							"name": "param",
							"content": "Fulfillment implementation functions.",
							"types": [
								"Object"
							],
							"variable": "fulfillment"
						},
						{
							"name": "param",
							"content": "The redux store to which the resolvers should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "An object containing updated selectors and resolvers.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCoreDataFulfillment",
				"namespace": "data",
				"aliases": [],
				"line": 256,
				"end_line": 294,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Bundles up fulfillment functions for resolvers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registry reference, for fulfilling via resolvers",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "An object providing fulfillment functions.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fulfillWithRegistry",
				"namespace": "data",
				"aliases": [],
				"line": 306,
				"end_line": 308,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Calls a resolver given arguments",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registry reference, for fulfilling via resolvers",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Selector name to fulfill.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector Arguments.",
							"types": [
								"Array"
							],
							"variable": "args"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/plugins/persistence/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withInitialState",
				"namespace": "data",
				"aliases": [],
				"line": 48,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					},
					{
						"name": "initialState",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Higher-order reducer to provides an initial value when state is undefined.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "param",
							"content": "Value to use as initial state.",
							"types": [
								"*"
							],
							"variable": "initialState"
						},
						{
							"name": "return",
							"content": "Enhanced reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createPersistenceInterface",
				"namespace": "data",
				"aliases": [],
				"line": 83,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "WPDataPersistencePluginOptions"
					}
				],
				"doc": {
					"description": "Creates a persistence interface, exposing getter and setter methods (`get`",
					"long_description": "and `set` respectively).",
					"tags": [
						{
							"name": "param",
							"content": "Plugin options.",
							"types": [
								"WPDataPersistencePluginOptions"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Persistence interface.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "get",
				"namespace": "data\\createPersistenceInterface",
				"aliases": [],
				"line": 95,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the persisted data as an object, defaulting to an empty object.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Persisted data.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "data\\createPersistenceInterface",
				"aliases": [],
				"line": 124,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Merges an updated reducer state into the persisted data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key to update.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Updated value.",
							"types": [
								"*"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "data\\module",
				"aliases": [],
				"line": 143,
				"end_line": 209,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "WPDataRegistry"
					},
					{
						"name": "pluginOptions",
						"default": null,
						"type": "WPDataPersistencePluginOptions"
					}
				],
				"doc": {
					"description": "Data plugin to persist store state into a single storage key.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data registry.",
							"types": [
								"WPDataRegistry"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Plugin options.",
							"types": [
								"WPDataPersistencePluginOptions"
							],
							"variable": "pluginOptions"
						},
						{
							"name": "return",
							"content": "Data plugin.",
							"types": [
								"WPDataPlugin"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createPersistOnChange",
				"namespace": "data\\module\\exports",
				"aliases": [],
				"line": 156,
				"end_line": 192,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "getState",
						"default": null,
						"type": "function"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "keys",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Creates an enhanced store dispatch function, triggering the state of the",
					"long_description": "given reducer key to be persisted when changed.",
					"tags": [
						{
							"name": "param",
							"content": "Function which returns current state.",
							"types": [
								"function"
							],
							"variable": "getState"
						},
						{
							"name": "param",
							"content": "Reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Optional subset of keys to save.",
							"types": [
								"Array.<string>"
							],
							"variable": "keys"
						},
						{
							"name": "return",
							"content": "Enhanced dispatch function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/promise-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "promiseMiddleware",
				"namespace": "data",
				"aliases": [],
				"line": 11,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Simplest possible promise redux middleware.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "middleware.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/registry.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRegistry",
				"namespace": "data",
				"aliases": [],
				"line": 41,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "storeConfigs",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a new store registry, given an optional object of initial store",
					"long_description": "configurations.",
					"tags": [
						{
							"name": "param",
							"content": "Initial store configurations.",
							"types": [
								"Object"
							],
							"variable": "storeConfigs"
						},
						{
							"name": "return",
							"content": "Data registry.",
							"types": [
								"WPDataRegistry"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "globalListener",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 49,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Global listener called for each store's update.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "subscribe",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 63,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "listener",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Subscribe to changes to any data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Listener function.",
							"types": [
								"function"
							],
							"variable": "listener"
						},
						{
							"name": "return",
							"content": "Unsubscribe function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "select",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 79,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Calls a selector given the current state and extra arguments.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                           selectors for.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "The selector's returned value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dispatch",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 93,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the available actions for a part of the state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Part of the state shape to dispatch the\n                           action for.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "The action's returned value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerGenericStore",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 121,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "config",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a generic store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store registry key.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Configuration (getSelectors, getActions, subscribe).",
							"types": [
								"Object"
							],
							"variable": "config"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerStore",
				"namespace": "data\\createRegistry~registry",
				"aliases": [],
				"line": 157,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a standard `@wordpress/data` store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Store description (reducer, actions, selectors, resolvers).",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Registered store object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/resolvers-cache-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createResolversCacheMiddleware",
				"namespace": "data",
				"aliases": [],
				"line": 17,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "creates a middleware handling resolvers cache invalidation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "middleware",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "startResolution",
				"namespace": "data",
				"aliases": [],
				"line": 11,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that selector resolution has",
					"long_description": "started.",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver triggered.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "finishResolution",
				"namespace": "data",
				"aliases": [],
				"line": 30,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that selector resolution has",
					"long_description": "completed.",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver triggered.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "invalidateResolution",
				"namespace": "data",
				"aliases": [],
				"line": 48,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that we should invalidate the resolution cache.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver should be invalidated.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getIsResolving",
				"namespace": "data",
				"aliases": [],
				"line": 19,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns the raw `isResolving` value for a given reducer key, selector name,",
					"long_description": "and arguments set. May be undefined if the selector has never been resolved\nor not resolved for the given set of arguments, otherwise true or false for\nresolution started and completed respectively.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "isResolving value.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasStartedResolution",
				"namespace": "data",
				"aliases": [],
				"line": 40,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has already been triggered for a given reducer",
					"long_description": "key, selector name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector (default `[]`).",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution has been triggered.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasFinishedResolution",
				"namespace": "data",
				"aliases": [],
				"line": 56,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has completed for a given reducer key, selector",
					"long_description": "name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution has completed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isResolving",
				"namespace": "data",
				"aliases": [],
				"line": 72,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has been triggered but has not yet completed for",
					"long_description": "a given reducer key, selector name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution is in progress.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCachedResolvers",
				"namespace": "data",
				"aliases": [],
				"line": 85,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the list of the cached resolvers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "Resolvers mapped by args and selectorName.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/build-module/store/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/components/with-dispatch/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withDispatch",
				"namespace": "data",
				"aliases": [],
				"line": 29,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapDispatchToProps",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher-order component used to add dispatch props using registered action",
					"long_description": "creators.",
					"tags": [
						{
							"name": "param",
							"content": "Object of prop names where value is a\n                                   dispatch-bound action creator, or a\n                                   function to be called with with the\n                                   component's props and returning an\n                                   action creator.",
							"types": [
								"Object"
							],
							"variable": "mapDispatchToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with merged dispatcher props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/components/with-select/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withSelect",
				"namespace": "data",
				"aliases": [],
				"line": 27,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapSelectToProps",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order component used to inject state-derived props using registered",
					"long_description": "selectors.",
					"tags": [
						{
							"name": "param",
							"content": "Function called on every state change,\n                                  expected to return object of props to\n                                  merge with the component's own props.",
							"types": [
								"function"
							],
							"variable": "mapSelectToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with merged state data props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/namespace-store.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "data\\module",
				"aliases": [],
				"line": 26,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a namespace object with a store derived from the reducer given.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Identifying string used for namespace and redex dev tools.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Contains reducer, actions, selectors, and resolvers.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Temporary registry reference, required for namespace updates.",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "return",
							"content": "Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createReduxStore",
				"namespace": "data",
				"aliases": [],
				"line": 85,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a redux store for a namespace.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Root reducer for redux store.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Registry reference, for resolver enhancer support.",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "return",
							"content": "Newly created redux store.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapSelectors",
				"namespace": "data",
				"aliases": [],
				"line": 105,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectors",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Maps selectors to a redux store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Selectors to register. Keys will be used as the\n                           public facing API. Selectors will get passed the\n                           state as first argument.",
							"types": [
								"Object"
							],
							"variable": "selectors"
						},
						{
							"name": "param",
							"content": "The redux store to which the selectors should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Selectors mapped to the redux store provided.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapActions",
				"namespace": "data",
				"aliases": [],
				"line": 134,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actions",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Maps actions to dispatch from a given store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Actions to register.",
							"types": [
								"Object"
							],
							"variable": "actions"
						},
						{
							"name": "param",
							"content": "The redux store to which the actions should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Actions mapped to the redux store provided.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapResolvers",
				"namespace": "data",
				"aliases": [],
				"line": 150,
				"end_line": 187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "resolvers",
						"default": null,
						"type": "Object"
					},
					{
						"name": "selectors",
						"default": null,
						"type": "Object"
					},
					{
						"name": "fulfillment",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns resolvers with matched selectors for a given namespace.",
					"long_description": "Resolvers are side effects invoked once per argument set of a given selector call,\nused in ensuring that the data needs for the selector are satisfied.",
					"tags": [
						{
							"name": "param",
							"content": "Resolvers to register.",
							"types": [
								"Object"
							],
							"variable": "resolvers"
						},
						{
							"name": "param",
							"content": "The current selectors to be modified.",
							"types": [
								"Object"
							],
							"variable": "selectors"
						},
						{
							"name": "param",
							"content": "Fulfillment implementation functions.",
							"types": [
								"Object"
							],
							"variable": "fulfillment"
						},
						{
							"name": "param",
							"content": "The redux store to which the resolvers should be mapped.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "An object containing updated selectors and resolvers.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCoreDataFulfillment",
				"namespace": "data",
				"aliases": [],
				"line": 196,
				"end_line": 206,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Bundles up fulfillment functions for resolvers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registry reference, for fulfilling via resolvers",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "return",
							"content": "An object providing fulfillment functions.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fulfillWithRegistry",
				"namespace": "data",
				"aliases": [],
				"line": 217,
				"end_line": 228,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Calls a resolver given arguments",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registry reference, for fulfilling via resolvers",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                             selectors for.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Selector name to fulfill.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector Arguments.",
							"types": [
								"Array"
							],
							"variable": "args"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/plugins/persistence/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withInitialState",
				"namespace": "data",
				"aliases": [],
				"line": 45,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					},
					{
						"name": "initialState",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Higher-order reducer to provides an initial value when state is undefined.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "param",
							"content": "Value to use as initial state.",
							"types": [
								"*"
							],
							"variable": "initialState"
						},
						{
							"name": "return",
							"content": "Enhanced reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createPersistenceInterface",
				"namespace": "data",
				"aliases": [],
				"line": 76,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "WPDataPersistencePluginOptions"
					}
				],
				"doc": {
					"description": "Creates a persistence interface, exposing getter and setter methods (`get`",
					"long_description": "and `set` respectively).",
					"tags": [
						{
							"name": "param",
							"content": "Plugin options.",
							"types": [
								"WPDataPersistencePluginOptions"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Persistence interface.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "get",
				"namespace": "data\\createPersistenceInterface",
				"aliases": [],
				"line": 89,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the persisted data as an object, defaulting to an empty object.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Persisted data.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "data\\createPersistenceInterface",
				"aliases": [],
				"line": 116,
				"end_line": 119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Merges an updated reducer state into the persisted data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key to update.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Updated value.",
							"types": [
								"*"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "data\\module",
				"aliases": [],
				"line": 132,
				"end_line": 202,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "WPDataRegistry"
					},
					{
						"name": "pluginOptions",
						"default": null,
						"type": "WPDataPersistencePluginOptions"
					}
				],
				"doc": {
					"description": "Data plugin to persist store state into a single storage key.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data registry.",
							"types": [
								"WPDataRegistry"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "Plugin options.",
							"types": [
								"WPDataPersistencePluginOptions"
							],
							"variable": "pluginOptions"
						},
						{
							"name": "return",
							"content": "Data plugin.",
							"types": [
								"WPDataPlugin"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createPersistOnChange",
				"namespace": "data\\module\\exports",
				"aliases": [],
				"line": 145,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "getState",
						"default": null,
						"type": "function"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "keys",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Creates an enhanced store dispatch function, triggering the state of the",
					"long_description": "given reducer key to be persisted when changed.",
					"tags": [
						{
							"name": "param",
							"content": "Function which returns current state.",
							"types": [
								"function"
							],
							"variable": "getState"
						},
						{
							"name": "param",
							"content": "Reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Optional subset of keys to save.",
							"types": [
								"Array.<string>"
							],
							"variable": "keys"
						},
						{
							"name": "return",
							"content": "Enhanced dispatch function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/promise-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "promiseMiddleware",
				"namespace": "data",
				"aliases": [],
				"line": 11,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Simplest possible promise redux middleware.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "middleware.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/registry.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRegistry",
				"namespace": "data",
				"aliases": [],
				"line": 41,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "storeConfigs",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a new store registry, given an optional object of initial store",
					"long_description": "configurations.",
					"tags": [
						{
							"name": "param",
							"content": "Initial store configurations.",
							"types": [
								"Object"
							],
							"variable": "storeConfigs"
						},
						{
							"name": "return",
							"content": "Data registry.",
							"types": [
								"WPDataRegistry"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "globalListener",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 48,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Global listener called for each store's update.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "subscribe",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 59,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "listener",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Subscribe to changes to any data.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Listener function.",
							"types": [
								"function"
							],
							"variable": "listener"
						},
						{
							"name": "return",
							"content": "Unsubscribe function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "select",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 75,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Calls a selector given the current state and extra arguments.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Part of the state shape to register the\n                           selectors for.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "The selector's returned value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dispatch",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 88,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the available actions for a part of the state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Part of the state shape to dispatch the\n                           action for.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "The action's returned value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerGenericStore",
				"namespace": "data\\createRegistry",
				"aliases": [],
				"line": 114,
				"end_line": 126,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "config",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a generic store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store registry key.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Configuration (getSelectors, getActions, subscribe).",
							"types": [
								"Object"
							],
							"variable": "config"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "registerStore",
				"namespace": "data\\createRegistry~registry",
				"aliases": [],
				"line": 146,
				"end_line": 154,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a standard `@wordpress/data` store.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Store description (reducer, actions, selectors, resolvers).",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Registered store object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/resolvers-cache-middleware.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createResolversCacheMiddleware",
				"namespace": "data",
				"aliases": [],
				"line": 14,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "registry",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "creates a middleware handling resolvers cache invalidation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "registry"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "middleware",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "startResolution",
				"namespace": "data",
				"aliases": [],
				"line": 11,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that selector resolution has",
					"long_description": "started.",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver triggered.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "finishResolution",
				"namespace": "data",
				"aliases": [],
				"line": 30,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that selector resolution has",
					"long_description": "completed.",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver triggered.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"*"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "invalidateResolution",
				"namespace": "data",
				"aliases": [],
				"line": 48,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that we should invalidate the resolution cache.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Name of selector for which resolver should be invalidated.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments to associate for uniqueness.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getIsResolving",
				"namespace": "data",
				"aliases": [],
				"line": 19,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns the raw `isResolving` value for a given reducer key, selector name,",
					"long_description": "and arguments set. May be undefined if the selector has never been resolved\nor not resolved for the given set of arguments, otherwise true or false for\nresolution started and completed respectively.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "isResolving value.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasStartedResolution",
				"namespace": "data",
				"aliases": [],
				"line": 39,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has already been triggered for a given reducer",
					"long_description": "key, selector name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector (default `[]`).",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution has been triggered.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasFinishedResolution",
				"namespace": "data",
				"aliases": [],
				"line": 54,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has completed for a given reducer key, selector",
					"long_description": "name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution has completed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isResolving",
				"namespace": "data",
				"aliases": [],
				"line": 69,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if resolution has been triggered but has not yet completed for",
					"long_description": "a given reducer key, selector name, and arguments set.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Arguments passed to selector.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Whether resolution is in progress.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCachedResolvers",
				"namespace": "data",
				"aliases": [],
				"line": 81,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reducerKey",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the list of the cached resolvers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Registered store reducer key.",
							"types": [
								"string"
							],
							"variable": "reducerKey"
						},
						{
							"name": "return",
							"content": "Resolvers mapped by args and selectorName.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/data/src/store/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/date/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setSettings",
				"namespace": "date",
				"aliases": [],
				"line": 64,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Adds a locale to moment, using the format supplied by `wp_localize_script()`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Settings, including locale data.",
							"types": [
								"Object"
							],
							"variable": "dateSettings"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalGetSettings",
				"namespace": "date",
				"aliases": [],
				"line": 121,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the currently defined date settings.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Settings, including locale data.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "S",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 185,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the ordinal suffix.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "z",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 200,
				"end_line": 203,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the day of the year (zero-indexed).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "t",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 219,
				"end_line": 221,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the days in the month.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "L",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 231,
				"end_line": 233,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets whether the current year is a leap year.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "B",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 248,
				"end_line": 254,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the current time in Swatch Internet Time (.beats).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "I",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 273,
				"end_line": 275,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets whether the timezone is in DST currently.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "Z",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 287,
				"end_line": 293,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the timezone offset in seconds.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "format",
				"namespace": "date",
				"aliases": [],
				"line": 311,
				"end_line": 344,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date. Does not alter the date's timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "date",
				"namespace": "date",
				"aliases": [],
				"line": 357,
				"end_line": 362,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date (like `date()` in PHP), in the site's timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "gmdate",
				"namespace": "date",
				"aliases": [],
				"line": 375,
				"end_line": 379,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date (like `date()` in PHP), in the UTC timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dateI18n",
				"namespace": "date",
				"aliases": [],
				"line": 394,
				"end_line": 405,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					},
					{
						"name": "gmt",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Formats a date (like `dateI18n()` in PHP).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "param",
							"content": "True for GMT/UTC, false for\n                                              site's timezone.",
							"types": [
								"boolean"
							],
							"variable": "gmt"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInTheFuture",
				"namespace": "date",
				"aliases": [],
				"line": 415,
				"end_line": 421,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateValue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check whether a date is considered in the future according to the WordPress settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Date String or Date object in the Defined WP Timezone.",
							"types": [
								"string"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Is in the future.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDate",
				"namespace": "date",
				"aliases": [],
				"line": 431,
				"end_line": 437,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateString",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Create and return a JavaScript Date Object from a date string in the WP timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Date formatted in the WP timezone.",
							"types": [
								"string"
							],
							"variable": "dateString"
						},
						{
							"name": "return",
							"content": "Date",
							"types": [
								"Date"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/date/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setSettings",
				"namespace": "date",
				"aliases": [],
				"line": 45,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Adds a locale to moment, using the format supplied by `wp_localize_script()`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Settings, including locale data.",
							"types": [
								"Object"
							],
							"variable": "dateSettings"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalGetSettings",
				"namespace": "date",
				"aliases": [],
				"line": 98,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the currently defined date settings.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Settings, including locale data.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "S",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 162,
				"end_line": 167,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the ordinal suffix.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "z",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 177,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the day of the year (zero-indexed).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "t",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 196,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the days in the month.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "L",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 208,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets whether the current year is a leap year.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "B",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 225,
				"end_line": 231,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the current time in Swatch Internet Time (.beats).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "I",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 250,
				"end_line": 252,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets whether the timezone is in DST currently.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "Z",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 264,
				"end_line": 270,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the timezone offset in seconds.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "format",
				"namespace": "date",
				"aliases": [],
				"line": 288,
				"end_line": 321,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date. Does not alter the date's timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "date",
				"namespace": "date",
				"aliases": [],
				"line": 333,
				"end_line": 338,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date (like `date()` in PHP), in the site's timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "gmdate",
				"namespace": "date",
				"aliases": [],
				"line": 350,
				"end_line": 354,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date (like `date()` in PHP), in the UTC timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dateI18n",
				"namespace": "date",
				"aliases": [],
				"line": 368,
				"end_line": 379,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					},
					{
						"name": "gmt",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Formats a date (like `dateI18n()` in PHP).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "param",
							"content": "True for GMT/UTC, false for\n                                              site's timezone.",
							"types": [
								"boolean"
							],
							"variable": "gmt"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInTheFuture",
				"namespace": "date",
				"aliases": [],
				"line": 388,
				"end_line": 392,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateValue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check whether a date is considered in the future according to the WordPress settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Date String or Date object in the Defined WP Timezone.",
							"types": [
								"string"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Is in the future.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDate",
				"namespace": "date",
				"aliases": [],
				"line": 401,
				"end_line": 407,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateString",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Create and return a JavaScript Date Object from a date string in the WP timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Date formatted in the WP timezone.",
							"types": [
								"string"
							],
							"variable": "dateString"
						},
						{
							"name": "return",
							"content": "Date",
							"types": [
								"Date"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/date/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setSettings",
				"namespace": "date",
				"aliases": [],
				"line": 36,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Adds a locale to moment, using the format supplied by `wp_localize_script()`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Settings, including locale data.",
							"types": [
								"Object"
							],
							"variable": "dateSettings"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalGetSettings",
				"namespace": "date",
				"aliases": [],
				"line": 90,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the currently defined date settings.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Settings, including locale data.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "S",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 151,
				"end_line": 156,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the ordinal suffix.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "z",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 166,
				"end_line": 169,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the day of the year (zero-indexed).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "t",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 186,
				"end_line": 188,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the days in the month.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "L",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 198,
				"end_line": 200,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets whether the current year is a leap year.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "B",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 215,
				"end_line": 228,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the current time in Swatch Internet Time (.beats).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "I",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 246,
				"end_line": 248,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets whether the timezone is in DST currently.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "Z",
				"namespace": "date\\formatMap",
				"aliases": [],
				"line": 259,
				"end_line": 265,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "momentDate",
						"default": null,
						"type": "moment"
					}
				],
				"doc": {
					"description": "Gets the timezone offset in seconds.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Moment instance.",
							"types": [
								"moment"
							],
							"variable": "momentDate"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "format",
				"namespace": "date",
				"aliases": [],
				"line": 282,
				"end_line": 311,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date. Does not alter the date's timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "date",
				"namespace": "date",
				"aliases": [],
				"line": 323,
				"end_line": 327,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date (like `date()` in PHP), in the site's timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "gmdate",
				"namespace": "date",
				"aliases": [],
				"line": 339,
				"end_line": 342,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					}
				],
				"doc": {
					"description": "Formats a date (like `date()` in PHP), in the UTC timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dateI18n",
				"namespace": "date",
				"aliases": [],
				"line": 356,
				"end_line": 366,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateFormat",
						"default": null,
						"type": "string"
					},
					{
						"name": "dateValue",
						"default": null,
						"type": "Date"
					},
					{
						"name": "gmt",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Formats a date (like `dateI18n()` in PHP).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "PHP-style formatting string.\n                                              See php.net/date.",
							"types": [
								"string"
							],
							"variable": "dateFormat"
						},
						{
							"name": "param",
							"content": "Date object or string,\n                                              parsable by moment.js.",
							"types": [
								"Date",
								"string",
								"moment",
								"null"
							],
							"variable": "dateValue"
						},
						{
							"name": "param",
							"content": "True for GMT/UTC, false for\n                                              site's timezone.",
							"types": [
								"boolean"
							],
							"variable": "gmt"
						},
						{
							"name": "return",
							"content": "Formatted date.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInTheFuture",
				"namespace": "date",
				"aliases": [],
				"line": 375,
				"end_line": 380,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateValue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check whether a date is considered in the future according to the WordPress settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Date String or Date object in the Defined WP Timezone.",
							"types": [
								"string"
							],
							"variable": "dateValue"
						},
						{
							"name": "return",
							"content": "Is in the future.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getDate",
				"namespace": "date",
				"aliases": [],
				"line": 389,
				"end_line": 395,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dateString",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Create and return a JavaScript Date Object from a date string in the WP timezone.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Date formatted in the WP timezone.",
							"types": [
								"string"
							],
							"variable": "dateString"
						},
						{
							"name": "return",
							"content": "Date",
							"types": [
								"Date"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/deprecated/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/deprecated/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "deprecated\\module",
				"aliases": [],
				"line": 25,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.version",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.alternative",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.plugin",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.link",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.hint",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Logs a message to notify developers about a deprecated feature.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Name of the deprecated feature.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Personalisation options",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Version in which the feature will be removed.",
							"types": [
								"string"
							],
							"variable": "options.version"
						},
						{
							"name": "param",
							"content": "Feature to use instead",
							"types": [
								"string"
							],
							"variable": "options.alternative"
						},
						{
							"name": "param",
							"content": "Plugin name if it's a plugin feature",
							"types": [
								"string"
							],
							"variable": "options.plugin"
						},
						{
							"name": "param",
							"content": "Link to documentation",
							"types": [
								"string"
							],
							"variable": "options.link"
						},
						{
							"name": "param",
							"content": "Additional message to help transition away from the deprecated feature.",
							"types": [
								"string"
							],
							"variable": "options.hint"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/deprecated/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "deprecated\\module",
				"aliases": [],
				"line": 25,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "feature",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.version",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.alternative",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.plugin",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.link",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.hint",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Logs a message to notify developers about a deprecated feature.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Name of the deprecated feature.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "param",
							"content": "Personalisation options",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Version in which the feature will be removed.",
							"types": [
								"string"
							],
							"variable": "options.version"
						},
						{
							"name": "param",
							"content": "Feature to use instead",
							"types": [
								"string"
							],
							"variable": "options.alternative"
						},
						{
							"name": "param",
							"content": "Plugin name if it's a plugin feature",
							"types": [
								"string"
							],
							"variable": "options.plugin"
						},
						{
							"name": "param",
							"content": "Link to documentation",
							"types": [
								"string"
							],
							"variable": "options.link"
						},
						{
							"name": "param",
							"content": "Additional message to help transition away from the deprecated feature.",
							"types": [
								"string"
							],
							"variable": "options.hint"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build/dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isSelectionForward",
				"namespace": "dom",
				"aliases": [],
				"line": 51,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selection",
						"default": null,
						"type": "Selection"
					}
				],
				"doc": {
					"description": "Returns true if the given selection object is in the forward direction, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Selection object to check.",
							"types": [
								"Selection"
							],
							"variable": "selection"
						},
						{
							"name": "return",
							"content": "Whether the selection is forward.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isHorizontalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 92,
				"end_line": 168,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Check whether the selection is horizontally at the edge of the container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "Set to true to check left, false for right.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "True if at the horizontal edge, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isVerticalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 179,
				"end_line": 214,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Check whether the selection is vertically at the edge of the container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "Set to true to check top, false for bottom.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "True if at the edge, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getRectangleFromRange",
				"namespace": "dom",
				"aliases": [],
				"line": 224,
				"end_line": 246,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "range",
						"default": null,
						"type": "Range"
					}
				],
				"doc": {
					"description": "Get the rectangle of a given Range.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The range.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "return",
							"content": "The rectangle.",
							"types": [
								"DOMRect"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computeCaretRect",
				"namespace": "dom",
				"aliases": [],
				"line": 256,
				"end_line": 269,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Get the rectangle for the selection in a container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editable container.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "The rectangle.",
							"types": [
								"DOMRect"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "placeCaretAtHorizontalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 278,
				"end_line": 319,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Places the caret at start or end of a given element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "True for end, false for start.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "caretRangeFromPoint",
				"namespace": "dom",
				"aliases": [],
				"line": 334,
				"end_line": 354,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "x",
						"default": null,
						"type": "number"
					},
					{
						"name": "y",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Polyfill.",
					"long_description": "Get a collapsed range for a given point.",
					"tags": [
						{
							"name": "param",
							"content": "The document of the range.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "Horizontal position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "x"
						},
						{
							"name": "param",
							"content": "Vertical position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "y"
						},
						{
							"name": "return",
							"content": "The best range for the given point.",
							"types": [
								"Range"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hiddenCaretRangeFromPoint",
				"namespace": "dom",
				"aliases": [],
				"line": 369,
				"end_line": 374,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "x",
						"default": null,
						"type": "number"
					},
					{
						"name": "y",
						"default": null,
						"type": "number"
					},
					{
						"name": "container",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Get a collapsed range for a given point.",
					"long_description": "Gives the container a temporary high z-index (above any UI).\nThis is preferred over getting the UI nodes and set styles there.",
					"tags": [
						{
							"name": "param",
							"content": "The document of the range.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "Horizontal position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "x"
						},
						{
							"name": "param",
							"content": "Vertical position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "y"
						},
						{
							"name": "param",
							"content": "Container in which the range is expected to be found.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "The best range for the given point.",
							"types": [
								"Range"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "placeCaretAtVerticalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 385,
				"end_line": 444,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "rect",
						"default": null,
						"type": "DOMRect"
					},
					{
						"name": "mayUseScroll",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Places the caret at the top or bottom of a given element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "True for bottom, false for top.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "param",
							"content": "The rectangle to position the caret with.",
							"types": [
								"DOMRect"
							],
							"variable": "rect"
						},
						{
							"name": "param",
							"content": "True to allow scrolling, false to disallow.",
							"types": [
								"boolean"
							],
							"variable": "mayUseScroll"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTextField",
				"namespace": "dom",
				"aliases": [],
				"line": 457,
				"end_line": 474,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Check whether the given element is a text field, where text field is defined",
					"long_description": "by the ability to select within the input, or that it is contenteditable.\n\nSee: https://html.spec.whatwg.org/#textFieldSelection",
					"tags": [
						{
							"name": "param",
							"content": "The HTML element.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True if the element is an text field, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "documentHasSelection",
				"namespace": "dom",
				"aliases": [],
				"line": 483,
				"end_line": 491,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Check wether the current document has a selection.",
					"long_description": "This checks both for focus in an input field and general text selection.",
					"tags": [
						{
							"name": "return",
							"content": "True if there is selection, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEntirelySelected",
				"namespace": "dom",
				"aliases": [],
				"line": 502,
				"end_line": 530,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Check whether the contents of the element have been entirely selected.",
					"long_description": "Returns true if there is no possibility of selection.",
					"tags": [
						{
							"name": "param",
							"content": "The element to check.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True if entirely selected, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getScrollContainer",
				"namespace": "dom",
				"aliases": [],
				"line": 540,
				"end_line": 558,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given a DOM node, finds the closest scrollable container node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node from which to start.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "Scrollable container node, if found.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getOffsetParent",
				"namespace": "dom",
				"aliases": [],
				"line": 572,
				"end_line": 594,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Returns the closest positioned element, or null under any of the conditions",
					"long_description": "of the offsetParent specification. Unlike offsetParent, this function is not\nlimited to HTMLElement and accepts any Node (e.g. Node.TEXT_NODE).",
					"tags": [
						{
							"name": "param",
							"content": "Node from which to find offset parent.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "Offset parent.",
							"types": [
								"Node"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "dom",
				"aliases": [],
				"line": 604,
				"end_line": 607,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "processedNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given two DOM nodes, replaces the former with the latter in the DOM.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node to be removed.",
							"types": [
								"Element"
							],
							"variable": "processedNode"
						},
						{
							"name": "param",
							"content": "Node to be inserted in its place.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "remove",
				"namespace": "dom",
				"aliases": [],
				"line": 616,
				"end_line": 618,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given a DOM node, removes it from the DOM.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node to be removed.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertAfter",
				"namespace": "dom",
				"aliases": [],
				"line": 629,
				"end_line": 631,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "referenceNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given two DOM nodes, inserts the former in the DOM as the next sibling of",
					"long_description": "the latter.",
					"tags": [
						{
							"name": "param",
							"content": "Node to be inserted.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "param",
							"content": "Node after which to perform the insertion.",
							"types": [
								"Element"
							],
							"variable": "referenceNode"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unwrap",
				"namespace": "dom",
				"aliases": [],
				"line": 641,
				"end_line": 649,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Unwrap the given node. This means any child nodes are moved to the parent.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to unwrap.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceTag",
				"namespace": "dom",
				"aliases": [],
				"line": 660,
				"end_line": 669,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					},
					{
						"name": "tagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces the given node with a new node with the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to replace",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The new tag name.",
							"types": [
								"string"
							],
							"variable": "tagName"
						},
						{
							"name": "return",
							"content": "The new node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "wrap",
				"namespace": "dom",
				"aliases": [],
				"line": 678,
				"end_line": 681,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "referenceNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Wraps the given node with a new node with the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to insert.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "param",
							"content": "The node to wrap.",
							"types": [
								"Element"
							],
							"variable": "referenceNode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build/focusable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isVisible",
				"namespace": "dom",
				"aliases": [],
				"line": 40,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified element is visible (i.e. neither display: none",
					"long_description": "nor visibility: hidden).",
					"tags": [
						{
							"name": "param",
							"content": "DOM element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is visible.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidFocusableArea",
				"namespace": "dom",
				"aliases": [],
				"line": 54,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified area element is a valid focusable element, or",
					"long_description": "false otherwise. Area is only focusable if within a map where a named map\nreferenced by an image somewhere in the document.",
					"tags": [
						{
							"name": "param",
							"content": "DOM area element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether area element is valid for focus.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "find",
				"namespace": "dom",
				"aliases": [],
				"line": 73,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "context",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns all focusable elements within a given context.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element in which to search.",
							"types": [
								"Element"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Focusable elements.",
							"types": [
								"Array.<Element>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build/tabbable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTabIndex",
				"namespace": "dom",
				"aliases": [],
				"line": 27,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns the tab index of the given element. In contrast with the tabIndex",
					"long_description": "property, this normalizes the default (0) to avoid browser inconsistencies,\noperating under the assumption that this function is only ever called with a\nfocusable node.",
					"tags": [
						{
							"name": "param",
							"content": "Element from which to retrieve.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Tab index of element (default 0).",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTabbableIndex",
				"namespace": "dom",
				"aliases": [],
				"line": 40,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified element is tabbable, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is tabbable.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapElementToObjectTabbable",
				"namespace": "dom",
				"aliases": [],
				"line": 56,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "An array map callback, returning an object with the element value and its",
					"long_description": "array index location as properties. This is used to emulate a proper stable\nsort where equal tabIndex should be left in order of their occurrence in the\ndocument.",
					"tags": [
						{
							"name": "param",
							"content": "Element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "Array index of element.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Mapped object with element, index.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapObjectTabbableToElement",
				"namespace": "dom",
				"aliases": [],
				"line": 72,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "An array map callback, returning an element of the given mapped object's",
					"long_description": "element value.",
					"tags": [
						{
							"name": "param",
							"content": "Mapped object with index.",
							"types": [
								"Object"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Mapped object element.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "compareObjectTabbables",
				"namespace": "dom",
				"aliases": [],
				"line": 87,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "A sort comparator function used in comparing two objects of mapped elements.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First object to compare.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object to compare.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Comparator result.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build-module/dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isSelectionForward",
				"namespace": "dom",
				"aliases": [],
				"line": 27,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selection",
						"default": null,
						"type": "Selection"
					}
				],
				"doc": {
					"description": "Returns true if the given selection object is in the forward direction, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Selection object to check.",
							"types": [
								"Selection"
							],
							"variable": "selection"
						},
						{
							"name": "return",
							"content": "Whether the selection is forward.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isHorizontalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 68,
				"end_line": 144,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Check whether the selection is horizontally at the edge of the container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "Set to true to check left, false for right.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "True if at the horizontal edge, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isVerticalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 154,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Check whether the selection is vertically at the edge of the container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "Set to true to check top, false for bottom.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "True if at the edge, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getRectangleFromRange",
				"namespace": "dom",
				"aliases": [],
				"line": 198,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "range",
						"default": null,
						"type": "Range"
					}
				],
				"doc": {
					"description": "Get the rectangle of a given Range.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The range.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "return",
							"content": "The rectangle.",
							"types": [
								"DOMRect"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computeCaretRect",
				"namespace": "dom",
				"aliases": [],
				"line": 229,
				"end_line": 242,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Get the rectangle for the selection in a container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editable container.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "The rectangle.",
							"types": [
								"DOMRect"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "placeCaretAtHorizontalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 250,
				"end_line": 291,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Places the caret at start or end of a given element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "True for end, false for start.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "caretRangeFromPoint",
				"namespace": "dom",
				"aliases": [],
				"line": 305,
				"end_line": 325,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "x",
						"default": null,
						"type": "number"
					},
					{
						"name": "y",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Polyfill.",
					"long_description": "Get a collapsed range for a given point.",
					"tags": [
						{
							"name": "param",
							"content": "The document of the range.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "Horizontal position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "x"
						},
						{
							"name": "param",
							"content": "Vertical position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "y"
						},
						{
							"name": "return",
							"content": "The best range for the given point.",
							"types": [
								"Range"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hiddenCaretRangeFromPoint",
				"namespace": "dom",
				"aliases": [],
				"line": 340,
				"end_line": 345,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "x",
						"default": null,
						"type": "number"
					},
					{
						"name": "y",
						"default": null,
						"type": "number"
					},
					{
						"name": "container",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Get a collapsed range for a given point.",
					"long_description": "Gives the container a temporary high z-index (above any UI).\nThis is preferred over getting the UI nodes and set styles there.",
					"tags": [
						{
							"name": "param",
							"content": "The document of the range.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "Horizontal position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "x"
						},
						{
							"name": "param",
							"content": "Vertical position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "y"
						},
						{
							"name": "param",
							"content": "Container in which the range is expected to be found.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "The best range for the given point.",
							"types": [
								"Range"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "placeCaretAtVerticalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 356,
				"end_line": 415,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "rect",
						"default": null,
						"type": "DOMRect"
					},
					{
						"name": "mayUseScroll",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Places the caret at the top or bottom of a given element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "True for bottom, false for top.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "param",
							"content": "The rectangle to position the caret with.",
							"types": [
								"DOMRect"
							],
							"variable": "rect"
						},
						{
							"name": "param",
							"content": "True to allow scrolling, false to disallow.",
							"types": [
								"boolean"
							],
							"variable": "mayUseScroll"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTextField",
				"namespace": "dom",
				"aliases": [],
				"line": 427,
				"end_line": 444,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Check whether the given element is a text field, where text field is defined",
					"long_description": "by the ability to select within the input, or that it is contenteditable.\n\nSee: https://html.spec.whatwg.org/#textFieldSelection",
					"tags": [
						{
							"name": "param",
							"content": "The HTML element.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True if the element is an text field, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "documentHasSelection",
				"namespace": "dom",
				"aliases": [],
				"line": 452,
				"end_line": 460,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Check wether the current document has a selection.",
					"long_description": "This checks both for focus in an input field and general text selection.",
					"tags": [
						{
							"name": "return",
							"content": "True if there is selection, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEntirelySelected",
				"namespace": "dom",
				"aliases": [],
				"line": 470,
				"end_line": 498,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Check whether the contents of the element have been entirely selected.",
					"long_description": "Returns true if there is no possibility of selection.",
					"tags": [
						{
							"name": "param",
							"content": "The element to check.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True if entirely selected, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getScrollContainer",
				"namespace": "dom",
				"aliases": [],
				"line": 507,
				"end_line": 525,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given a DOM node, finds the closest scrollable container node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node from which to start.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "Scrollable container node, if found.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getOffsetParent",
				"namespace": "dom",
				"aliases": [],
				"line": 538,
				"end_line": 560,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Returns the closest positioned element, or null under any of the conditions",
					"long_description": "of the offsetParent specification. Unlike offsetParent, this function is not\nlimited to HTMLElement and accepts any Node (e.g. Node.TEXT_NODE).",
					"tags": [
						{
							"name": "param",
							"content": "Node from which to find offset parent.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "Offset parent.",
							"types": [
								"Node"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "dom",
				"aliases": [],
				"line": 569,
				"end_line": 572,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "processedNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given two DOM nodes, replaces the former with the latter in the DOM.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node to be removed.",
							"types": [
								"Element"
							],
							"variable": "processedNode"
						},
						{
							"name": "param",
							"content": "Node to be inserted in its place.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "remove",
				"namespace": "dom",
				"aliases": [],
				"line": 580,
				"end_line": 582,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given a DOM node, removes it from the DOM.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node to be removed.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertAfter",
				"namespace": "dom",
				"aliases": [],
				"line": 592,
				"end_line": 594,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "referenceNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given two DOM nodes, inserts the former in the DOM as the next sibling of",
					"long_description": "the latter.",
					"tags": [
						{
							"name": "param",
							"content": "Node to be inserted.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "param",
							"content": "Node after which to perform the insertion.",
							"types": [
								"Element"
							],
							"variable": "referenceNode"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unwrap",
				"namespace": "dom",
				"aliases": [],
				"line": 603,
				"end_line": 611,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Unwrap the given node. This means any child nodes are moved to the parent.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to unwrap.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceTag",
				"namespace": "dom",
				"aliases": [],
				"line": 621,
				"end_line": 630,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					},
					{
						"name": "tagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces the given node with a new node with the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to replace",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The new tag name.",
							"types": [
								"string"
							],
							"variable": "tagName"
						},
						{
							"name": "return",
							"content": "The new node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "wrap",
				"namespace": "dom",
				"aliases": [],
				"line": 638,
				"end_line": 641,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "referenceNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Wraps the given node with a new node with the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to insert.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "param",
							"content": "The node to wrap.",
							"types": [
								"Element"
							],
							"variable": "referenceNode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build-module/focusable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isVisible",
				"namespace": "dom",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified element is visible (i.e. neither display: none",
					"long_description": "nor visibility: hidden).",
					"tags": [
						{
							"name": "param",
							"content": "DOM element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is visible.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidFocusableArea",
				"namespace": "dom",
				"aliases": [],
				"line": 45,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified area element is a valid focusable element, or",
					"long_description": "false otherwise. Area is only focusable if within a map where a named map\nreferenced by an image somewhere in the document.",
					"tags": [
						{
							"name": "param",
							"content": "DOM area element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether area element is valid for focus.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "find",
				"namespace": "dom",
				"aliases": [],
				"line": 64,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "context",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns all focusable elements within a given context.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element in which to search.",
							"types": [
								"Element"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Focusable elements.",
							"types": [
								"Array.<Element>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/build-module/tabbable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTabIndex",
				"namespace": "dom",
				"aliases": [],
				"line": 18,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns the tab index of the given element. In contrast with the tabIndex",
					"long_description": "property, this normalizes the default (0) to avoid browser inconsistencies,\noperating under the assumption that this function is only ever called with a\nfocusable node.",
					"tags": [
						{
							"name": "param",
							"content": "Element from which to retrieve.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Tab index of element (default 0).",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTabbableIndex",
				"namespace": "dom",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified element is tabbable, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is tabbable.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapElementToObjectTabbable",
				"namespace": "dom",
				"aliases": [],
				"line": 46,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "An array map callback, returning an object with the element value and its",
					"long_description": "array index location as properties. This is used to emulate a proper stable\nsort where equal tabIndex should be left in order of their occurrence in the\ndocument.",
					"tags": [
						{
							"name": "param",
							"content": "Element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "Array index of element.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Mapped object with element, index.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapObjectTabbableToElement",
				"namespace": "dom",
				"aliases": [],
				"line": 62,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "An array map callback, returning an element of the given mapped object's",
					"long_description": "element value.",
					"tags": [
						{
							"name": "param",
							"content": "Mapped object with index.",
							"types": [
								"Object"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Mapped object element.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "compareObjectTabbables",
				"namespace": "dom",
				"aliases": [],
				"line": 77,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "A sort comparator function used in comparing two objects of mapped elements.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First object to compare.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object to compare.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Comparator result.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/src/dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isSelectionForward",
				"namespace": "dom",
				"aliases": [],
				"line": 28,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selection",
						"default": null,
						"type": "Selection"
					}
				],
				"doc": {
					"description": "Returns true if the given selection object is in the forward direction, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Selection object to check.",
							"types": [
								"Selection"
							],
							"variable": "selection"
						},
						{
							"name": "return",
							"content": "Whether the selection is forward.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isHorizontalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 70,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Check whether the selection is horizontally at the edge of the container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "Set to true to check left, false for right.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "True if at the horizontal edge, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isVerticalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 155,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Check whether the selection is vertically at the edge of the container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "Set to true to check top, false for bottom.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "True if at the edge, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getRectangleFromRange",
				"namespace": "dom",
				"aliases": [],
				"line": 199,
				"end_line": 222,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "range",
						"default": null,
						"type": "Range"
					}
				],
				"doc": {
					"description": "Get the rectangle of a given Range.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The range.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "return",
							"content": "The rectangle.",
							"types": [
								"DOMRect"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "computeCaretRect",
				"namespace": "dom",
				"aliases": [],
				"line": 231,
				"end_line": 244,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Get the rectangle for the selection in a container.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editable container.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "The rectangle.",
							"types": [
								"DOMRect"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "placeCaretAtHorizontalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 252,
				"end_line": 294,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Places the caret at start or end of a given element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "True for end, false for start.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "caretRangeFromPoint",
				"namespace": "dom",
				"aliases": [],
				"line": 308,
				"end_line": 331,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "x",
						"default": null,
						"type": "number"
					},
					{
						"name": "y",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Polyfill.",
					"long_description": "Get a collapsed range for a given point.",
					"tags": [
						{
							"name": "param",
							"content": "The document of the range.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "Horizontal position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "x"
						},
						{
							"name": "param",
							"content": "Vertical position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "y"
						},
						{
							"name": "return",
							"content": "The best range for the given point.",
							"types": [
								"Range"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hiddenCaretRangeFromPoint",
				"namespace": "dom",
				"aliases": [],
				"line": 345,
				"end_line": 353,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "doc",
						"default": null,
						"type": "Document"
					},
					{
						"name": "x",
						"default": null,
						"type": "number"
					},
					{
						"name": "y",
						"default": null,
						"type": "number"
					},
					{
						"name": "container",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Get a collapsed range for a given point.",
					"long_description": "Gives the container a temporary high z-index (above any UI).\nThis is preferred over getting the UI nodes and set styles there.",
					"tags": [
						{
							"name": "param",
							"content": "The document of the range.",
							"types": [
								"Document"
							],
							"variable": "doc"
						},
						{
							"name": "param",
							"content": "Horizontal position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "x"
						},
						{
							"name": "param",
							"content": "Vertical position within the current viewport.",
							"types": [
								"number"
							],
							"variable": "y"
						},
						{
							"name": "param",
							"content": "Container in which the range is expected to be found.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "return",
							"content": "The best range for the given point.",
							"types": [
								"Range"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "placeCaretAtVerticalEdge",
				"namespace": "dom",
				"aliases": [],
				"line": 363,
				"end_line": 423,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "container",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "rect",
						"default": null,
						"type": "DOMRect"
					},
					{
						"name": "mayUseScroll",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Places the caret at the top or bottom of a given element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focusable element.",
							"types": [
								"Element"
							],
							"variable": "container"
						},
						{
							"name": "param",
							"content": "True for bottom, false for top.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "param",
							"content": "The rectangle to position the caret with.",
							"types": [
								"DOMRect"
							],
							"variable": "rect"
						},
						{
							"name": "param",
							"content": "True to allow scrolling, false to disallow.",
							"types": [
								"boolean"
							],
							"variable": "mayUseScroll"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTextField",
				"namespace": "dom",
				"aliases": [],
				"line": 435,
				"end_line": 455,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Check whether the given element is a text field, where text field is defined",
					"long_description": "by the ability to select within the input, or that it is contenteditable.\n\nSee: https://html.spec.whatwg.org/#textFieldSelection",
					"tags": [
						{
							"name": "param",
							"content": "The HTML element.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True if the element is an text field, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "documentHasSelection",
				"namespace": "dom",
				"aliases": [],
				"line": 463,
				"end_line": 472,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Check wether the current document has a selection.",
					"long_description": "This checks both for focus in an input field and general text selection.",
					"tags": [
						{
							"name": "return",
							"content": "True if there is selection, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEntirelySelected",
				"namespace": "dom",
				"aliases": [],
				"line": 482,
				"end_line": 520,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Check whether the contents of the element have been entirely selected.",
					"long_description": "Returns true if there is no possibility of selection.",
					"tags": [
						{
							"name": "param",
							"content": "The element to check.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True if entirely selected, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getScrollContainer",
				"namespace": "dom",
				"aliases": [],
				"line": 529,
				"end_line": 545,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given a DOM node, finds the closest scrollable container node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node from which to start.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "Scrollable container node, if found.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getOffsetParent",
				"namespace": "dom",
				"aliases": [],
				"line": 558,
				"end_line": 579,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Returns the closest positioned element, or null under any of the conditions",
					"long_description": "of the offsetParent specification. Unlike offsetParent, this function is not\nlimited to HTMLElement and accepts any Node (e.g. Node.TEXT_NODE).",
					"tags": [
						{
							"name": "param",
							"content": "Node from which to find offset parent.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "Offset parent.",
							"types": [
								"Node"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "dom",
				"aliases": [],
				"line": 588,
				"end_line": 591,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "processedNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given two DOM nodes, replaces the former with the latter in the DOM.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node to be removed.",
							"types": [
								"Element"
							],
							"variable": "processedNode"
						},
						{
							"name": "param",
							"content": "Node to be inserted in its place.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "remove",
				"namespace": "dom",
				"aliases": [],
				"line": 599,
				"end_line": 601,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given a DOM node, removes it from the DOM.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node to be removed.",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertAfter",
				"namespace": "dom",
				"aliases": [],
				"line": 611,
				"end_line": 613,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "referenceNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given two DOM nodes, inserts the former in the DOM as the next sibling of",
					"long_description": "the latter.",
					"tags": [
						{
							"name": "param",
							"content": "Node to be inserted.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "param",
							"content": "Node after which to perform the insertion.",
							"types": [
								"Element"
							],
							"variable": "referenceNode"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unwrap",
				"namespace": "dom",
				"aliases": [],
				"line": 622,
				"end_line": 630,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					}
				],
				"doc": {
					"description": "Unwrap the given node. This means any child nodes are moved to the parent.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to unwrap.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceTag",
				"namespace": "dom",
				"aliases": [],
				"line": 640,
				"end_line": 650,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Element"
					},
					{
						"name": "tagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces the given node with a new node with the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to replace",
							"types": [
								"Element"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The new tag name.",
							"types": [
								"string"
							],
							"variable": "tagName"
						},
						{
							"name": "return",
							"content": "The new node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "wrap",
				"namespace": "dom",
				"aliases": [],
				"line": 658,
				"end_line": 661,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "newNode",
						"default": null,
						"type": "Element"
					},
					{
						"name": "referenceNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Wraps the given node with a new node with the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The node to insert.",
							"types": [
								"Element"
							],
							"variable": "newNode"
						},
						{
							"name": "param",
							"content": "The node to wrap.",
							"types": [
								"Element"
							],
							"variable": "referenceNode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/src/focusable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isVisible",
				"namespace": "dom",
				"aliases": [],
				"line": 42,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified element is visible (i.e. neither display: none",
					"long_description": "nor visibility: hidden).",
					"tags": [
						{
							"name": "param",
							"content": "DOM element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is visible.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidFocusableArea",
				"namespace": "dom",
				"aliases": [],
				"line": 59,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified area element is a valid focusable element, or",
					"long_description": "false otherwise. Area is only focusable if within a map where a named map\nreferenced by an image somewhere in the document.",
					"tags": [
						{
							"name": "param",
							"content": "DOM area element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether area element is valid for focus.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "find",
				"namespace": "dom",
				"aliases": [],
				"line": 76,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "context",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns all focusable elements within a given context.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element in which to search.",
							"types": [
								"Element"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Focusable elements.",
							"types": [
								"Array.<Element>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/src/tabbable.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTabIndex",
				"namespace": "dom",
				"aliases": [],
				"line": 18,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns the tab index of the given element. In contrast with the tabIndex",
					"long_description": "property, this normalizes the default (0) to avoid browser inconsistencies,\noperating under the assumption that this function is only ever called with a\nfocusable node.",
					"tags": [
						{
							"name": "param",
							"content": "Element from which to retrieve.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Tab index of element (default 0).",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTabbableIndex",
				"namespace": "dom",
				"aliases": [],
				"line": 30,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Returns true if the specified element is tabbable, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is tabbable.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapElementToObjectTabbable",
				"namespace": "dom",
				"aliases": [],
				"line": 45,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "An array map callback, returning an object with the element value and its",
					"long_description": "array index location as properties. This is used to emulate a proper stable\nsort where equal tabIndex should be left in order of their occurrence in the\ndocument.",
					"tags": [
						{
							"name": "param",
							"content": "Element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "Array index of element.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Mapped object with element, index.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapObjectTabbableToElement",
				"namespace": "dom",
				"aliases": [],
				"line": 57,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "An array map callback, returning an element of the given mapped object's",
					"long_description": "element value.",
					"tags": [
						{
							"name": "param",
							"content": "Mapped object with index.",
							"types": [
								"Object"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Mapped object element.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "compareObjectTabbables",
				"namespace": "dom",
				"aliases": [],
				"line": 71,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "A sort comparator function used in comparing two objects of mapped elements.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First object to compare.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object to compare.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Comparator result.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom/src/test/utils/create-element.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "dom\\module",
				"aliases": [],
				"line": 9,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an element type, returns an HTMLElement with an emulated layout,",
					"long_description": "since JSDOM does have its own internal layout engine.",
					"tags": [
						{
							"name": "param",
							"content": "Element type.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Layout-emulated element.",
							"types": [
								"HTMLElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom-ready/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "domReady",
				"namespace": "dom-ready",
				"aliases": [],
				"line": 15,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "callback",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Specify a function to execute when the DOM is fully loaded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A function to execute after the DOM is ready.",
							"types": [
								"function"
							],
							"variable": "callback"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom-ready/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "domReady",
				"namespace": "dom-ready",
				"aliases": [],
				"line": 8,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "callback",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Specify a function to execute when the DOM is fully loaded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A function to execute after the DOM is ready.",
							"types": [
								"function"
							],
							"variable": "callback"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/dom-ready/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "domReady",
				"namespace": "dom-ready",
				"aliases": [],
				"line": 8,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "callback",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Specify a function to execute when the DOM is fully loaded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A function to execute after the DOM is ready.",
							"types": [
								"function"
							],
							"variable": "callback"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/activate-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "activatePlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 27,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Activates an installed plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/are-pre-publish-checks-enabled.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "arePrePublishChecksEnabled",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies if publish checks are enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Boolean which represents the state of prepublish checks.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/clear-local-storage.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clearLocalStorage",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clears the local storage.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/click-block-appender.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickBlockAppender",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clicks the default block appender.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/click-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickButton",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "buttonText",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Clicks a button based on the text on the button.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text that appears on the button to click.",
							"types": [
								"string"
							],
							"variable": "buttonText"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/click-on-close-modal-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickOnCloseModalButton",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "modalClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Click on the close button of an open modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Class name for the modal to close",
							"types": [
								"string"
							],
							"variable": "modalClassName"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/click-on-more-menu-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickOnMoreMenuItem",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 23,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "buttonLabel",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Clicks on More Menu item, searches for the button with the text provided and clicks it.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The label to search the button for.",
							"types": [
								"string"
							],
							"variable": "buttonLabel"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/create-new-post.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNewPost",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 29,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "obj",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates new post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to create new post, along with tips enabling option.",
							"types": [
								"Object"
							],
							"variable": "obj"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/create-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createURL",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 25,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "WPPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates new URL by parsing base URL, WPPath and query string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "WPPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "String which represents full URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/deactivate-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "deactivatePlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 27,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Deactivates an active plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/disable-pre-publish-checks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "disablePrePublishChecks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Disables Pre-publish checks.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/enable-page-dialog-accept.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "acceptPageDialog",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dialog",
						"default": null,
						"type": "puppeteer.Dialog"
					}
				],
				"doc": {
					"description": "Callback which automatically accepts dialog.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Dialog object dispatched by page via the 'dialog' event.",
							"types": [
								"puppeteer.Dialog"
							],
							"variable": "dialog"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_acceptPageDialog",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 26,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Enables even listener which accepts a page dialog which",
					"long_description": "may appear when navigating away from Gutenberg.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/enable-pre-publish-checks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "enablePrePublishChecks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Enables Pre-publish checks.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/ensure-sidebar-opened.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ensureSidebarOpened",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies that the edit post sidebar is opened, and if it is not, opens it.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving once the edit post sidebar is opened.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/find-sidebar-panel-with-title.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "findSidebarPanelWithTitle",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 25,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelTitle",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Finds a sidebar panel with the provided title.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The name of sidebar panel.",
							"types": [
								"string"
							],
							"variable": "panelTitle"
						},
						{
							"name": "return",
							"content": "Object that represents an in-page DOM element.",
							"types": [
								"ElementHandle"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/get-all-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAllBlocks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an array with all blocks; Equivalent to calling wp.data.select( 'core/editor' ).getBlocks();",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving with an array containing all blocks in the document.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/get-available-block-transforms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/get-edited-post-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEditedPostContent",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a promise which resolves with the edited post content (HTML string).",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving with post content markup.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/has-block-switcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/insert-block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertBlock",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 25,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Opens the inserter, searches for the given term, then selects the first",
					"long_description": "result that appears.",
					"tags": [
						{
							"name": "param",
							"content": "The text to search the inserter for.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						},
						{
							"name": "param",
							"content": "The inserter panel to open (if it's closed by default).",
							"types": [
								"string"
							],
							"variable": "panelName"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/install-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "installPlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Installs a plugin from the WP.org repository.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "If the plugin is not findable by its slug use an alternative term to search.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/is-current-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isCurrentURL",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 27,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "WPPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks if current URL is a WordPress path.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "WPPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Boolean represents whether current URL is or not a WordPress path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/login-user.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loginUser",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 30,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "username",
						"default": null,
						"type": "string"
					},
					{
						"name": "password",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs log in with specified username and password.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be used as user credential.",
							"types": [
								"string"
							],
							"variable": "username"
						},
						{
							"name": "param",
							"content": "String to be used as user credential.",
							"types": [
								"string"
							],
							"variable": "password"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/mocks/create-embedding-matcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parameterEquals",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 21,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "parameterName",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request has a parameter with a certain value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The query parameter to check.",
							"types": [
								"string"
							],
							"variable": "parameterName"
						},
						{
							"name": "param",
							"content": "The value to check for.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Function that determines if a request's query parameter is the specified value.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createEmbeddingMatcher",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 41,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request is embedding a certain URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to check against a request.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Function that determines if a request is for the embed API, embedding a specific URL.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/mocks/create-json-response.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createJSONResponse",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 24,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mockResponse",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Respond to a request with a JSON response.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The mock object to wrap in a JSON response.",
							"types": [
								"string"
							],
							"variable": "mockResponse"
						},
						{
							"name": "return",
							"content": "Promise that responds to a request with the mock JSON response.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/mocks/create-url-matcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createURLMatcher",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 14,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "substring",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request is calling a URL with the substring present.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The substring to check for.",
							"types": [
								"string"
							],
							"variable": "substring"
						},
						{
							"name": "return",
							"content": "Function that determines if a request's URL contains substring.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/mocks/mock-or-transform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "mockOrTransform",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 33,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mockCheck",
						"default": null,
						"type": "function"
					},
					{
						"name": "mock",
						"default": null,
						"type": "Object"
					},
					{
						"name": "responseObjectTransform",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Mocks a request with the supplied mock object, or allows it to run with an optional transform, based on the",
					"long_description": "deserialised JSON response for the request.",
					"tags": [
						{
							"name": "param",
							"content": "function that returns true if the request should be mocked.",
							"types": [
								"function"
							],
							"variable": "mockCheck"
						},
						{
							"name": "param",
							"content": "A mock object to wrap in a JSON response, if the request should be mocked.",
							"types": [
								"Object"
							],
							"variable": "mock"
						},
						{
							"name": "param",
							"content": "An optional function that transforms the response's object before the response is used.",
							"types": [
								"function",
								"undefined"
							],
							"variable": "responseObjectTransform"
						},
						{
							"name": "return",
							"content": "Promise that uses `mockCheck` to see if a request should be mocked with `mock`, and optionally transforms the response with `responseObjectTransform`.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/mocks/set-up-response-mocking.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setUpResponseMocking",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 46,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Sets up mock checks and responses. Accepts a list of mock settings with the following properties:",
					"long_description": "  - match: function to check if a request should be mocked.\n  - onRequestMatch: async function to respond to the request.\n\nExample:\n  const MOCK_RESPONSES = [\n    {\n      match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/' ),\n      onRequestMatch: JSONResponse( MOCK_BAD_WORDPRESS_RESPONSE ),\n    },\n    {\n      match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/block-api/attributes/' ),\n      onRequestMatch: JSONResponse( MOCK_EMBED_WORDPRESS_SUCCESS_RESPONSE ),\n    }\n ];\n setUpResponseMocking( MOCK_RESPONSES );\n\nIf none of the mock settings match the request, the request is allowed to continue.",
					"tags": [
						{
							"name": "param",
							"content": "Array of mock settings.",
							"types": [
								"Array"
							],
							"variable": "mocks"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/observe-focus-loss.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "observeFocusLoss",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 12,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Binds to the document on page load which throws an error if a `focusout`",
					"long_description": "event occurs without a related target (i.e. focus loss).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/open-document-settings-sidebar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openDocumentSettingsSidebar",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clicks on the button in the header which opens Document Settings sidebar when it is closed.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/open-publish-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openPublishPanel",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Opens the publish panel.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/press-key-times.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "promiseSequence",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 26,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "sequence",
						"default": null,
						"type": "Array.<function()>"
					}
				],
				"doc": {
					"description": "Given an array of functions, each returning a promise, performs all",
					"long_description": "promises in sequence (waterfall) order.",
					"tags": [
						{
							"name": "param",
							"content": "Array of promise creators.",
							"types": [
								"Array.<function()>"
							],
							"variable": "sequence"
						},
						{
							"name": "return",
							"content": "Promise resolving once all in the sequence complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_promiseSequence",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 39,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "count",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Presses the given keyboard key a number of times in sequence.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key to press.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Number of times to press.",
							"types": [
								"number"
							],
							"variable": "count"
						},
						{
							"name": "return",
							"content": "Promise resolving when key presses complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/press-key-with-modifier.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "pressKeyWithModifier",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 33,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "modifier",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs a key press with modifier (Shift, Control, Meta, Alt), where each modifier",
					"long_description": "is normalized to platform-specific modifier.",
					"tags": [
						{
							"name": "param",
							"content": "Modifier key.",
							"types": [
								"string"
							],
							"variable": "modifier"
						},
						{
							"name": "param",
							"content": "Key to press while modifier held.",
							"types": [
								"string"
							],
							"variable": "key"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/publish-post-with-pre-publish-checks-disabled.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "publishPostWithPrePublishChecksDisabled",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Publishes the post without the pre-publish checks,",
					"long_description": "resolving once the request is complete (once a notice is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when publish is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/publish-post.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "publishPost",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Publishes the post, resolving once the request is complete (once a notice",
					"long_description": "is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when publish is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/save-draft.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "saveDraft",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Saves the post as a draft, resolving once the request is complete (once the",
					"long_description": "\"Saved\" indicator is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when draft save is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/search-for-block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "searchForBlock",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Search for block in the global inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text to search the inserter for.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/select-block-by-client-id.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "selectBlockByClientId",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given the clientId of a block, selects the block on the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Identified of the block.",
							"types": [
								"string"
							],
							"variable": "clientId"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/set-browser-viewport.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setBrowserViewport",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 23,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets browser viewport to specified type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to represent dimensions type; can be either small or large.",
							"types": [
								"string"
							],
							"variable": "type"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/set-post-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setPostContent",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets code editor content",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New code editor content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "return",
							"content": "Promise resolving with an array containing all blocks in the document.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/shared/get-json-response.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getJSONResponse",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 14,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "obj",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Get a JSON response for the passed in object, for use with `request.respond`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to seralise for response.",
							"types": [
								"Object"
							],
							"variable": "obj"
						},
						{
							"name": "return",
							"content": "Response for use with `request.respond`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/switch-editor-mode-to.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchEditorModeTo",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 19,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mode",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switches editor mode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String editor mode.",
							"types": [
								"string"
							],
							"variable": "mode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/switch-user-to-admin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchUserToAdmin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Switches the current user to the admin user (if the user",
					"long_description": "running the test is not already the admin user).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/switch-user-to-test.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchUserToTest",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Switches the current user to whichever user we should be",
					"long_description": "running the tests as (if we're not already that user).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/toggle-screen-option.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toggleScreenOption",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 27,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "label",
						"default": null,
						"type": "string"
					},
					{
						"name": "shouldBeChecked",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Toggles the screen option with the given label.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The label of the screen option, e.g. 'Show Tips'.",
							"types": [
								"string"
							],
							"variable": "label"
						},
						{
							"name": "param",
							"content": "If true, turns the option on. If false, off. If\n                                  undefined, the option will be toggled.",
							"types": [
								"boolean"
							],
							"variable": "shouldBeChecked"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/transform-block-to.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "transformBlockTo",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts editor's block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/uninstall-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "uninstallPlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 27,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Uninstalls a plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/visit-admin-page.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "visitAdminPage",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 34,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "adminPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Visits admin page; if user is not logged in then it logging in it first, then visits admin page.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "adminPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build/wait-for-window-dimensions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "waitForWindowDimensions",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "width",
						"default": null,
						"type": "number"
					},
					{
						"name": "height",
						"default": null,
						"type": "height"
					}
				],
				"doc": {
					"description": "Function that waits until the page viewport has the required dimensions.",
					"long_description": "It is being used to address a problem where after using setViewport the execution may continue,\nwithout the new dimensions being applied.\nhttps://github.com/GoogleChrome/puppeteer/issues/1751",
					"tags": [
						{
							"name": "param",
							"content": "Width of the window.",
							"types": [
								"number"
							],
							"variable": "width"
						},
						{
							"name": "param",
							"content": "Height of the window.",
							"types": [
								"height"
							],
							"variable": "height"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/activate-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "activatePlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Activates an installed plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/are-pre-publish-checks-enabled.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "arePrePublishChecksEnabled",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 9,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies if publish checks are enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Boolean which represents the state of prepublish checks.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/clear-local-storage.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clearLocalStorage",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 8,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clears the local storage.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/click-block-appender.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickBlockAppender",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 8,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clicks the default block appender.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/click-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickButton",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "buttonText",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Clicks a button based on the text on the button.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text that appears on the button to click.",
							"types": [
								"string"
							],
							"variable": "buttonText"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/click-on-close-modal-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickOnCloseModalButton",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "modalClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Click on the close button of an open modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Class name for the modal to close",
							"types": [
								"string"
							],
							"variable": "modalClassName"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/click-on-more-menu-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickOnMoreMenuItem",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "buttonLabel",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Clicks on More Menu item, searches for the button with the text provided and clicks it.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The label to search the button for.",
							"types": [
								"string"
							],
							"variable": "buttonLabel"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/create-new-post.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNewPost",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "obj",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates new post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to create new post, along with tips enabling option.",
							"types": [
								"Object"
							],
							"variable": "obj"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/create-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createURL",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "WPPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates new URL by parsing base URL, WPPath and query string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "WPPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "String which represents full URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/deactivate-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "deactivatePlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Deactivates an active plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/disable-pre-publish-checks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "disablePrePublishChecks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Disables Pre-publish checks.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/enable-page-dialog-accept.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "acceptPageDialog",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dialog",
						"default": null,
						"type": "puppeteer.Dialog"
					}
				],
				"doc": {
					"description": "Callback which automatically accepts dialog.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Dialog object dispatched by page via the 'dialog' event.",
							"types": [
								"puppeteer.Dialog"
							],
							"variable": "dialog"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_acceptPageDialog",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Enables even listener which accepts a page dialog which",
					"long_description": "may appear when navigating away from Gutenberg.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/enable-pre-publish-checks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "enablePrePublishChecks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Enables Pre-publish checks.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/ensure-sidebar-opened.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ensureSidebarOpened",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies that the edit post sidebar is opened, and if it is not, opens it.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving once the edit post sidebar is opened.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/find-sidebar-panel-with-title.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "findSidebarPanelWithTitle",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelTitle",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Finds a sidebar panel with the provided title.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The name of sidebar panel.",
							"types": [
								"string"
							],
							"variable": "panelTitle"
						},
						{
							"name": "return",
							"content": "Object that represents an in-page DOM element.",
							"types": [
								"ElementHandle"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/get-all-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAllBlocks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an array with all blocks; Equivalent to calling wp.data.select( 'core/editor' ).getBlocks();",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving with an array containing all blocks in the document.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/get-available-block-transforms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/get-edited-post-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEditedPostContent",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a promise which resolves with the edited post content (HTML string).",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving with post content markup.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/has-block-switcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/insert-block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertBlock",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Opens the inserter, searches for the given term, then selects the first",
					"long_description": "result that appears.",
					"tags": [
						{
							"name": "param",
							"content": "The text to search the inserter for.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						},
						{
							"name": "param",
							"content": "The inserter panel to open (if it's closed by default).",
							"types": [
								"string"
							],
							"variable": "panelName"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/install-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "installPlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Installs a plugin from the WP.org repository.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "If the plugin is not findable by its slug use an alternative term to search.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/is-current-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isCurrentURL",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "WPPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks if current URL is a WordPress path.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "WPPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Boolean represents whether current URL is or not a WordPress path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/login-user.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loginUser",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "username",
						"default": null,
						"type": "string"
					},
					{
						"name": "password",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs log in with specified username and password.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be used as user credential.",
							"types": [
								"string"
							],
							"variable": "username"
						},
						{
							"name": "param",
							"content": "String to be used as user credential.",
							"types": [
								"string"
							],
							"variable": "password"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/mocks/create-embedding-matcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parameterEquals",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "parameterName",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request has a parameter with a certain value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The query parameter to check.",
							"types": [
								"string"
							],
							"variable": "parameterName"
						},
						{
							"name": "param",
							"content": "The value to check for.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Function that determines if a request's query parameter is the specified value.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createEmbeddingMatcher",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 33,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request is embedding a certain URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to check against a request.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Function that determines if a request is for the embed API, embedding a specific URL.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/mocks/create-json-response.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createJSONResponse",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 14,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mockResponse",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Respond to a request with a JSON response.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The mock object to wrap in a JSON response.",
							"types": [
								"string"
							],
							"variable": "mockResponse"
						},
						{
							"name": "return",
							"content": "Promise that responds to a request with the mock JSON response.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/mocks/create-url-matcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createURLMatcher",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "substring",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request is calling a URL with the substring present.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The substring to check for.",
							"types": [
								"string"
							],
							"variable": "substring"
						},
						{
							"name": "return",
							"content": "Function that determines if a request's URL contains substring.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/mocks/mock-or-transform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "mockOrTransform",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 22,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mockCheck",
						"default": null,
						"type": "function"
					},
					{
						"name": "mock",
						"default": null,
						"type": "Object"
					},
					{
						"name": "responseObjectTransform",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Mocks a request with the supplied mock object, or allows it to run with an optional transform, based on the",
					"long_description": "deserialised JSON response for the request.",
					"tags": [
						{
							"name": "param",
							"content": "function that returns true if the request should be mocked.",
							"types": [
								"function"
							],
							"variable": "mockCheck"
						},
						{
							"name": "param",
							"content": "A mock object to wrap in a JSON response, if the request should be mocked.",
							"types": [
								"Object"
							],
							"variable": "mock"
						},
						{
							"name": "param",
							"content": "An optional function that transforms the response's object before the response is used.",
							"types": [
								"function",
								"undefined"
							],
							"variable": "responseObjectTransform"
						},
						{
							"name": "return",
							"content": "Promise that uses `mockCheck` to see if a request should be mocked with `mock`, and optionally transforms the response with `responseObjectTransform`.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/mocks/set-up-response-mocking.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setUpResponseMocking",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Sets up mock checks and responses. Accepts a list of mock settings with the following properties:",
					"long_description": "  - match: function to check if a request should be mocked.\n  - onRequestMatch: async function to respond to the request.\n\nExample:\n  const MOCK_RESPONSES = [\n    {\n      match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/' ),\n      onRequestMatch: JSONResponse( MOCK_BAD_WORDPRESS_RESPONSE ),\n    },\n    {\n      match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/block-api/attributes/' ),\n      onRequestMatch: JSONResponse( MOCK_EMBED_WORDPRESS_SUCCESS_RESPONSE ),\n    }\n ];\n setUpResponseMocking( MOCK_RESPONSES );\n\nIf none of the mock settings match the request, the request is allowed to continue.",
					"tags": [
						{
							"name": "param",
							"content": "Array of mock settings.",
							"types": [
								"Array"
							],
							"variable": "mocks"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/observe-focus-loss.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "observeFocusLoss",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 5,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Binds to the document on page load which throws an error if a `focusout`",
					"long_description": "event occurs without a related target (i.e. focus loss).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/open-document-settings-sidebar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openDocumentSettingsSidebar",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 8,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clicks on the button in the header which opens Document Settings sidebar when it is closed.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/open-publish-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openPublishPanel",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 8,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Opens the publish panel.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/press-key-times.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "promiseSequence",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "sequence",
						"default": null,
						"type": "Array.<function()>"
					}
				],
				"doc": {
					"description": "Given an array of functions, each returning a promise, performs all",
					"long_description": "promises in sequence (waterfall) order.",
					"tags": [
						{
							"name": "param",
							"content": "Array of promise creators.",
							"types": [
								"Array.<function()>"
							],
							"variable": "sequence"
						},
						{
							"name": "return",
							"content": "Promise resolving once all in the sequence complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_promiseSequence",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 29,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "count",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Presses the given keyboard key a number of times in sequence.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key to press.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Number of times to press.",
							"types": [
								"number"
							],
							"variable": "count"
						},
						{
							"name": "return",
							"content": "Promise resolving when key presses complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/press-key-with-modifier.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "pressKeyWithModifier",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "modifier",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs a key press with modifier (Shift, Control, Meta, Alt), where each modifier",
					"long_description": "is normalized to platform-specific modifier.",
					"tags": [
						{
							"name": "param",
							"content": "Modifier key.",
							"types": [
								"string"
							],
							"variable": "modifier"
						},
						{
							"name": "param",
							"content": "Key to press while modifier held.",
							"types": [
								"string"
							],
							"variable": "key"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/publish-post-with-pre-publish-checks-disabled.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "publishPostWithPrePublishChecksDisabled",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Publishes the post without the pre-publish checks,",
					"long_description": "resolving once the request is complete (once a notice is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when publish is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/publish-post.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "publishPost",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 14,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Publishes the post, resolving once the request is complete (once a notice",
					"long_description": "is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when publish is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/save-draft.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "saveDraft",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Saves the post as a draft, resolving once the request is complete (once the",
					"long_description": "\"Saved\" indicator is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when draft save is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/search-for-block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "searchForBlock",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Search for block in the global inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text to search the inserter for.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/select-block-by-client-id.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "selectBlockByClientId",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given the clientId of a block, selects the block on the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Identified of the block.",
							"types": [
								"string"
							],
							"variable": "clientId"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/set-browser-viewport.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setBrowserViewport",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets browser viewport to specified type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to represent dimensions type; can be either small or large.",
							"types": [
								"string"
							],
							"variable": "type"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/set-post-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setPostContent",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets code editor content",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New code editor content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "return",
							"content": "Promise resolving with an array containing all blocks in the document.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/shared/get-json-response.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getJSONResponse",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "obj",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Get a JSON response for the passed in object, for use with `request.respond`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to seralise for response.",
							"types": [
								"Object"
							],
							"variable": "obj"
						},
						{
							"name": "return",
							"content": "Response for use with `request.respond`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/switch-editor-mode-to.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchEditorModeTo",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mode",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switches editor mode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String editor mode.",
							"types": [
								"string"
							],
							"variable": "mode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/switch-user-to-admin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchUserToAdmin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Switches the current user to the admin user (if the user",
					"long_description": "running the test is not already the admin user).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/switch-user-to-test.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchUserToTest",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Switches the current user to whichever user we should be",
					"long_description": "running the tests as (if we're not already that user).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/toggle-screen-option.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toggleScreenOption",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "label",
						"default": null,
						"type": "string"
					},
					{
						"name": "shouldBeChecked",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Toggles the screen option with the given label.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The label of the screen option, e.g. 'Show Tips'.",
							"types": [
								"string"
							],
							"variable": "label"
						},
						{
							"name": "param",
							"content": "If true, turns the option on. If false, off. If\n                                  undefined, the option will be toggled.",
							"types": [
								"boolean"
							],
							"variable": "shouldBeChecked"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/transform-block-to.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "transformBlockTo",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 8,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts editor's block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/uninstall-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "uninstallPlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Uninstalls a plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/visit-admin-page.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "visitAdminPage",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "adminPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Visits admin page; if user is not logged in then it logging in it first, then visits admin page.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "adminPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/build-module/wait-for-window-dimensions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "waitForWindowDimensions",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 12,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "width",
						"default": null,
						"type": "number"
					},
					{
						"name": "height",
						"default": null,
						"type": "height"
					}
				],
				"doc": {
					"description": "Function that waits until the page viewport has the required dimensions.",
					"long_description": "It is being used to address a problem where after using setViewport the execution may continue,\nwithout the new dimensions being applied.\nhttps://github.com/GoogleChrome/puppeteer/issues/1751",
					"tags": [
						{
							"name": "param",
							"content": "Width of the window.",
							"types": [
								"number"
							],
							"variable": "width"
						},
						{
							"name": "param",
							"content": "Height of the window.",
							"types": [
								"height"
							],
							"variable": "height"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/activate-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "activatePlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Activates an installed plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/are-pre-publish-checks-enabled.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "arePrePublishChecksEnabled",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 5,
				"end_line": 9,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies if publish checks are enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Boolean which represents the state of prepublish checks.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/clear-local-storage.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clearLocalStorage",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 4,
				"end_line": 6,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clears the local storage.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/click-block-appender.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickBlockAppender",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 4,
				"end_line": 6,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clicks the default block appender.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/click-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickButton",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 9,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "buttonText",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Clicks a button based on the text on the button.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text that appears on the button to click.",
							"types": [
								"string"
							],
							"variable": "buttonText"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/click-on-close-modal-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickOnCloseModalButton",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "modalClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Click on the close button of an open modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Class name for the modal to close",
							"types": [
								"string"
							],
							"variable": "modalClassName"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/click-on-more-menu-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clickOnMoreMenuItem",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 11,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "buttonLabel",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Clicks on More Menu item, searches for the button with the text provided and clicks it.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The label to search the button for.",
							"types": [
								"string"
							],
							"variable": "buttonLabel"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/create-new-post.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNewPost",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "obj",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates new post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to create new post, along with tips enabling option.",
							"types": [
								"Object"
							],
							"variable": "obj"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/create-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createURL",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "WPPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates new URL by parsing base URL, WPPath and query string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "WPPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "String which represents full URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/deactivate-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "deactivatePlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Deactivates an active plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/disable-pre-publish-checks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "disablePrePublishChecks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Disables Pre-publish checks.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/enable-page-dialog-accept.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "acceptPageDialog",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 8,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "dialog",
						"default": null,
						"type": "puppeteer.Dialog"
					}
				],
				"doc": {
					"description": "Callback which automatically accepts dialog.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Dialog object dispatched by page via the 'dialog' event.",
							"types": [
								"puppeteer.Dialog"
							],
							"variable": "dialog"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enablePageDialogAccept",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Enables even listener which accepts a page dialog which",
					"long_description": "may appear when navigating away from Gutenberg.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/enable-pre-publish-checks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "enablePrePublishChecks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Enables Pre-publish checks.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/ensure-sidebar-opened.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ensureSidebarOpened",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies that the edit post sidebar is opened, and if it is not, opens it.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving once the edit post sidebar is opened.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/find-sidebar-panel-with-title.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "findSidebarPanelWithTitle",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelTitle",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Finds a sidebar panel with the provided title.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The name of sidebar panel.",
							"types": [
								"string"
							],
							"variable": "panelTitle"
						},
						{
							"name": "return",
							"content": "Object that represents an in-page DOM element.",
							"types": [
								"ElementHandle"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/get-all-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAllBlocks",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an array with all blocks; Equivalent to calling wp.data.select( 'core/editor' ).getBlocks();",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving with an array containing all blocks in the document.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/get-available-block-transforms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/get-edited-post-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEditedPostContent",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a promise which resolves with the edited post content (HTML string).",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving with post content markup.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/has-block-switcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/insert-block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertBlock",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Opens the inserter, searches for the given term, then selects the first",
					"long_description": "result that appears.",
					"tags": [
						{
							"name": "param",
							"content": "The text to search the inserter for.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						},
						{
							"name": "param",
							"content": "The inserter panel to open (if it's closed by default).",
							"types": [
								"string"
							],
							"variable": "panelName"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/install-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "installPlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 14,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					},
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Installs a plugin from the WP.org repository.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						},
						{
							"name": "param",
							"content": "If the plugin is not findable by its slug use an alternative term to search.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/is-current-url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isCurrentURL",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "WPPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks if current URL is a WordPress path.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "WPPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Boolean represents whether current URL is or not a WordPress path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/login-user.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loginUser",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 16,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "username",
						"default": null,
						"type": "string"
					},
					{
						"name": "password",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs log in with specified username and password.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be used as user credential.",
							"types": [
								"string"
							],
							"variable": "username"
						},
						{
							"name": "param",
							"content": "String to be used as user credential.",
							"types": [
								"string"
							],
							"variable": "password"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/mocks/create-embedding-matcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parameterEquals",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "parameterName",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request has a parameter with a certain value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The query parameter to check.",
							"types": [
								"string"
							],
							"variable": "parameterName"
						},
						{
							"name": "param",
							"content": "The value to check for.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Function that determines if a request's query parameter is the specified value.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createEmbeddingMatcher",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 30,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request is embedding a certain URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to check against a request.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Function that determines if a request is for the embed API, embedding a specific URL.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/mocks/create-json-response.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createJSONResponse",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 12,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mockResponse",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Respond to a request with a JSON response.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The mock object to wrap in a JSON response.",
							"types": [
								"string"
							],
							"variable": "mockResponse"
						},
						{
							"name": "return",
							"content": "Promise that responds to a request with the mock JSON response.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/mocks/create-url-matcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createURLMatcher",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 9,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "substring",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Creates a function to determine if a request is calling a URL with the substring present.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The substring to check for.",
							"types": [
								"string"
							],
							"variable": "substring"
						},
						{
							"name": "return",
							"content": "Function that determines if a request's URL contains substring.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/mocks/mock-or-transform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "mockOrTransform",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 20,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mockCheck",
						"default": null,
						"type": "function"
					},
					{
						"name": "mock",
						"default": null,
						"type": "Object"
					},
					{
						"name": "responseObjectTransform",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Mocks a request with the supplied mock object, or allows it to run with an optional transform, based on the",
					"long_description": "deserialised JSON response for the request.",
					"tags": [
						{
							"name": "param",
							"content": "function that returns true if the request should be mocked.",
							"types": [
								"function"
							],
							"variable": "mockCheck"
						},
						{
							"name": "param",
							"content": "A mock object to wrap in a JSON response, if the request should be mocked.",
							"types": [
								"Object"
							],
							"variable": "mock"
						},
						{
							"name": "param",
							"content": "An optional function that transforms the response's object before the response is used.",
							"types": [
								"function",
								"undefined"
							],
							"variable": "responseObjectTransform"
						},
						{
							"name": "return",
							"content": "Promise that uses `mockCheck` to see if a request should be mocked with `mock`, and optionally transforms the response with `responseObjectTransform`.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/mocks/set-up-response-mocking.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setUpResponseMocking",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 33,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Sets up mock checks and responses. Accepts a list of mock settings with the following properties:",
					"long_description": "  - match: function to check if a request should be mocked.\n  - onRequestMatch: async function to respond to the request.\n\nExample:\n  const MOCK_RESPONSES = [\n    {\n      match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/' ),\n      onRequestMatch: JSONResponse( MOCK_BAD_WORDPRESS_RESPONSE ),\n    },\n    {\n      match: isEmbedding( 'https://wordpress.org/gutenberg/handbook/block-api/attributes/' ),\n      onRequestMatch: JSONResponse( MOCK_EMBED_WORDPRESS_SUCCESS_RESPONSE ),\n    }\n ];\n setUpResponseMocking( MOCK_RESPONSES );\n\nIf none of the mock settings match the request, the request is allowed to continue.",
					"tags": [
						{
							"name": "param",
							"content": "Array of mock settings.",
							"types": [
								"Array"
							],
							"variable": "mocks"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/observe-focus-loss.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "observeFocusLoss",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 5,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Binds to the document on page load which throws an error if a `focusout`",
					"long_description": "event occurs without a related target (i.e. focus loss).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/open-document-settings-sidebar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openDocumentSettingsSidebar",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 4,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clicks on the button in the header which opens Document Settings sidebar when it is closed.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/open-publish-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openPublishPanel",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 4,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Opens the publish panel.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/press-key-times.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "promiseSequence",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 14,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "sequence",
						"default": null,
						"type": "Array.<function()>"
					}
				],
				"doc": {
					"description": "Given an array of functions, each returning a promise, performs all",
					"long_description": "promises in sequence (waterfall) order.",
					"tags": [
						{
							"name": "param",
							"content": "Array of promise creators.",
							"types": [
								"Array.<function()>"
							],
							"variable": "sequence"
						},
						{
							"name": "return",
							"content": "Promise resolving once all in the sequence complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "pressKeyTimes",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 29,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "key",
						"default": null,
						"type": "string"
					},
					{
						"name": "count",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Presses the given keyboard key a number of times in sequence.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Key to press.",
							"types": [
								"string"
							],
							"variable": "key"
						},
						{
							"name": "param",
							"content": "Number of times to press.",
							"types": [
								"number"
							],
							"variable": "count"
						},
						{
							"name": "return",
							"content": "Promise resolving when key presses complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/press-key-with-modifier.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "pressKeyWithModifier",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 18,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "modifier",
						"default": null,
						"type": "string"
					},
					{
						"name": "key",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs a key press with modifier (Shift, Control, Meta, Alt), where each modifier",
					"long_description": "is normalized to platform-specific modifier.",
					"tags": [
						{
							"name": "param",
							"content": "Modifier key.",
							"types": [
								"string"
							],
							"variable": "modifier"
						},
						{
							"name": "param",
							"content": "Key to press while modifier held.",
							"types": [
								"string"
							],
							"variable": "key"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/publish-post-with-pre-publish-checks-disabled.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "publishPostWithPrePublishChecksDisabled",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Publishes the post without the pre-publish checks,",
					"long_description": "resolving once the request is complete (once a notice is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when publish is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/publish-post.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "publishPost",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 12,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Publishes the post, resolving once the request is complete (once a notice",
					"long_description": "is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when publish is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/save-draft.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "saveDraft",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Saves the post as a draft, resolving once the request is complete (once the",
					"long_description": "\"Saved\" indicator is displayed).",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving when draft save is complete.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/search-for-block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "searchForBlock",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Search for block in the global inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text to search the inserter for.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/select-block-by-client-id.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "selectBlockByClientId",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 10,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given the clientId of a block, selects the block on the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Identified of the block.",
							"types": [
								"string"
							],
							"variable": "clientId"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/set-browser-viewport.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setBrowserViewport",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 11,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets browser viewport to specified type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to represent dimensions type; can be either small or large.",
							"types": [
								"string"
							],
							"variable": "type"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/set-post-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setPostContent",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets code editor content",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New code editor content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "return",
							"content": "Promise resolving with an array containing all blocks in the document.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/shared/get-json-response.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getJSONResponse",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 7,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "obj",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Get a JSON response for the passed in object, for use with `request.respond`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to seralise for response.",
							"types": [
								"Object"
							],
							"variable": "obj"
						},
						{
							"name": "return",
							"content": "Response for use with `request.respond`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/switch-editor-mode-to.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchEditorModeTo",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mode",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switches editor mode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String editor mode.",
							"types": [
								"string"
							],
							"variable": "mode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/switch-user-to-admin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchUserToAdmin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 11,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Switches the current user to the admin user (if the user",
					"long_description": "running the test is not already the admin user).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/switch-user-to-test.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "switchUserToTest",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 11,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Switches the current user to whichever user we should be",
					"long_description": "running the tests as (if we're not already that user).",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/toggle-screen-option.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toggleScreenOption",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "label",
						"default": null,
						"type": "string"
					},
					{
						"name": "shouldBeChecked",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Toggles the screen option with the given label.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The label of the screen option, e.g. 'Show Tips'.",
							"types": [
								"string"
							],
							"variable": "label"
						},
						{
							"name": "param",
							"content": "If true, turns the option on. If false, off. If\n                                  undefined, the option will be toggled.",
							"types": [
								"boolean"
							],
							"variable": "shouldBeChecked"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/transform-block-to.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "transformBlockTo",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 6,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts editor's block type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "name"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/uninstall-plugin.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "uninstallPlugin",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 13,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "slug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Uninstalls a plugin.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin slug.",
							"types": [
								"string"
							],
							"variable": "slug"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/visit-admin-page.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "visitAdminPage",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 19,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "adminPath",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Visits admin page; if user is not logged in then it logging in it first, then visits admin page.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "String to be serialized as pathname.",
							"types": [
								"string"
							],
							"variable": "adminPath"
						},
						{
							"name": "param",
							"content": "String to be serialized as query portion of URL.",
							"types": [
								"string"
							],
							"variable": "query"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-test-utils/src/wait-for-window-dimensions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "waitForWindowDimensions",
				"namespace": "e2e-test-utils",
				"aliases": [],
				"line": 10,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "width",
						"default": null,
						"type": "number"
					},
					{
						"name": "height",
						"default": null,
						"type": "height"
					}
				],
				"doc": {
					"description": "Function that waits until the page viewport has the required dimensions.",
					"long_description": "It is being used to address a problem where after using setViewport the execution may continue,\nwithout the new dimensions being applied.\nhttps://github.com/GoogleChrome/puppeteer/issues/1751",
					"tags": [
						{
							"name": "param",
							"content": "Width of the window.",
							"types": [
								"number"
							],
							"variable": "width"
						},
						{
							"name": "param",
							"content": "Height of the window.",
							"types": [
								"height"
							],
							"variable": "height"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/e2e-tests/config/setup-test-framework.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "trashExistingPosts",
				"namespace": "e2e-tests",
				"aliases": [],
				"line": 56,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Navigates to the post listing screen and bulk-trashes any posts which exist.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Promise resolving once posts have been trashed.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "capturePageEventsForTearDown",
				"namespace": "e2e-tests",
				"aliases": [],
				"line": 82,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Adds an event listener to the page to handle additions of page event",
					"long_description": "handlers, to assure that they are removed at test teardown.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "removePageEvents",
				"namespace": "e2e-tests",
				"aliases": [],
				"line": 91,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Removes all bound page event handlers.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "observeConsoleLogging",
				"namespace": "e2e-tests",
				"aliases": [],
				"line": 101,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Adds a page event handler to emit uncaught exception to process if one of",
					"long_description": "the observed console logging types is encountered.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/admin-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAdminNotices",
				"namespace": "edit-post",
				"aliases": [],
				"line": 50,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an array of admin notice Elements.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Admin notice elements.",
							"types": [
								"Array.<Element>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNoticeHTML",
				"namespace": "edit-post",
				"aliases": [],
				"line": 64,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given an admin notice Element, returns the relevant notice content HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Admin notice element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Upgraded notice HTML.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNoticeStatus",
				"namespace": "edit-post",
				"aliases": [],
				"line": 111,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given an admin notice Element, returns the upgraded status type, or",
					"long_description": "undefined if one cannot be determined (i.e. one is not assigned).",
					"tags": [
						{
							"name": "param",
							"content": "Admin notice element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Upgraded status type.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/block-settings-menu/plugin-block-settings-menu-group.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/block-settings-menu/plugin-block-settings-menu-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isEverySelectedBlockAllowed",
				"namespace": "edit-post",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "shouldRenderItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 47,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedBlockNames",
						"default": null,
						"type": "Array.<string>"
					},
					{
						"name": "allowedBlockNames",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Plugins may want to add an item to the menu either for every block",
					"long_description": "or only for the specific ones provided in the `allowedBlocks` component property.\n\nIf there are multiple blocks selected the item will be rendered if every block\nis of one allowed type (not necessarily the same).",
					"tags": [
						{
							"name": "param",
							"content": "Array containing the names of the blocks selected",
							"types": [
								"Array.<string>"
							],
							"variable": "selectedBlockNames"
						},
						{
							"name": "param",
							"content": "Array containing the names of the blocks allowed",
							"types": [
								"Array.<string>"
							],
							"variable": "allowedBlockNames"
						},
						{
							"name": "return",
							"content": "Whether the item will be rendered or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/browser-url/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPostEditURL",
				"namespace": "edit-post",
				"aliases": [],
				"line": 39,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the Post's Edit URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "return",
							"content": "Post edit URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPostTrashedURL",
				"namespace": "edit-post",
				"aliases": [],
				"line": 55,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					},
					{
						"name": "postType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the Post's Trashed URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Post Type.",
							"types": [
								"string"
							],
							"variable": "postType"
						},
						{
							"name": "return",
							"content": "Post trashed URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/fullscreen-mode/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/feature-toggle/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FeatureToggle",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/fullscreen-mode-close/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FullscreenModeClose",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/header-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "HeaderToolbar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 33,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Header",
				"namespace": "edit-post",
				"aliases": [],
				"line": 41,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/mode-switcher/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/more-menu/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/options-menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "OptionsMenuItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 20,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/pinned-plugins/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/plugin-more-menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PluginMoreMenuItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 37,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/plugin-sidebar-more-menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PluginSidebarMoreMenuItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/plugins-more-menu-group/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/post-publish-button-or-toggle.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostPublishButtonOrToggle",
				"namespace": "edit-post",
				"aliases": [],
				"line": 28,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/tools-more-menu-group/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/header/writing-menu/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "WritingMenu",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/keyboard-shortcut-help-modal/config.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/keyboard-shortcut-help-modal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/keyboard-shortcuts/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/layout/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Layout",
				"namespace": "edit-post",
				"aliases": [],
				"line": 67,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/meta-boxes/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 31,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/meta-boxes/meta-box-visibility.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/meta-boxes/meta-boxes-area/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/meta-boxes-section.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MetaBoxesSection",
				"namespace": "edit-post",
				"aliases": [],
				"line": 36,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/options/base.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BaseOption",
				"namespace": "edit-post",
				"aliases": [],
				"line": 15,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/options/deferred.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/options/enable-custom-fields.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/options/enable-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/options/enable-publish-sidebar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/options-modal/options/enable-tips.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/discussion-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/featured-image/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Sidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 29,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders a sidebar with its content.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The rendered sidebar.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/last-revision/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "LastRevision",
				"namespace": "edit-post",
				"aliases": [],
				"line": 17,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/page-attributes/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/plugin-post-publish-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/plugin-post-status-info/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/plugin-pre-publish-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/plugin-sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PluginSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 43,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders the plugin sidebar component.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Plugin sidebar component.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-author/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostAuthor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-excerpt/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-format/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostFormat",
				"namespace": "edit-post",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-link/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-pending-status/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostPendingStatus",
				"namespace": "edit-post",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-schedule/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostSchedule",
				"namespace": "edit-post",
				"aliases": [],
				"line": 22,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-status/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-sticky/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostSticky",
				"namespace": "edit-post",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-taxonomies/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTaxonomies",
				"namespace": "edit-post",
				"aliases": [],
				"line": 23,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-taxonomies/taxonomy-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TaxonomyPanel",
				"namespace": "edit-post",
				"aliases": [],
				"line": 25,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-trash/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTrash",
				"namespace": "edit-post",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/post-visibility/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostVisibility",
				"namespace": "edit-post",
				"aliases": [],
				"line": 20,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/settings-header/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SettingsHeader",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/settings-sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SettingsSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 51,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/sidebar/sidebar-header/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SidebarHeader",
				"namespace": "edit-post",
				"aliases": [],
				"line": 35,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/text-editor/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TextEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 25,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/visual-editor/block-inspector-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockInspectorButton",
				"namespace": "edit-post",
				"aliases": [],
				"line": 36,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/components/visual-editor/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "VisualEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 25,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/editor.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Editor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 35,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/hooks/components/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replaceMediaUpload",
				"namespace": "edit-post",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/hooks/components/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createStates",
				"namespace": "edit-post",
				"aliases": [],
				"line": 52,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Create the default states.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/hooks/validate-multiple-use/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getOutboundType",
				"namespace": "edit-post",
				"aliases": [],
				"line": 123,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a base block name, returns the default block type to which to offer",
					"long_description": "transforms.",
					"tags": [
						{
							"name": "param",
							"content": "Base block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The chosen default block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "reinitializeEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 112,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "postId",
						"default": null,
						"type": "Object"
					},
					{
						"name": "target",
						"default": null,
						"type": "Element"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "initialEdits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reinitializes the editor after the user chooses to reboot the editor after",
					"long_description": "an unhandled error occurs, replacing previously mounted editor element using\nan initial state from prior to the crash.",
					"tags": [
						{
							"name": "param",
							"content": "Post type of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postType"
						},
						{
							"name": "param",
							"content": "ID of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "DOM node in which editor is rendered.",
							"types": [
								"Element"
							],
							"variable": "target"
						},
						{
							"name": "param",
							"content": "Editor settings object.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "Programmatic edits to apply initially, to be\n                              considered as non-user-initiated (bypass for\n                              unsaved changes prompt).",
							"types": [
								"Object"
							],
							"variable": "initialEdits"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "initializeEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 140,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					},
					{
						"name": "postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "postId",
						"default": null,
						"type": "Object"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "initialEdits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Initializes and returns an instance of Editor.",
					"long_description": "\nThe return value of this function is not necessary if we change where we\ncall initializeEditor(). This is due to metaBox timing.",
					"tags": [
						{
							"name": "param",
							"content": "Unique identifier for editor instance.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "Post type of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postType"
						},
						{
							"name": "param",
							"content": "ID of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Editor settings object.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "Programmatic edits to apply initially, to be\n                              considered as non-user-initiated (bypass for\n                              unsaved changes prompt).",
							"types": [
								"Object"
							],
							"variable": "initialEdits"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/keyboard-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/plugins/copy-content-menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "CopyContentMenuItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 21,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/plugins/keyboard-shortcuts-help-menu-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "KeyboardShortcutsHelpMenuItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 22,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 30,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened an editor sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Sidebar name to be opened.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closeGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 43,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object signalling that the user closed the sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "openModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 57,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened a modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that uniquely identifies the modal.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closeModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 70,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object signalling that the user closed a modal.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "openPublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 83,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened the publish",
					"long_description": "sidebar.",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closePublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 96,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user closed the",
					"long_description": "publish sidebar.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "togglePublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 108,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user toggles the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEditorPanelEnabled",
				"namespace": "edit-post",
				"aliases": [],
				"line": 122,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to enable or disable a panel in the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to enable or disable.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEditorPanelOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 137,
				"end_line": 142,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to open or close a panel in the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to open or close.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeEditorPanel",
				"namespace": "edit-post",
				"aliases": [],
				"line": 152,
				"end_line": 157,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a panel from the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to remove.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleFeature",
				"namespace": "edit-post",
				"aliases": [],
				"line": 167,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "feature",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle a feature flag.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Feature name.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "togglePinnedPluginItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 189,
				"end_line": 194,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "pluginName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle a plugin name flag.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "pluginName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setAvailableMetaBoxesPerLocation",
				"namespace": "edit-post",
				"aliases": [],
				"line": 205,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "metaBoxesPerLocation",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signaling",
					"long_description": "what Meta boxes are available in which location.",
					"tags": [
						{
							"name": "param",
							"content": "Meta boxes per location.",
							"types": [
								"Object"
							],
							"variable": "metaBoxesPerLocation"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "requestMetaBoxUpdates",
				"namespace": "edit-post",
				"aliases": [],
				"line": 218,
				"end_line": 222,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used to request meta box update.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "metaBoxUpdatesSuccess",
				"namespace": "edit-post",
				"aliases": [],
				"line": 230,
				"end_line": 234,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used signal a successful meta box update.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/effects.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/middlewares.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyMiddlewares",
				"namespace": "edit-post",
				"aliases": [],
				"line": 33,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Applies the custom middlewares used specifically in the editor module.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store Object.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Update Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "activeGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 172,
				"end_line": 182,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "string"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the next active general sidebar state. The active general",
					"long_description": "sidebar is a unique name to identify either an editor or plugin sidebar.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"string"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "activeModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 193,
				"end_line": 206,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer for storing the name of the open modal, or null if no modal is open.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object containing the `name` of the modal",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 237,
				"end_line": 251,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the meta boxes isSaving state.",
					"long_description": "A \"true\" value means the meta boxes saving request is in-flight.",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action Object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "metaBoxLocations",
				"namespace": "edit-post",
				"aliases": [],
				"line": 262,
				"end_line": 272,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the meta boxes per location.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action Object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEditorMode",
				"namespace": "edit-post",
				"aliases": [],
				"line": 43,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current editing mode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Editing mode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 55,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the editor sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the editor sidebar is opened.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPluginSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 67,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the plugin sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the plugin sidebar is opened.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getActiveGeneralSidebarName",
				"namespace": "edit-post",
				"aliases": [],
				"line": 87,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current active general sidebar name, or null if there is no",
					"long_description": "general sidebar active. The active general sidebar is a unique name to\nidentify either an editor or plugin sidebar.\n\nExamples:\n\n - `edit-post/document`\n - `my-plugin/insert-image-sidebar`",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Active general sidebar name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreferences",
				"namespace": "edit-post",
				"aliases": [],
				"line": 106,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the preferences (these preferences are persisted locally).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Preferences Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreference",
				"namespace": "edit-post",
				"aliases": [],
				"line": 119,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "preferenceKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultValue",
						"default": null,
						"type": "Mixed"
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Preference Key.",
							"types": [
								"string"
							],
							"variable": "preferenceKey"
						},
						{
							"name": "param",
							"content": "Default Value.",
							"types": [
								"Mixed"
							],
							"variable": "defaultValue"
						},
						{
							"name": "return",
							"content": "Preference Value.",
							"types": [
								"Mixed"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 133,
				"end_line": 135,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the publish sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the publish sidebar is open.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelRemoved",
				"namespace": "edit-post",
				"aliases": [],
				"line": 147,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel was programmatically removed, or false otherwise.",
					"long_description": "All panels are not removed by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is removed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelEnabled",
				"namespace": "edit-post",
				"aliases": [],
				"line": 161,
				"end_line": 164,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel is enabled, or false otherwise. Panels are",
					"long_description": "enabled by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is enabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 176,
				"end_line": 179,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel is open, or false otherwise. Panels are",
					"long_description": "closed by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is open.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isModalActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 190,
				"end_line": 192,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "modalName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a modal is active, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that uniquely identifies the modal.",
							"types": [
								"string"
							],
							"variable": "modalName"
						},
						{
							"name": "return",
							"content": "Whether the modal is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isFeatureActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 203,
				"end_line": 205,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the given feature is enabled or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Feature slug.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "return",
							"content": "Is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPluginItemPinned",
				"namespace": "edit-post",
				"aliases": [],
				"line": 217,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "pluginName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the plugin item is pinned to the header.",
					"long_description": "When the value is not set it defaults to true.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Plugin item name.",
							"types": [
								"string"
							],
							"variable": "pluginName"
						},
						{
							"name": "return",
							"content": "Whether the plugin item is pinned.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMetaBoxLocationActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 265,
				"end_line": 268,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if there is an active meta box in the given location, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Post editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "Whether the meta box location is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMetaBoxesPerLocation",
				"namespace": "edit-post",
				"aliases": [],
				"line": 279,
				"end_line": 281,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the list of all the available meta boxes for a given location.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "List of meta boxes.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 318,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the Meta Boxes are being saved.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the metaboxes are being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/store/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onChangeListener",
				"namespace": "edit-post",
				"aliases": [],
				"line": 16,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selector",
						"default": null,
						"type": "function"
					},
					{
						"name": "listener",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Given a selector returns a functions that returns the listener only",
					"long_description": "if the returned value from the selector changes.",
					"tags": [
						{
							"name": "param",
							"content": "Selector.",
							"types": [
								"function"
							],
							"variable": "selector"
						},
						{
							"name": "param",
							"content": "Listener.",
							"types": [
								"function"
							],
							"variable": "listener"
						},
						{
							"name": "return",
							"content": "Listener creator.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build/utils/meta-boxes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMetaBoxContainer",
				"namespace": "edit-post",
				"aliases": [],
				"line": 16,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Function returning the current Meta Boxes DOM Node in the editor",
					"long_description": "whether the meta box area is opened or not.\nIf the MetaBox Area is visible returns it, and returns the original container instead.",
					"tags": [
						{
							"name": "param",
							"content": "Meta Box location.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "HTML content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/admin-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAdminNotices",
				"namespace": "edit-post",
				"aliases": [],
				"line": 34,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an array of admin notice Elements.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Admin notice elements.",
							"types": [
								"Array.<Element>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNoticeHTML",
				"namespace": "edit-post",
				"aliases": [],
				"line": 48,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given an admin notice Element, returns the relevant notice content HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Admin notice element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Upgraded notice HTML.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNoticeStatus",
				"namespace": "edit-post",
				"aliases": [],
				"line": 95,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given an admin notice Element, returns the upgraded status type, or",
					"long_description": "undefined if one cannot be determined (i.e. one is not assigned).",
					"tags": [
						{
							"name": "param",
							"content": "Admin notice element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Upgraded status type.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/block-settings-menu/plugin-block-settings-menu-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "shouldRenderItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 35,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedBlockNames",
						"default": null,
						"type": "Array.<string>"
					},
					{
						"name": "allowedBlockNames",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Plugins may want to add an item to the menu either for every block",
					"long_description": "or only for the specific ones provided in the `allowedBlocks` component property.\n\nIf there are multiple blocks selected the item will be rendered if every block\nis of one allowed type (not necessarily the same).",
					"tags": [
						{
							"name": "param",
							"content": "Array containing the names of the blocks selected",
							"types": [
								"Array.<string>"
							],
							"variable": "selectedBlockNames"
						},
						{
							"name": "param",
							"content": "Array containing the names of the blocks allowed",
							"types": [
								"Array.<string>"
							],
							"variable": "allowedBlockNames"
						},
						{
							"name": "return",
							"content": "Whether the item will be rendered or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/browser-url/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPostEditURL",
				"namespace": "edit-post",
				"aliases": [],
				"line": 21,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the Post's Edit URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "return",
							"content": "Post edit URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPostTrashedURL",
				"namespace": "edit-post",
				"aliases": [],
				"line": 36,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					},
					{
						"name": "postType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the Post's Trashed URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Post Type.",
							"types": [
								"string"
							],
							"variable": "postType"
						},
						{
							"name": "return",
							"content": "Post trashed URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/header/mode-switcher/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/discussion-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/featured-image/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Sidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 20,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders a sidebar with its content.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The rendered sidebar.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/page-attributes/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/plugin-sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PluginSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders the plugin sidebar component.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Plugin sidebar component.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/post-excerpt/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/post-link/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/components/sidebar/post-status/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/hooks/components/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createStates",
				"namespace": "edit-post",
				"aliases": [],
				"line": 35,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Create the default states.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/hooks/validate-multiple-use/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getOutboundType",
				"namespace": "edit-post",
				"aliases": [],
				"line": 109,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a base block name, returns the default block type to which to offer",
					"long_description": "transforms.",
					"tags": [
						{
							"name": "param",
							"content": "Base block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The chosen default block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "reinitializeEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 36,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "postId",
						"default": null,
						"type": "Object"
					},
					{
						"name": "target",
						"default": null,
						"type": "Element"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "initialEdits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reinitializes the editor after the user chooses to reboot the editor after",
					"long_description": "an unhandled error occurs, replacing previously mounted editor element using\nan initial state from prior to the crash.",
					"tags": [
						{
							"name": "param",
							"content": "Post type of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postType"
						},
						{
							"name": "param",
							"content": "ID of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "DOM node in which editor is rendered.",
							"types": [
								"Element"
							],
							"variable": "target"
						},
						{
							"name": "param",
							"content": "Editor settings object.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "Programmatic edits to apply initially, to be\n                              considered as non-user-initiated (bypass for\n                              unsaved changes prompt).",
							"types": [
								"Object"
							],
							"variable": "initialEdits"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "initializeEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 63,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					},
					{
						"name": "postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "postId",
						"default": null,
						"type": "Object"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "initialEdits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Initializes and returns an instance of Editor.",
					"long_description": "\nThe return value of this function is not necessary if we change where we\ncall initializeEditor(). This is due to metaBox timing.",
					"tags": [
						{
							"name": "param",
							"content": "Unique identifier for editor instance.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "Post type of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postType"
						},
						{
							"name": "param",
							"content": "ID of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Editor settings object.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "Programmatic edits to apply initially, to be\n                              considered as non-user-initiated (bypass for\n                              unsaved changes prompt).",
							"types": [
								"Object"
							],
							"variable": "initialEdits"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 8,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened an editor sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Sidebar name to be opened.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closeGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 20,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object signalling that the user closed the sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "openModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 33,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened a modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that uniquely identifies the modal.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closeModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 45,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object signalling that the user closed a modal.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "openPublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 57,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened the publish",
					"long_description": "sidebar.",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closePublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 69,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user closed the",
					"long_description": "publish sidebar.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "togglePublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 80,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user toggles the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEditorPanelEnabled",
				"namespace": "edit-post",
				"aliases": [],
				"line": 93,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to enable or disable a panel in the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to enable or disable.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEditorPanelOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 107,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to open or close a panel in the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to open or close.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeEditorPanel",
				"namespace": "edit-post",
				"aliases": [],
				"line": 121,
				"end_line": 126,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a panel from the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to remove.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleFeature",
				"namespace": "edit-post",
				"aliases": [],
				"line": 135,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "feature",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle a feature flag.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Feature name.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "togglePinnedPluginItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 155,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "pluginName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle a plugin name flag.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "pluginName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setAvailableMetaBoxesPerLocation",
				"namespace": "edit-post",
				"aliases": [],
				"line": 170,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "metaBoxesPerLocation",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signaling",
					"long_description": "what Meta boxes are available in which location.",
					"tags": [
						{
							"name": "param",
							"content": "Meta boxes per location.",
							"types": [
								"Object"
							],
							"variable": "metaBoxesPerLocation"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "requestMetaBoxUpdates",
				"namespace": "edit-post",
				"aliases": [],
				"line": 182,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used to request meta box update.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "metaBoxUpdatesSuccess",
				"namespace": "edit-post",
				"aliases": [],
				"line": 193,
				"end_line": 197,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used signal a successful meta box update.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/store/middlewares.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyMiddlewares",
				"namespace": "edit-post",
				"aliases": [],
				"line": 21,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Applies the custom middlewares used specifically in the editor module.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store Object.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Update Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "removedPanels",
				"namespace": "edit-post",
				"aliases": [],
				"line": 124,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer storing the list of all programmatically removed panels.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "activeGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 148,
				"end_line": 158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "string"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the next active general sidebar state. The active general",
					"long_description": "sidebar is a unique name to identify either an editor or plugin sidebar.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"string"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "activeModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 168,
				"end_line": 181,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer for storing the name of the open modal, or null if no modal is open.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object containing the `name` of the modal",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 210,
				"end_line": 224,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the meta boxes isSaving state.",
					"long_description": "A \"true\" value means the meta boxes saving request is in-flight.",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action Object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "metaBoxLocations",
				"namespace": "edit-post",
				"aliases": [],
				"line": 234,
				"end_line": 244,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the meta boxes per location.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action Object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEditorMode",
				"namespace": "edit-post",
				"aliases": [],
				"line": 14,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current editing mode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Editing mode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 25,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the editor sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the editor sidebar is opened.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPluginSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 36,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the plugin sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the plugin sidebar is opened.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getActiveGeneralSidebarName",
				"namespace": "edit-post",
				"aliases": [],
				"line": 55,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current active general sidebar name, or null if there is no",
					"long_description": "general sidebar active. The active general sidebar is a unique name to\nidentify either an editor or plugin sidebar.\n\nExamples:\n\n - `edit-post/document`\n - `my-plugin/insert-image-sidebar`",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Active general sidebar name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreferences",
				"namespace": "edit-post",
				"aliases": [],
				"line": 73,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the preferences (these preferences are persisted locally).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Preferences Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreference",
				"namespace": "edit-post",
				"aliases": [],
				"line": 85,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "preferenceKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultValue",
						"default": null,
						"type": "Mixed"
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Preference Key.",
							"types": [
								"string"
							],
							"variable": "preferenceKey"
						},
						{
							"name": "param",
							"content": "Default Value.",
							"types": [
								"Mixed"
							],
							"variable": "defaultValue"
						},
						{
							"name": "return",
							"content": "Preference Value.",
							"types": [
								"Mixed"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 98,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the publish sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the publish sidebar is open.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelRemoved",
				"namespace": "edit-post",
				"aliases": [],
				"line": 111,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel was programmatically removed, or false otherwise.",
					"long_description": "All panels are not removed by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is removed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelEnabled",
				"namespace": "edit-post",
				"aliases": [],
				"line": 124,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel is enabled, or false otherwise. Panels are",
					"long_description": "enabled by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is enabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 138,
				"end_line": 141,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel is open, or false otherwise. Panels are",
					"long_description": "closed by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is open.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isModalActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 151,
				"end_line": 153,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "modalName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a modal is active, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that uniquely identifies the modal.",
							"types": [
								"string"
							],
							"variable": "modalName"
						},
						{
							"name": "return",
							"content": "Whether the modal is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isFeatureActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 163,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the given feature is enabled or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Feature slug.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "return",
							"content": "Is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPluginItemPinned",
				"namespace": "edit-post",
				"aliases": [],
				"line": 176,
				"end_line": 179,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "pluginName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the plugin item is pinned to the header.",
					"long_description": "When the value is not set it defaults to true.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Plugin item name.",
							"types": [
								"string"
							],
							"variable": "pluginName"
						},
						{
							"name": "return",
							"content": "Whether the plugin item is pinned.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMetaBoxLocationVisible",
				"namespace": "edit-post",
				"aliases": [],
				"line": 204,
				"end_line": 209,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a metabox location is active and visible",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "Whether the meta box location is active and visible.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMetaBoxLocationActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 220,
				"end_line": 223,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if there is an active meta box in the given location, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Post editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "Whether the meta box location is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMetaBoxesPerLocation",
				"namespace": "edit-post",
				"aliases": [],
				"line": 233,
				"end_line": 235,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the list of all the available meta boxes for a given location.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "List of meta boxes.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 257,
				"end_line": 259,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is using Meta Boxes",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether there are metaboxes or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 268,
				"end_line": 270,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the Meta Boxes are being saved.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the metaboxes are being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/store/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/build-module/utils/meta-boxes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/admin-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAdminNotices",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an array of admin notice Elements.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Admin notice elements.",
							"types": [
								"Array.<Element>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNoticeHTML",
				"namespace": "edit-post",
				"aliases": [],
				"line": 40,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given an admin notice Element, returns the relevant notice content HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Admin notice element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Upgraded notice HTML.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNoticeStatus",
				"namespace": "edit-post",
				"aliases": [],
				"line": 65,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Given an admin notice Element, returns the upgraded status type, or",
					"long_description": "undefined if one cannot be determined (i.e. one is not assigned).",
					"tags": [
						{
							"name": "param",
							"content": "Admin notice element.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Upgraded status type.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/block-settings-menu/plugin-block-settings-menu-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "shouldRenderItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 30,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedBlockNames",
						"default": null,
						"type": "Array.<string>"
					},
					{
						"name": "allowedBlockNames",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Plugins may want to add an item to the menu either for every block",
					"long_description": "or only for the specific ones provided in the `allowedBlocks` component property.\n\nIf there are multiple blocks selected the item will be rendered if every block\nis of one allowed type (not necessarily the same).",
					"tags": [
						{
							"name": "param",
							"content": "Array containing the names of the blocks selected",
							"types": [
								"Array.<string>"
							],
							"variable": "selectedBlockNames"
						},
						{
							"name": "param",
							"content": "Array containing the names of the blocks allowed",
							"types": [
								"Array.<string>"
							],
							"variable": "allowedBlockNames"
						},
						{
							"name": "return",
							"content": "Whether the item will be rendered or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/browser-url/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPostEditURL",
				"namespace": "edit-post",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the Post's Edit URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "return",
							"content": "Post edit URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPostTrashedURL",
				"namespace": "edit-post",
				"aliases": [],
				"line": 27,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					},
					{
						"name": "postType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the Post's Trashed URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Post Type.",
							"types": [
								"string"
							],
							"variable": "postType"
						},
						{
							"name": "return",
							"content": "Post trashed URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setTrashURL",
				"namespace": "edit-post\\BrowserURL",
				"aliases": [],
				"line": 64,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					},
					{
						"name": "postType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Navigates the browser to the post trashed URL to show a notice about the trashed post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post ID.",
							"types": [
								"number"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Post Type.",
							"types": [
								"string"
							],
							"variable": "postType"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setBrowserURL",
				"namespace": "edit-post\\BrowserURL",
				"aliases": [],
				"line": 77,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postId",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Replaces the browser URL with a post editor link for the given post ID.",
					"long_description": "\nNote it is important that, since this function may be called when the\neditor first loads, the result generated `getPostEditURL` matches that\nproduced by the server. Otherwise, the URL will change unexpectedly.",
					"tags": [
						{
							"name": "param",
							"content": "Post ID for which to generate post editor URL.",
							"types": [
								"number"
							],
							"variable": "postId"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/header/mode-switcher/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/discussion-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/featured-image/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Sidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 15,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Renders a sidebar with its content.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The rendered sidebar.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/page-attributes/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/plugin-sidebar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PluginSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 25,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders the plugin sidebar component.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Plugin sidebar component.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/post-excerpt/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/post-link/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/components/sidebar/post-status/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/hooks/components/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createStates",
				"namespace": "edit-post",
				"aliases": [],
				"line": 30,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Create the default states.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/hooks/validate-multiple-use/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getOutboundType",
				"namespace": "edit-post",
				"aliases": [],
				"line": 113,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a base block name, returns the default block type to which to offer",
					"long_description": "transforms.",
					"tags": [
						{
							"name": "param",
							"content": "Base block name.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "return",
							"content": "The chosen default block type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "reinitializeEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 34,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "postId",
						"default": null,
						"type": "Object"
					},
					{
						"name": "target",
						"default": null,
						"type": "Element"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "initialEdits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reinitializes the editor after the user chooses to reboot the editor after",
					"long_description": "an unhandled error occurs, replacing previously mounted editor element using\nan initial state from prior to the crash.",
					"tags": [
						{
							"name": "param",
							"content": "Post type of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postType"
						},
						{
							"name": "param",
							"content": "ID of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "DOM node in which editor is rendered.",
							"types": [
								"Element"
							],
							"variable": "target"
						},
						{
							"name": "param",
							"content": "Editor settings object.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "Programmatic edits to apply initially, to be\n                              considered as non-user-initiated (bypass for\n                              unsaved changes prompt).",
							"types": [
								"Object"
							],
							"variable": "initialEdits"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "initializeEditor",
				"namespace": "edit-post",
				"aliases": [],
				"line": 65,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					},
					{
						"name": "postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "postId",
						"default": null,
						"type": "Object"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "initialEdits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Initializes and returns an instance of Editor.",
					"long_description": "\nThe return value of this function is not necessary if we change where we\ncall initializeEditor(). This is due to metaBox timing.",
					"tags": [
						{
							"name": "param",
							"content": "Unique identifier for editor instance.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "Post type of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postType"
						},
						{
							"name": "param",
							"content": "ID of the post to edit.",
							"types": [
								"Object"
							],
							"variable": "postId"
						},
						{
							"name": "param",
							"content": "Editor settings object.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "Programmatic edits to apply initially, to be\n                              considered as non-user-initiated (bypass for\n                              unsaved changes prompt).",
							"types": [
								"Object"
							],
							"variable": "initialEdits"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "openGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 8,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened an editor sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Sidebar name to be opened.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closeGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 20,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object signalling that the user closed the sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "openModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 33,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened a modal.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that uniquely identifies the modal.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closeModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 45,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object signalling that the user closed a modal.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "openPublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 57,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user opened the publish",
					"long_description": "sidebar.",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "closePublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 69,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user closed the",
					"long_description": "publish sidebar.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "togglePublishSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 80,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user toggles the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEditorPanelEnabled",
				"namespace": "edit-post",
				"aliases": [],
				"line": 93,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to enable or disable a panel in the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to enable or disable.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEditorPanelOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 107,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to open or close a panel in the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to open or close.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeEditorPanel",
				"namespace": "edit-post",
				"aliases": [],
				"line": 121,
				"end_line": 126,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a panel from the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string that identifies the panel to remove.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleFeature",
				"namespace": "edit-post",
				"aliases": [],
				"line": 135,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "feature",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle a feature flag.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Feature name.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "togglePinnedPluginItem",
				"namespace": "edit-post",
				"aliases": [],
				"line": 156,
				"end_line": 161,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "pluginName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle a plugin name flag.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "pluginName"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setAvailableMetaBoxesPerLocation",
				"namespace": "edit-post",
				"aliases": [],
				"line": 171,
				"end_line": 176,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "metaBoxesPerLocation",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signaling",
					"long_description": "what Meta boxes are available in which location.",
					"tags": [
						{
							"name": "param",
							"content": "Meta boxes per location.",
							"types": [
								"Object"
							],
							"variable": "metaBoxesPerLocation"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "requestMetaBoxUpdates",
				"namespace": "edit-post",
				"aliases": [],
				"line": 183,
				"end_line": 187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used to request meta box update.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "metaBoxUpdatesSuccess",
				"namespace": "edit-post",
				"aliases": [],
				"line": 194,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used signal a successful meta box update.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/store/middlewares.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyMiddlewares",
				"namespace": "edit-post",
				"aliases": [],
				"line": 19,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Applies the custom middlewares used specifically in the editor module.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store Object.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Update Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "removedPanels",
				"namespace": "edit-post",
				"aliases": [],
				"line": 116,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer storing the list of all programmatically removed panels.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "activeGeneralSidebar",
				"namespace": "edit-post",
				"aliases": [],
				"line": 139,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "string"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the next active general sidebar state. The active general",
					"long_description": "sidebar is a unique name to identify either an editor or plugin sidebar.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"string"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "activeModal",
				"namespace": "edit-post",
				"aliases": [],
				"line": 156,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer for storing the name of the open modal, or null if no modal is open.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object containing the `name` of the modal",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 189,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the meta boxes isSaving state.",
					"long_description": "A \"true\" value means the meta boxes saving request is in-flight.",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action Object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "metaBoxLocations",
				"namespace": "edit-post",
				"aliases": [],
				"line": 208,
				"end_line": 215,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer keeping track of the meta boxes per location.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Previous state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action Object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getEditorMode",
				"namespace": "edit-post",
				"aliases": [],
				"line": 14,
				"end_line": 16,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current editing mode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Editing mode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 25,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the editor sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the editor sidebar is opened.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPluginSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 37,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the plugin sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the plugin sidebar is opened.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getActiveGeneralSidebarName",
				"namespace": "edit-post",
				"aliases": [],
				"line": 56,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current active general sidebar name, or null if there is no",
					"long_description": "general sidebar active. The active general sidebar is a unique name to\nidentify either an editor or plugin sidebar.\n\nExamples:\n\n - `edit-post/document`\n - `my-plugin/insert-image-sidebar`",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Active general sidebar name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreferences",
				"namespace": "edit-post",
				"aliases": [],
				"line": 73,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the preferences (these preferences are persisted locally).",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Preferences Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreference",
				"namespace": "edit-post",
				"aliases": [],
				"line": 85,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "preferenceKey",
						"default": null,
						"type": "string"
					},
					{
						"name": "defaultValue",
						"default": null,
						"type": "Mixed"
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Preference Key.",
							"types": [
								"string"
							],
							"variable": "preferenceKey"
						},
						{
							"name": "param",
							"content": "Default Value.",
							"types": [
								"Mixed"
							],
							"variable": "defaultValue"
						},
						{
							"name": "return",
							"content": "Preference Value.",
							"types": [
								"Mixed"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishSidebarOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 98,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the publish sidebar is opened.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the publish sidebar is open.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelRemoved",
				"namespace": "edit-post",
				"aliases": [],
				"line": 111,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel was programmatically removed, or false otherwise.",
					"long_description": "All panels are not removed by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is removed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelEnabled",
				"namespace": "edit-post",
				"aliases": [],
				"line": 124,
				"end_line": 129,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel is enabled, or false otherwise. Panels are",
					"long_description": "enabled by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is enabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditorPanelOpened",
				"namespace": "edit-post",
				"aliases": [],
				"line": 140,
				"end_line": 143,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "panelName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given panel is open, or false otherwise. Panels are",
					"long_description": "closed by default.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that identifies the panel.",
							"types": [
								"string"
							],
							"variable": "panelName"
						},
						{
							"name": "return",
							"content": "Whether or not the panel is open.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isModalActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 153,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "modalName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a modal is active, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string that uniquely identifies the modal.",
							"types": [
								"string"
							],
							"variable": "modalName"
						},
						{
							"name": "return",
							"content": "Whether the modal is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isFeatureActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 165,
				"end_line": 167,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "feature",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether the given feature is enabled or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Feature slug.",
							"types": [
								"string"
							],
							"variable": "feature"
						},
						{
							"name": "return",
							"content": "Is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPluginItemPinned",
				"namespace": "edit-post",
				"aliases": [],
				"line": 178,
				"end_line": 182,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "pluginName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the plugin item is pinned to the header.",
					"long_description": "When the value is not set it defaults to true.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Plugin item name.",
							"types": [
								"string"
							],
							"variable": "pluginName"
						},
						{
							"name": "return",
							"content": "Whether the plugin item is pinned.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMetaBoxLocationVisible",
				"namespace": "edit-post",
				"aliases": [],
				"line": 209,
				"end_line": 216,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a metabox location is active and visible",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "Whether the meta box location is active and visible.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMetaBoxLocationActive",
				"namespace": "edit-post",
				"aliases": [],
				"line": 227,
				"end_line": 230,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if there is an active meta box in the given location, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Post editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "Whether the meta box location is active.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMetaBoxesPerLocation",
				"namespace": "edit-post",
				"aliases": [],
				"line": 240,
				"end_line": 242,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "location",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the list of all the available meta boxes for a given location.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Meta box location to test.",
							"types": [
								"string"
							],
							"variable": "location"
						},
						{
							"name": "return",
							"content": "List of meta boxes.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 267,
				"end_line": 269,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is using Meta Boxes",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether there are metaboxes or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingMetaBoxes",
				"namespace": "edit-post",
				"aliases": [],
				"line": 278,
				"end_line": 280,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the Meta Boxes are being saved.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the metaboxes are being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/store/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/edit-post/src/utils/meta-boxes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/alignment-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/autocomplete/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withFilteredAutocompleters",
				"namespace": "editor",
				"aliases": [],
				"line": 70,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "Autocomplete",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Wrap the default Autocomplete component with one that",
					"long_description": "supports a filter hook for customizing its list of autocompleters.\n\nSince there may be many Autocomplete instances at one time, this component\napplies the filter on demand, when the component is first focused after\nreceiving a new list of completers.\n\nThis function is exported for unit test.",
					"tags": [
						{
							"name": "param",
							"content": "Original component.",
							"types": [
								"function"
							],
							"variable": "Autocomplete"
						},
						{
							"name": "return",
							"content": "Wrapped component",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/autocompleters/block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "defaultGetBlockInsertionParentClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the client ID of the parent where a newly inserted block would be",
					"long_description": "placed.",
					"tags": [
						{
							"name": "return",
							"content": "Client ID of the parent where a newly inserted block would\n                 be placed.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "defaultGetInserterItems",
				"namespace": "editor",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the inserter items for the specified parent block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the block for which to retrieve\n                             inserter items.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "The inserter items for the specified\n                                     parent.",
							"types": [
								"Array.<Editor.InserterItem>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "defaultGetSelectedBlockName",
				"namespace": "editor",
				"aliases": [],
				"line": 61,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the name of the currently selected block.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The name of the currently selected block or `null` if no\n                  block is selected.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockCompleter",
				"namespace": "editor",
				"aliases": [],
				"line": 76,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Creates a blocks repeater for replacing the current block with a selected block type.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "A blocks completer.",
							"types": [
								"Completer"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/autocompleters/user.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/autosave-monitor/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-actions/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockActions",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-alignment-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-compare/block-view.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockView",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-compare/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-controls/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-draggable/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockDraggable",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-drop-zone/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "parseDropEvent",
				"namespace": "editor",
				"aliases": [],
				"line": 47,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-edit/context.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withBlockEditContext",
				"namespace": "editor",
				"aliases": [],
				"line": 47,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapContextToProps",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "A Higher Order Component used to inject BlockEdit context to the",
					"long_description": "wrapped component.",
					"tags": [
						{
							"name": "param",
							"content": "Function called on every context change,\n                                    expected to return object of props to\n                                    merge with the component's own props.",
							"types": [
								"function"
							],
							"variable": "mapContextToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with injected context as props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-edit/edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Edit",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-edit/edit.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Edit",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-edit/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-format-controls/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-icon/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockIcon",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-inspector/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockInspector",
				"namespace": "editor",
				"aliases": [],
				"line": 45,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block-contextual-toolbar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockContextualToolbar",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block-crash-boundary.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block-crash-warning.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block-html.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block-invalid-warning.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block-mobile-toolbar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockMobileToolbar",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/breadcrumb.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/hover-area.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "forceSyncUpdates",
				"namespace": "editor",
				"aliases": [],
				"line": 51,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/insertion-point.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list/multi-controls.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockListMultiControls",
				"namespace": "editor",
				"aliases": [],
				"line": 29,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-list-appender/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockListAppender",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-mover/drag-handle.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "IconDragHandle",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-mover/icons.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-mover/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-mover/mover-description.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockMoverDescription",
				"namespace": "editor",
				"aliases": [],
				"line": 29,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "firstIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "isFirst",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "isLast",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "dir",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Return a label for the block movement controls depending on block position.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Number of blocks selected.",
							"types": [
								"number"
							],
							"variable": "selectedCount"
						},
						{
							"name": "param",
							"content": "Block type - in the case of a single block, should\n                                define its 'type'. I.e. 'Text', 'Heading', 'Image' etc.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "The index (position - 1) of the first block selected.",
							"types": [
								"number"
							],
							"variable": "firstIndex"
						},
						{
							"name": "param",
							"content": "This is the first block.",
							"types": [
								"boolean"
							],
							"variable": "isFirst"
						},
						{
							"name": "param",
							"content": "This is the last block.",
							"types": [
								"boolean"
							],
							"variable": "isLast"
						},
						{
							"name": "param",
							"content": "Direction of movement (> 0 is considered to be going\n                                down, < 0 is up).",
							"types": [
								"number"
							],
							"variable": "dir"
						},
						{
							"name": "return",
							"content": "Label for the block movement controls.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiBlockMoverDescription",
				"namespace": "editor",
				"aliases": [],
				"line": 79,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "firstIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "isFirst",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "isLast",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "dir",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Return a label for the block movement controls depending on block position.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Number of blocks selected.",
							"types": [
								"number"
							],
							"variable": "selectedCount"
						},
						{
							"name": "param",
							"content": "The index (position - 1) of the first block selected.",
							"types": [
								"number"
							],
							"variable": "firstIndex"
						},
						{
							"name": "param",
							"content": "This is the first block.",
							"types": [
								"boolean"
							],
							"variable": "isFirst"
						},
						{
							"name": "param",
							"content": "This is the last block.",
							"types": [
								"boolean"
							],
							"variable": "isLast"
						},
						{
							"name": "param",
							"content": "Direction of movement (> 0 is considered to be going\n                                down, < 0 is up).",
							"types": [
								"number"
							],
							"variable": "dir"
						},
						{
							"name": "return",
							"content": "Label for the block movement controls.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-navigation/dropdown.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-navigation/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockNavigationList",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-preview/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockPreview",
				"namespace": "editor",
				"aliases": [],
				"line": 42,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Block Preview Component: It renders a preview given a block name and attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Rendered element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-selection-clearer/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/block-convert-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockConvertButton",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/block-html-convert-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/block-mode-toggle.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockModeToggle",
				"namespace": "editor",
				"aliases": [],
				"line": 30,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/block-settings-menu-first-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/block-settings-menu-plugins-extension.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/block-unknown-convert-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockSettingsMenu",
				"namespace": "editor",
				"aliases": [],
				"line": 52,
				"end_line": 147,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/reusable-block-convert-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ReusableBlockConvertButton",
				"namespace": "editor",
				"aliases": [],
				"line": 30,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-settings-menu/reusable-block-delete-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ReusableBlockDeleteButton",
				"namespace": "editor",
				"aliases": [],
				"line": 30,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getActiveStyle",
				"namespace": "editor",
				"aliases": [],
				"line": 56,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					},
					{
						"name": "className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the active style from the given className.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block style variations.",
							"types": [
								"Array"
							],
							"variable": "styles"
						},
						{
							"name": "param",
							"content": "Class name",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "return",
							"content": "The active style.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceActiveStyle",
				"namespace": "editor",
				"aliases": [],
				"line": 106,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "className",
						"default": null,
						"type": "string"
					},
					{
						"name": "activeStyle",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newStyle",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Replaces the active style in the block's className.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Class name.",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "param",
							"content": "The replaced style.",
							"types": [
								"Object"
							],
							"variable": "activeStyle"
						},
						{
							"name": "param",
							"content": "The replacing style.",
							"types": [
								"Object"
							],
							"variable": "newStyle"
						},
						{
							"name": "return",
							"content": "The updated className.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-switcher/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-switcher/multi-blocks-switcher.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MultiBlocksSwitcher",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-title/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockTitle",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Renders the block's configured title as a string, or empty if the title",
					"long_description": "cannot be determined.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "props.name"
						},
						{
							"name": "return",
							"content": "Block title.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockToolbar",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/block-types-list/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockTypesList",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/color-palette/control.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/color-palette/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/color-palette/with-color-context.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/colors/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getColorObjectByAttributeValues",
				"namespace": "editor",
				"aliases": [],
				"line": 32,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colors",
						"default": null,
						"type": "Array"
					},
					{
						"name": "definedColor",
						"default": null,
						"type": "string"
					},
					{
						"name": "customColor",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Provided an array of color objects as set by the theme or by the editor defaults,",
					"long_description": "and the values of the defined color or custom color returns a color object describing the color.",
					"tags": [
						{
							"name": "param",
							"content": "Array of color objects as set by the theme or by the editor defaults.",
							"types": [
								"Array"
							],
							"variable": "colors"
						},
						{
							"name": "param",
							"content": "A string containing the color slug.",
							"types": [
								"string"
							],
							"variable": "definedColor"
						},
						{
							"name": "param",
							"content": "A string containing the customColor value.",
							"types": [
								"string"
							],
							"variable": "customColor"
						},
						{
							"name": "return",
							"content": "If definedColor is passed and the name is found in colors,\n                  the color object exactly as set by the theme or editor defaults is returned.\n                  Otherwise, an object that just sets the color is defined.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMostReadableColor",
				"namespace": "editor",
				"aliases": [],
				"line": 94,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colors",
						"default": null,
						"type": "Array"
					},
					{
						"name": "colorValue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an array of color objects and a color value returns the color value of the most readable color in the array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of color objects as set by the theme or by the editor defaults.",
							"types": [
								"Array"
							],
							"variable": "colors"
						},
						{
							"name": "param",
							"content": "A string containing the color value.",
							"types": [
								"string"
							],
							"variable": "colorValue"
						},
						{
							"name": "return",
							"content": "String with the color value of the most readable color.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/colors/with-colors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withCustomColorPalette",
				"namespace": "editor",
				"aliases": [],
				"line": 60,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorsArray",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Higher order component factory for injecting the `colorsArray` argument as",
					"long_description": "the colors prop in the `withCustomColors` HOC.",
					"tags": [
						{
							"name": "param",
							"content": "An array of color objects.",
							"types": [
								"Array"
							],
							"variable": "colorsArray"
						},
						{
							"name": "return",
							"content": "The higher order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withEditorColorPalette",
				"namespace": "editor",
				"aliases": [],
				"line": 77,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Higher order component factory for injecting the editor colors as the",
					"long_description": "`colors` prop in the `withColors` HOC.",
					"tags": [
						{
							"name": "return",
							"content": "The higher order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createColorHOC",
				"namespace": "editor",
				"aliases": [],
				"line": 96,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "withColorPalette",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Helper function used with `createHigherOrderComponent` to create",
					"long_description": "higher order components for managing color logic.",
					"tags": [
						{
							"name": "param",
							"content": "An array of color types (e.g. 'backgroundColor, borderColor).",
							"types": [
								"Array"
							],
							"variable": "colorTypes"
						},
						{
							"name": "param",
							"content": "A HOC for injecting the 'colors' prop into the WrappedComponent.",
							"types": [
								"function"
							],
							"variable": "withColorPalette"
						},
						{
							"name": "return",
							"content": "The component that can be used as a HOC.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createCustomColorsHOC",
				"namespace": "editor",
				"aliases": [],
				"line": 215,
				"end_line": 225,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorsArray",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "A higher-order component factory for creating a 'withCustomColors' HOC, which handles color logic",
					"long_description": "for class generation color value, retrieval and color attribute setting.\n\nUse this higher-order component to work with a custom set of colors.",
					"tags": [
						{
							"name": "param",
							"content": "The array of color objects (name, slug, color, etc... ).",
							"types": [
								"Array"
							],
							"variable": "colorsArray"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withColors",
				"namespace": "editor",
				"aliases": [],
				"line": 252,
				"end_line": 260,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorTypes",
						"default": null,
						"type": "object"
					}
				],
				"doc": {
					"description": "A higher-order component, which handles color logic for class generation color value, retrieval and color attribute setting.",
					"long_description": "\nFor use with the default editor/theme color palette.",
					"tags": [
						{
							"name": "param",
							"content": "The arguments can be strings or objects. If the argument is an object,\n                                       it should contain the color attribute name as key and the color context as value.\n                                       If the argument is a string the value should be the color attribute name,\n                                       the color context is computed by applying a kebab case transform to the value.\n                                       Color context represents the context/place where the color is going to be used.\n                                       The class name of the color is generated using 'has' followed by the color name\n                                       and ending with the color context all in kebab case e.g: has-green-background-color.",
							"types": [
								"object",
								"string"
							],
							"variable": "colorTypes"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/contrast-checker/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ContrastChecker",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/copy-handler/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/default-block-appender/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "DefaultBlockAppender",
				"namespace": "editor",
				"aliases": [],
				"line": 42,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/default-block-appender/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "DefaultBlockAppender",
				"namespace": "editor",
				"aliases": [],
				"line": 32,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/document-outline/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "DocumentOutlineCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 19,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/document-outline/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "computeOutlineHeadings",
				"namespace": "editor",
				"aliases": [],
				"line": 72,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an array of heading blocks enhanced with the following properties:",
					"long_description": "path    - An array of blocks that are ancestors of the heading starting from a top-level node.\n          Can be an empty array if the heading is a top-level node (is not nested inside another block).\nlevel   - An integer with the heading level.\nisEmpty - Flag indicating if the heading has no content.",
					"tags": [
						{
							"name": "param",
							"content": "An array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "An array of blocks that are ancestors of the blocks passed as blocks.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "An array of heading blocks enhanced with the properties described above.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/document-outline/item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TableOfContentsItem",
				"namespace": "editor",
				"aliases": [],
				"line": 29,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/editor-history/redo.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EditorHistoryRedo",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/editor-history/undo.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EditorHistoryUndo",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/editor-notices/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "EditorNotices",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/error-boundary/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/font-sizes/font-size-picker.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/font-sizes/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFontSize",
				"namespace": "editor",
				"aliases": [],
				"line": 26,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fontSizes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "fontSizeAttribute",
						"default": null,
						"type": "string"
					},
					{
						"name": "customFontSizeAttribute",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the font size object based on an array of named font sizes and the namedFontSize and customFontSize values.",
					"long_description": "\tIf namedFontSize is undefined or not found in fontSizes an object with just the size value based on customFontSize is returned.",
					"tags": [
						{
							"name": "param",
							"content": "Array of font size objects containing at least the \"name\" and \"size\" values as properties.",
							"types": [
								"Array"
							],
							"variable": "fontSizes"
						},
						{
							"name": "param",
							"content": "Content of the font size attribute (slug).",
							"types": [
								"string"
							],
							"variable": "fontSizeAttribute"
						},
						{
							"name": "param",
							"content": "Contents of the custom font size attribute (value).",
							"types": [
								"number"
							],
							"variable": "customFontSizeAttribute"
						},
						{
							"name": "return",
							"content": "If fontSizeAttribute is set and an equal slug is found in fontSizes it returns the font size object for that slug.\n\t\t\t\t\t Otherwise, an object with just the size value based on customFontSize is returned.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/font-sizes/with-font-sizes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "editor",
				"aliases": [],
				"line": 55,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "args",
						"default": null,
						"type": "object"
					}
				],
				"doc": {
					"description": "Higher-order component, which handles font size logic for class generation,",
					"long_description": "font size value retrieval, and font size change handling.",
					"tags": [
						{
							"name": "param",
							"content": "The arguments should all be strings\n                                 Each string contains the font size attribute name e.g: 'fontSize'.",
							"types": [
								"object",
								"string"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/global-keyboard-shortcuts/save-shortcut.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SaveShortcut",
				"namespace": "editor",
				"aliases": [],
				"line": 26,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/global-keyboard-shortcuts/text-editor-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TextEditorGlobalKeyboardShortcuts",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/global-keyboard-shortcuts/visual-editor-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "preventDefault",
				"namespace": "editor",
				"aliases": [],
				"line": 54,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/ignore-nested-events/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inner-blocks/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inserter/child-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ChildBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inserter/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "defaultRenderToggle",
				"namespace": "editor",
				"aliases": [],
				"line": 41,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inserter/inline-elements.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "InserterInlineElements",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inserter/menu.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "searchItems",
				"namespace": "editor",
				"aliases": [],
				"line": 76,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "items",
						"default": null,
						"type": "Array"
					},
					{
						"name": "searchTerm",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Filters an item list given a search term.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Item list",
							"types": [
								"Array"
							],
							"variable": "items"
						},
						{
							"name": "param",
							"content": "Search term.",
							"types": [
								"string"
							],
							"variable": "searchTerm"
						},
						{
							"name": "return",
							"content": "Filtered item list.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inserter-list-item/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "InserterListItem",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inserter-with-shortcuts/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "InserterWithShortcuts",
				"namespace": "editor",
				"aliases": [],
				"line": 37,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inspector-advanced-controls/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/inspector-controls/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/media-placeholder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "InsertFromURLPopover",
				"namespace": "editor",
				"aliases": [],
				"line": 57,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/media-placeholder/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MediaPlaceholder",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/media-upload/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MediaUploadCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "This is a placeholder for the media upload component necessary to make it possible to provide",
					"long_description": "an integration with the core blocks that handle media files. By default it renders nothing but\nit provides a way to have it overridden with the `editor.MediaUpload` filter.",
					"tags": [
						{
							"name": "return",
							"content": "Media upload element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/mobile/bottom-sheet/button.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Button",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/mobile/bottom-sheet/cell.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Cell",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/mobile/bottom-sheet/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/multi-select-scroll-into-view/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/multi-selection-inspector/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MultiSelectionInspector",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/navigable-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/observe-typing/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isKeyDownEligibleForStartTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 58,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Returns true if a given keydown event can be inferred as intent to start",
					"long_description": "typing, or false otherwise. A keydown is considered eligible if it is a\ntext navigation without shift active.",
					"tags": [
						{
							"name": "param",
							"content": "Keydown event to test.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "Whether event is eligible to start typing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/page-attributes/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PageAttributesCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/page-attributes/order.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/page-attributes/parent.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PageAttributesParent",
				"namespace": "editor",
				"aliases": [],
				"line": 34,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/page-attributes/template.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PageTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 28,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/panel-color-settings/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasCustomColorsDisabledForSetting",
				"namespace": "editor",
				"aliases": [],
				"line": 43,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/plain-text/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PlainText",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/plain-text/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-author/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostAuthorCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 32,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-author/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-comments/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostComments",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-excerpt/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostExcerptCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 19,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-excerpt/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostExcerpt",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-featured-image/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostFeaturedImageCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-featured-image/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-format/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostFormatCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-format/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-last-revision/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostLastRevisionCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-last-revision/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "LastRevision",
				"namespace": "editor",
				"aliases": [],
				"line": 29,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-locked-modal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-pending-status/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostPendingStatusCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-pending-status/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostPendingStatus",
				"namespace": "editor",
				"aliases": [],
				"line": 30,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-permalink/editor.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-permalink/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-pingbacks/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostPingbacks",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-preview-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "writeInterstitialMessage",
				"namespace": "editor",
				"aliases": [],
				"line": 45,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-button/label.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PublishButtonLabel",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-panel/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-panel/maybe-post-format-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostFormatSuggestion",
				"namespace": "editor",
				"aliases": [],
				"line": 33,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-panel/maybe-tags-panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TagsPanel",
				"namespace": "editor",
				"aliases": [],
				"line": 41,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-panel/postpublish.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-publish-panel/prepublish.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostPublishPanelPrepublish",
				"namespace": "editor",
				"aliases": [],
				"line": 43,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-saved-state/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-schedule/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostScheduleCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-schedule/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostSchedule",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-schedule/label.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostScheduleLabel",
				"namespace": "editor",
				"aliases": [],
				"line": 18,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-sticky/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostStickyCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-sticky/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostSticky",
				"namespace": "editor",
				"aliases": [],
				"line": 30,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-switch-to-draft-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostSwitchToDraftButton",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-taxonomies/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTaxonomiesCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-taxonomies/flat-term-selector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unescapeTerm",
				"namespace": "editor",
				"aliases": [],
				"line": 74,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "term",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a term object with name unescaped.",
					"long_description": "The unescape of the name propery is done using lodash unescape function.",
					"tags": [
						{
							"name": "param",
							"content": "The term object to unescape.",
							"types": [
								"Object"
							],
							"variable": "term"
						},
						{
							"name": "return",
							"content": "Term object with name property unescaped.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unescapeTerms",
				"namespace": "editor",
				"aliases": [],
				"line": 89,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "terms",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an array of term objects with names unescaped.",
					"long_description": "The unescape of each term is performed using the unescapeTerm function.",
					"tags": [
						{
							"name": "param",
							"content": "Array of term objects to unescape.",
							"types": [
								"Array.<Object>"
							],
							"variable": "terms"
						},
						{
							"name": "return",
							"content": "Array of therm objects unscaped.",
							"types": [
								"Array.<Object>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-taxonomies/hierarchical-term-selector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-taxonomies/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTaxonomies",
				"namespace": "editor",
				"aliases": [],
				"line": 34,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-text-editor/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "value",
				"namespace": "editor",
				"aliases": [],
				"line": 71,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Handles a textarea change event to notify the onChange prop callback and",
					"long_description": "reflect the new value in the component's own state. This marks the start\nof the user's edits, if not already changed, preventing future props\nchanges to value from replacing the rendered value. This is expected to\nbe followed by a reset to dirty state via `stopEditing`.",
					"tags": [
						{
							"name": "param",
							"content": "Change event.",
							"types": [
								"Event"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-title/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-title/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-trash/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTrashCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 13,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-trash/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTrash",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-type-support-check/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTypeSupportCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 33,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "props.children",
						"default": null,
						"type": "WPElement"
					},
					{
						"name": "props.supportKeys",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "A component which renders its own children only if the current editor post",
					"long_description": "type supports one of the given `supportKeys` prop.",
					"tags": [
						{
							"name": "param",
							"content": "Current post type.",
							"types": [
								"Object"
							],
							"variable": "props.postType"
						},
						{
							"name": "param",
							"content": "Children to be rendered if post\n                                             type supports.",
							"types": [
								"WPElement"
							],
							"variable": "props.children"
						},
						{
							"name": "param",
							"content": "String or string array of keys\n                                             to test.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "props.supportKeys"
						},
						{
							"name": "return",
							"content": "Rendered element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-visibility/check.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostVisibilityCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-visibility/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-visibility/label.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostVisibilityLabel",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/post-visibility/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/preserve-scroll-in-reorder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/provider/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/aria.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAriaPropName",
				"namespace": "editor",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/format-edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FormatEdit",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/format-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "FormatToolbar",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/inserter-list-item.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isResult",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/list-edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectedListNode",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Gets the selected list node, which is the closest list node to the start of",
					"long_description": "the selection.",
					"tags": [
						{
							"name": "return",
							"content": "The selected list node, or undefined if none is selected.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isListRootSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 73,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Whether or not the root list is selected.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "True if the root list or nothing is selected, false if an\n                  inner list is selected.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isActiveListType",
				"namespace": "editor",
				"aliases": [],
				"line": 89,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tagName",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootTagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Wether or not the selected list has the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The tag name the list should have.",
							"types": [
								"string"
							],
							"variable": "tagName"
						},
						{
							"name": "param",
							"content": "The current root tag name, to compare with in\n                             case nothing is selected.",
							"types": [
								"string"
							],
							"variable": "rootTagName"
						},
						{
							"name": "return",
							"content": "[description]",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/patterns.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPatterns",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/remove-browser-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "RemoveBrowserShortcuts",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Component which registered keyboard event handlers to prevent default",
					"long_description": "behaviors for key combinations otherwise handled internally by RichText.",
					"tags": [
						{
							"name": "return",
							"content": "WordPress element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/shortcut.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/tinymce.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "mapTextInputEvent",
				"namespace": "editor\\applyInternetExplorerInputFix",
				"aliases": [],
				"line": 89,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "textInputEvent",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Dispatches `input` events in response to `textinput` events.",
					"long_description": "\nIE provides a `textinput` event that is similar to an `input` event,\nand we use it to manually dispatch an `input` event.\n`textinput` is dispatched for text entry but for not deletions.",
					"tags": [
						{
							"name": "param",
							"content": "An Internet Explorer `textinput` event.",
							"types": [
								"Event"
							],
							"variable": "textInputEvent"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapDeletionKeyUpEvents",
				"namespace": "editor\\applyInternetExplorerInputFix",
				"aliases": [],
				"line": 114,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "keyUp",
						"default": null,
						"type": "KeyboardEvent"
					},
					{
						"name": "keyUp.target",
						"default": null,
						"type": "Node"
					},
					{
						"name": "keyUp.keyCode",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Dispatches `input` events in response to Delete and Backspace keyup.",
					"long_description": "\nIt would be better dispatch an `input` event after each deleting\n`keydown` because the DOM is updated after each, but it is challenging\nto determine the right time to dispatch `input` since propagation of\n`keydown` can be stopped at any point.\n\nIt's easier to listen for `keyup` in the capture phase and dispatch\n`input` before `keyup` propagates further. It's not perfect, but should\nbe good enough.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"KeyboardEvent"
							],
							"variable": "keyUp"
						},
						{
							"name": "param",
							"content": "The event target.",
							"types": [
								"Node"
							],
							"variable": "keyUp.target"
						},
						{
							"name": "param",
							"content": "The key code.",
							"types": [
								"number"
							],
							"variable": "keyUp.keyCode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/rich-text/toolbar-button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "RichTextToolbarButton",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/server-side-render/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/skip-to-selected-block/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "SkipToSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal Dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/table-of-contents/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TableOfContents",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 49,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/table-of-contents/panel.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TableOfContentsPanel",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/template-validation-notice/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "TemplateValidationNotice",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/theme-support-check/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ThemeSupportCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/unsaved-changes-warning/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/url-input/button.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/url-input/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "stopEventPropagation",
				"namespace": "editor",
				"aliases": [],
				"line": 54,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/url-popover/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/warning/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Warning",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/word-count/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "WordCount",
				"namespace": "editor",
				"aliases": [],
				"line": 19,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/components/writing-flow/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isNavigationCandidate",
				"namespace": "editor",
				"aliases": [],
				"line": 75,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "keyCode",
						"default": null,
						"type": "number"
					},
					{
						"name": "hasModifier",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the element should consider edge navigation upon a keyboard",
					"long_description": "event of the given directional key code, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "HTML element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "KeyboardEvent keyCode to test.",
							"types": [
								"number"
							],
							"variable": "keyCode"
						},
						{
							"name": "param",
							"content": "Whether a modifier is pressed.",
							"types": [
								"boolean"
							],
							"variable": "hasModifier"
						},
						{
							"name": "return",
							"content": "Whether element should consider edge navigation.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/ast/parse.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "updatePosition",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 31,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Update lineno and column based on `str`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "position",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 47,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Mark position and patch `node.position`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "Position",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 63,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Store position information for a node",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stylesheet",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 102,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse stylesheet.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "open",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 118,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Opening brace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "close",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 126,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Closing brace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rules",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 134,
				"end_line": 148,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse ruleset.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "match",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 154,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Match `re` and return captures.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "whitespace",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 171,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse whitespace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comments",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 179,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse comments;",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 196,
				"end_line": 224,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse comment.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "selector",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 230,
				"end_line": 245,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse selector.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 251,
				"end_line": 276,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse declaration.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declarations",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 282,
				"end_line": 305,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse declarations.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 311,
				"end_line": 330,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse keyframe.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atkeyframes",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 336,
				"end_line": 376,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse keyframes.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atsupports",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 382,
				"end_line": 407,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse supports.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "athost",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 413,
				"end_line": 435,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse host.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atmedia",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 441,
				"end_line": 466,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atcustommedia",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 472,
				"end_line": 485,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse custom-media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atpage",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 491,
				"end_line": 523,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse paged media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atdocument",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 529,
				"end_line": 556,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse document.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atfontface",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 562,
				"end_line": 591,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse font-face.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "_compileAtrule",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 615,
				"end_line": 631,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse non-block at-rules",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atrule",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 637,
				"end_line": 643,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse at rule.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\_default",
				"aliases": [],
				"line": 649,
				"end_line": 663,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse rule.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "trim",
				"namespace": "editor",
				"aliases": [],
				"line": 672,
				"end_line": 674,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Trim `str`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "addParent",
				"namespace": "editor",
				"aliases": [],
				"line": 680,
				"end_line": 706,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Adds non-enumerable parent node reference to each node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/ast/stringify/compiler.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "emit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 32,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Emit `str`",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "visit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 40,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "mapVisit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 48,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Map visit over array of `nodes`, optionally using a `delim`",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/ast/stringify/compress.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "compile",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 48,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Compile `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 56,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit comment node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "import",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 64,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit import node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "media",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 72,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "document",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 80,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit document node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "charset",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 89,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit charset node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "namespace",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 97,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit namespace node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 105,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit supports node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframes",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 113,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframes node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 121,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframe node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "page",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 130,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit page node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'font-face'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 139,
				"end_line": 141,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit font-face node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "host",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 147,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit host node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'custom-media'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 155,
				"end_line": 157,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit custom-media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 163,
				"end_line": 171,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit rule node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 177,
				"end_line": 179,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit declaration node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/ast/stringify/identity.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "compile",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 53,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Compile `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stylesheet",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 61,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit stylesheet node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 69,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit comment node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "import",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 77,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit import node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "media",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 85,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "document",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 93,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit document node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "charset",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 102,
				"end_line": 104,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit charset node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "namespace",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 110,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit namespace node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 118,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit supports node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframes",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 126,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframes node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 134,
				"end_line": 137,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframe node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "page",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 143,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit page node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'font-face'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 152,
				"end_line": 154,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit font-face node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "host",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 160,
				"end_line": 162,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit host node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'custom-media'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 168,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit custom-media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 176,
				"end_line": 187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit rule node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 193,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit declaration node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "indent",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 201,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Increase, decrease or return current indentation.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/ast/stringify/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "editor",
				"aliases": [],
				"line": 34,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Stringfy the given AST `node`.",
					"long_description": "\nOptions:\n\n - `compress` space-optimized output\n - `sourcemap` return an object with `.code` and `.map`",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"String"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "transformStyles",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					},
					{
						"name": "wrapperClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Convert css rules.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "CSS rules.",
							"types": [
								"Array"
							],
							"variable": "styles"
						},
						{
							"name": "param",
							"content": "Wrapper Class Name.",
							"types": [
								"string"
							],
							"variable": "wrapperClassName"
						},
						{
							"name": "return",
							"content": "converted rules.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/transforms/url-rewrite.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isRemotePath",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "filePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Return `true` if the given path is http/https.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "path",
							"types": [
								"string"
							],
							"variable": "filePath"
						},
						{
							"name": "return",
							"content": "is remote path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAbsolutePath",
				"namespace": "editor",
				"aliases": [],
				"line": 37,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "filePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Return `true` if the given filePath is an absolute url.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "path",
							"types": [
								"string"
							],
							"variable": "filePath"
						},
						{
							"name": "return",
							"content": "is absolute path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidURL",
				"namespace": "editor",
				"aliases": [],
				"line": 49,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "meta",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the url should be inluded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "url meta info",
							"types": [
								"Object"
							],
							"variable": "meta"
						},
						{
							"name": "return",
							"content": "is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getResourcePath",
				"namespace": "editor",
				"aliases": [],
				"line": 77,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "str",
						"default": null,
						"type": "string"
					},
					{
						"name": "baseURL",
						"default": null,
						"type": "string"
					},
					{
						"name": "absolutePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Get the absolute path of the url, relative to the basePath",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the url",
							"types": [
								"string"
							],
							"variable": "str"
						},
						{
							"name": "param",
							"content": "base URL",
							"types": [
								"string"
							],
							"variable": "baseURL"
						},
						{
							"name": "param",
							"content": "the absolute path",
							"types": [
								"string"
							],
							"variable": "absolutePath"
						},
						{
							"name": "return",
							"content": "the full path to the file",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "processURL",
				"namespace": "editor",
				"aliases": [],
				"line": 90,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "baseURL",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Process the single `url()` pattern",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the base URL for relative URLs",
							"types": [
								"string"
							],
							"variable": "baseURL"
						},
						{
							"name": "return",
							"content": "the Promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getURLs",
				"namespace": "editor",
				"aliases": [],
				"line": 107,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Get all `url()`s, and return the meta info",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "decl.value",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "the urls",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceURLs",
				"namespace": "editor",
				"aliases": [],
				"line": 138,
				"end_line": 143,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "raw",
						"default": null,
						"type": "string"
					},
					{
						"name": "URLs",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Replace the raw value's `url()` segment to the new value",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the raw value",
							"types": [
								"string"
							],
							"variable": "raw"
						},
						{
							"name": "param",
							"content": "the URLs to replace",
							"types": [
								"Array"
							],
							"variable": "URLs"
						},
						{
							"name": "return",
							"content": "the new value",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/transforms/wrap.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/editor-styles/traverse.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "traverseCSS",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "External dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/hooks/align.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getValidAlignments",
				"namespace": "editor",
				"aliases": [],
				"line": 75,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAlign",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "hasWideBlockSupport",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "hasWideEnabled",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the valid alignments.",
					"long_description": "Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\nExported just for testing purposes, not exported outside the module.",
					"tags": [
						{
							"name": "param",
							"content": "Aligns supported by the block.",
							"types": [
								"boolean",
								"Array.<string>"
							],
							"variable": "blockAlign"
						},
						{
							"name": "param",
							"content": "True if block supports wide alignments. And False otherwise.",
							"types": [
								"boolean"
							],
							"variable": "hasWideBlockSupport"
						},
						{
							"name": "param",
							"content": "True if theme supports wide alignments. And False otherwise.",
							"types": [
								"boolean"
							],
							"variable": "hasWideEnabled"
						},
						{
							"name": "return",
							"content": "Valid alignments.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 103,
				"end_line": 119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes to include `align`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/hooks/anchor.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/hooks/custom-class-name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 52,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLRootElementClasses",
				"namespace": "editor",
				"aliases": [],
				"line": 124,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string, returns an array of class names assigned to the root",
					"long_description": "element in the markup.",
					"tags": [
						{
							"name": "param",
							"content": "Markup string from which to extract classes.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Array of class names assigned to the root element.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addParsedDifference",
				"namespace": "editor",
				"aliases": [],
				"line": 148,
				"end_line": 168,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a parsed set of block attributes, if the block supports custom class",
					"long_description": "names and an unknown class (per the block's serialization behavior) is\nfound, the unknown classes are treated as custom classes. This prevents the\nblock from being considered as invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Original block attributes.",
							"types": [
								"Object"
							],
							"variable": "blockAttributes"
						},
						{
							"name": "param",
							"content": "Block type settings.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Original block markup.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Filtered block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/hooks/custom-class-name.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 64,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLRootElementClasses",
				"namespace": "editor",
				"aliases": [],
				"line": 81,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string, returns an array of class names assigned to the root",
					"long_description": "element in the markup.",
					"tags": [
						{
							"name": "param",
							"content": "Markup string from which to extract classes.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Array of class names assigned to the root element.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addParsedDifference",
				"namespace": "editor",
				"aliases": [],
				"line": 105,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a parsed set of block attributes, if the block supports custom class",
					"long_description": "names and an unknown class (per the block's serialization behavior) is\nfound, the unknown classes are treated as custom classes. This prevents the\nblock from being considered as invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Original block attributes.",
							"types": [
								"Object"
							],
							"variable": "blockAttributes"
						},
						{
							"name": "param",
							"content": "Block type settings.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Original block markup.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Filtered block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/hooks/default-autocompleters.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/hooks/generated-class-name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addGeneratedClassName",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject generated className if",
					"long_description": "block supports it. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setupEditor",
				"namespace": "editor",
				"aliases": [],
				"line": 88,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					},
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that editor has initialized with",
					"long_description": "the specified post object and editor settings.",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "param",
							"content": "Initial edited attributes object.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetPost",
				"namespace": "editor",
				"aliases": [],
				"line": 105,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the latest version of the",
					"long_description": "post has been received, either by initialization or save.",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 121,
				"end_line": 126,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the latest autosave of the",
					"long_description": "post has been received, by initialization or autosave.",
					"tags": [
						{
							"name": "param",
							"content": "Autosave post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updatePost",
				"namespace": "editor",
				"aliases": [],
				"line": 137,
				"end_line": 142,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a patch of updates for the",
					"long_description": "latest version of the post have been received.",
					"tags": [
						{
							"name": "param",
							"content": "Updated post fields.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setupEditorState",
				"namespace": "editor",
				"aliases": [],
				"line": 153,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used to setup the editor state when first opening an editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "param",
							"content": "Array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 171,
				"end_line": 176,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that blocks state should be",
					"long_description": "reset to the specified array of blocks, taking precedence over any other\ncontent reflected as an edit in state.",
					"tags": [
						{
							"name": "param",
							"content": "Array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 188,
				"end_line": 193,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that blocks have been received.",
					"long_description": "Unlike resetBlocks, these should be appended to the existing known set, not\nreplacing.",
					"tags": [
						{
							"name": "param",
							"content": "Array of block objects.",
							"types": [
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlockAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 205,
				"end_line": 211,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block attributes with",
					"long_description": "the specified client ID has been updated.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Block attributes to be merged.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 223,
				"end_line": 229,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updates",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID has been updated.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Block attributes to be merged.",
							"types": [
								"Object"
							],
							"variable": "updates"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "selectBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 244,
				"end_line": 251,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "initialPosition",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID has been selected, optionally accepting a position\nvalue reflecting its selection directionality. An initialPosition of -1\nreflects a reverse selection.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Optional initial position. Pass as -1 to\n                                 reflect reverse selection.",
							"types": [
								"number"
							],
							"variable": "initialPosition"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 288,
				"end_line": 294,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isSelectionEnabled",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object that enables or disables block selection.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Whether block selection should\n                                           be enabled.",
							"types": [
								"boolean"
							],
							"variable": "isSelectionEnabled"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 306,
				"end_line": 313,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that a blocks should be replaced with",
					"long_description": "one or more replacement blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID(s) to replace.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientIds"
						},
						{
							"name": "param",
							"content": "Replacement block(s).",
							"types": [
								"Object",
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 325,
				"end_line": 327,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that a single block should be replaced",
					"long_description": "with one or more replacement blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID to replace.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Replacement block(s).",
							"types": [
								"Object",
								"Array.<Object>"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createOnMove",
				"namespace": "editor",
				"aliases": [],
				"line": 338,
				"end_line": 346,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order action creator which, given the action type to dispatch creates",
					"long_description": "an action creator for managing block movement.",
					"tags": [
						{
							"name": "param",
							"content": "Action type to dispatch.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Action creator.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 387,
				"end_line": 390,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updateSelection",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a single block should be",
					"long_description": "inserted, optionally at a specific index respective a root block list.",
					"tags": [
						{
							"name": "param",
							"content": "Block object to insert.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "If true block selection will be updated. If false, block selection will not change. Defaults to true.",
							"types": [
								"boolean"
							],
							"variable": "updateSelection"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 404,
				"end_line": 414,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array.<Object>"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updateSelection",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an array of blocks should",
					"long_description": "be inserted, optionally at a specific index respective a root block list.",
					"tags": [
						{
							"name": "param",
							"content": "Block objects to insert.",
							"types": [
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "If true block selection will be updated.  If false, block selection will not change. Defaults to true.",
							"types": [
								"boolean"
							],
							"variable": "updateSelection"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "showInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 427,
				"end_line": 433,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the insertion point should",
					"long_description": "be shown.",
					"tags": [
						{
							"name": "param",
							"content": "Optional root client ID of block list on\n                              which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hideInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 441,
				"end_line": 445,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object hiding the insertion point.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setTemplateValidity",
				"namespace": "editor",
				"aliases": [],
				"line": 455,
				"end_line": 460,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isValid",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object resetting the template validity.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "template validity flag.",
							"types": [
								"boolean"
							],
							"variable": "isValid"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "synchronizeTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 468,
				"end_line": 472,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object synchronize the template with the list of blocks",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "editPost",
				"namespace": "editor",
				"aliases": [],
				"line": 483,
				"end_line": 488,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that attributes of the post have",
					"long_description": "been edited.",
					"tags": [
						{
							"name": "param",
							"content": "Post attributes to edit.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "savePost",
				"namespace": "editor",
				"aliases": [],
				"line": 499,
				"end_line": 505,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.isAutosave",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object to save the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Options for the save.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Perform an autosave if true.",
							"types": [
								"boolean"
							],
							"variable": "options.isAutosave"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mergeBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 530,
				"end_line": 535,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "firstBlockClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "secondBlockClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that two blocks should be merged",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the first block to merge.",
							"types": [
								"string"
							],
							"variable": "firstBlockClientId"
						},
						{
							"name": "param",
							"content": "Client ID of the second block to merge.",
							"types": [
								"string"
							],
							"variable": "secondBlockClientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autosave",
				"namespace": "editor",
				"aliases": [],
				"line": 545,
				"end_line": 549,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the post should autosave.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Extra flags to identify the autosave.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "redo",
				"namespace": "editor",
				"aliases": [],
				"line": 558,
				"end_line": 562,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history should",
					"long_description": "restore last popped state.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "undo",
				"namespace": "editor",
				"aliases": [],
				"line": 570,
				"end_line": 574,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history should pop.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createUndoLevel",
				"namespace": "editor",
				"aliases": [],
				"line": 583,
				"end_line": 587,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history record should",
					"long_description": "be created.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 600,
				"end_line": 607,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectPrevious",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the blocks corresponding to",
					"long_description": "the set of specified client IDs are to be removed.",
					"tags": [
						{
							"name": "param",
							"content": "Client IDs of blocks to remove.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientIds"
						},
						{
							"name": "param",
							"content": "True if the previous block should be\n                                        selected when a block is removed.",
							"types": [
								"boolean"
							],
							"variable": "selectPrevious"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 620,
				"end_line": 622,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectPrevious",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID is to be removed.",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of block to remove.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "True if the previous block should be\n                                selected when a block is removed.",
							"types": [
								"boolean"
							],
							"variable": "selectPrevious"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleBlockMode",
				"namespace": "editor",
				"aliases": [],
				"line": 633,
				"end_line": 638,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle the block editing mode between",
					"long_description": "visual and HTML modes.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "startTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 646,
				"end_line": 650,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has begun to type.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 658,
				"end_line": 662,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has stopped typing.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enterFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 670,
				"end_line": 674,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the caret has entered formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exitFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 682,
				"end_line": 686,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user caret has exited formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updatePostLock",
				"namespace": "editor",
				"aliases": [],
				"line": 696,
				"end_line": 701,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lock",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to lock the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Details about the post lock status, user, and nonce.",
							"types": [
								"Object"
							],
							"variable": "lock"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalFetchReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 713,
				"end_line": 718,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to fetch a single reusable block or all",
					"long_description": "reusable blocks from the REST API into the store.",
					"tags": [
						{
							"name": "param",
							"content": "If given, only a single reusable block with this ID will\n                    be fetched.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalReceiveReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 731,
				"end_line": 736,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "results",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that reusable blocks have been",
					"long_description": "received. `results` is an array of objects containing:\n - `reusableBlock` - Details about how the reusable block is persisted.\n - `parsedBlock` - The original block.",
					"tags": [
						{
							"name": "param",
							"content": "Reusable blocks received.",
							"types": [
								"Array.<Object>"
							],
							"variable": "results"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalSaveReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 747,
				"end_line": 752,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to save a reusable block that's in the store to",
					"long_description": "the REST API.",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to save.",
							"types": [
								"Object"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalDeleteReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 762,
				"end_line": 767,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used to delete a reusable block via the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to delete.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalUpdateReusableBlockTitle",
				"namespace": "editor",
				"aliases": [],
				"line": 779,
				"end_line": 785,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "title",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a reusable block's title is",
					"long_description": "to be updated.",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to update.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The new title.",
							"types": [
								"string"
							],
							"variable": "title"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalConvertBlockToStatic",
				"namespace": "editor",
				"aliases": [],
				"line": 795,
				"end_line": 800,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to convert a reusable block into a static block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The client ID of the block to attach.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalConvertBlockToReusable",
				"namespace": "editor",
				"aliases": [],
				"line": 810,
				"end_line": 815,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to convert a static block into a reusable block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The client IDs of the block to detach.",
							"types": [
								"string"
							],
							"variable": "clientIds"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertDefaultBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 829,
				"end_line": 832,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a new block of the default",
					"long_description": "type should be added to the block list.",
					"tags": [
						{
							"name": "param",
							"content": "Optional attributes of the block to assign.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which\n                              to append.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "Optional index where to insert the default block",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlockListSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 844,
				"end_line": 850,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object that changes the nested settings of a given block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the block whose nested setting are\n                         being received.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Object with the new settings for the nested block.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enablePublishSidebar",
				"namespace": "editor",
				"aliases": [],
				"line": 873,
				"end_line": 877,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has enabled the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "disablePublishSidebar",
				"namespace": "editor",
				"aliases": [],
				"line": 885,
				"end_line": 889,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has disabled the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "lockPostSaving",
				"namespace": "editor",
				"aliases": [],
				"line": 899,
				"end_line": 904,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to signal that post saving is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The lock name.",
							"types": [
								"string"
							],
							"variable": "lockName"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unlockPostSaving",
				"namespace": "editor",
				"aliases": [],
				"line": 914,
				"end_line": 919,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to signal that post saving is unlocked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The lock name.",
							"types": [
								"string"
							],
							"variable": "lockName"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/array.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertAt",
				"namespace": "editor",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "array",
						"default": null,
						"type": "Array"
					},
					{
						"name": "elements",
						"default": null,
						"type": "*"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert one or multiple elements into a given position of an array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Source array.",
							"types": [
								"Array"
							],
							"variable": "array"
						},
						{
							"name": "param",
							"content": "Elements to insert.",
							"types": [
								"*"
							],
							"variable": "elements"
						},
						{
							"name": "param",
							"content": "Insert Position.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Result.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "moveTo",
				"namespace": "editor",
				"aliases": [],
				"line": 43,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "array",
						"default": null,
						"type": "Array"
					},
					{
						"name": "from",
						"default": null,
						"type": "number"
					},
					{
						"name": "to",
						"default": null,
						"type": "number"
					},
					{
						"name": "count",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Moves an element in an array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Source array.",
							"types": [
								"Array"
							],
							"variable": "array"
						},
						{
							"name": "param",
							"content": "Source index.",
							"types": [
								"number"
							],
							"variable": "from"
						},
						{
							"name": "param",
							"content": "Destination index.",
							"types": [
								"number"
							],
							"variable": "to"
						},
						{
							"name": "param",
							"content": "Number of elements to move.",
							"types": [
								"number"
							],
							"variable": "count"
						},
						{
							"name": "return",
							"content": "Result.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/constants.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/defaults.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/effects/posts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/effects/reusable-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/effects/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "resolveSelector",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "namespace",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Waits for the resolution of a selector before returning the selector's value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store namespace.",
							"types": [
								"string"
							],
							"variable": "namespace"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector args.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Selector result.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/effects.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateBlocksToTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 58,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Block validity is a function of blocks state (at the point of a",
					"long_description": "reset) and the template setting. As a compromise to its placement\nacross distinct parts of state, it is implemented here as a side-\neffect of the block reset action.",
					"tags": [
						{
							"name": "param",
							"content": "RESET_BLOCKS action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "New validity set action if validity has changed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "selectPreviousBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 82,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Effect handler which will return a block select action to select the block",
					"long_description": "occurring before the selected block in the previous state, unless it is the\nsame block or the action includes a falsey `selectPrevious` option flag.",
					"tags": [
						{
							"name": "param",
							"content": "Action which had initiated the effect handler.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Block select action to select previous, if applicable.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "ensureDefaultBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 121,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Effect handler which will return a default block insertion action if there",
					"long_description": "are no other blocks at the root of the editor. This is expected to be used\nin actions which may result in no blocks remaining in the editor (removal,\nreplacement, etc).",
					"tags": [
						{
							"name": "param",
							"content": "Action which had initiated the effect handler.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Default block insert action, if no other blocks exist.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/middlewares.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyMiddlewares",
				"namespace": "editor",
				"aliases": [],
				"line": 35,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Applies the custom middlewares used specifically in the editor module.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store Object.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Update Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPostRawValue",
				"namespace": "editor",
				"aliases": [],
				"line": 82,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns a post attribute value, flattening nested rendered content using its",
					"long_description": "raw value in place of its original object form.",
					"tags": [
						{
							"name": "param",
							"content": "Original value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Raw value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapBlockOrder",
				"namespace": "editor",
				"aliases": [],
				"line": 101,
				"end_line": 111,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object where each key is a nesting",
					"long_description": "context, the value of which is an array of block client IDs existing within\nthat nesting context.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to map.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Assumed root client ID.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Block order map object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "flattenBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 124,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "transform",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Helper method to iterate through all blocks, recursing into inner blocks,",
					"long_description": "applying a transformation function to each one.\nReturns a flattened object with the transformed blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Transforming function to be applied to each block.",
							"types": [
								"function"
							],
							"variable": "transform"
						},
						{
							"name": "return",
							"content": "Flattened object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFlattenedBlocksWithoutAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 150,
				"end_line": 154,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object containing all blocks, without",
					"long_description": "attributes, recursing into inner blocks. Keys correspond to the block client\nID, the value of which is the attributes object.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Flattened block attributes object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFlattenedBlockAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 166,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object containing all block attributes,",
					"long_description": "recursing into inner blocks. Keys correspond to the block client ID, the\nvalue of which is the attributes object.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Flattened block attributes object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNestedBlockClientIds",
				"namespace": "editor",
				"aliases": [],
				"line": 187,
				"end_line": 192,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocksOrder",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block order map object, returns *all* of the block client IDs that are",
					"long_description": "a descendant of the given root client ID.\n\nCalling this with `rootClientId` set to `''` results in a list of client IDs\nthat are in the post. That is, it excludes blocks like fetched reusable\nblocks which are stored into state but not visible.",
					"tags": [
						{
							"name": "param",
							"content": "Object that maps block client IDs to a list of\n                              nested block client IDs.",
							"types": [
								"Object"
							],
							"variable": "blocksOrder"
						},
						{
							"name": "param",
							"content": "The root client ID to search. Defaults to ''.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "List of descendant client IDs.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMutateSafeObject",
				"namespace": "editor",
				"aliases": [],
				"line": 204,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "original",
						"default": null,
						"type": "Object"
					},
					{
						"name": "working",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an object against which it is safe to perform mutating operations,",
					"long_description": "given the original object and its current working copy.",
					"tags": [
						{
							"name": "param",
							"content": "Original object.",
							"types": [
								"Object"
							],
							"variable": "original"
						},
						{
							"name": "param",
							"content": "Working object.",
							"types": [
								"Object"
							],
							"variable": "working"
						},
						{
							"name": "return",
							"content": "Mutation-safe object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSameKeys",
				"namespace": "editor",
				"aliases": [],
				"line": 222,
				"end_line": 224,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the two object arguments have the same keys, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First object.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two objects have the same keys.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isUpdatingSameBlockAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 237,
				"end_line": 239,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are updating the same block attribute, or\nfalse otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether actions are updating the same block attribute.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isUpdatingSamePostProperty",
				"namespace": "editor",
				"aliases": [],
				"line": 252,
				"end_line": 254,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are editing the same post property, or\nfalse otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether actions are updating the same post property.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "shouldOverwriteState",
				"namespace": "editor",
				"aliases": [],
				"line": 267,
				"end_line": 273,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are modifying the same property such that\nundo history should be batched.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether to overwrite present state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withInnerBlocksRemoveCascade",
				"namespace": "editor",
				"aliases": [],
				"line": 284,
				"end_line": 301,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer targeting the combined editor reducer, augmenting",
					"long_description": "block client IDs in remove action to include cascade of inner blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withBlockReset",
				"namespace": "editor",
				"aliases": [],
				"line": 314,
				"end_line": 327,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which targets the combined blocks reducer and handles",
					"long_description": "the `RESET_BLOCKS` action. When dispatched, this action will replace all\nblocks that exist in the post, leaving blocks that exist only in state (e.g.\nreusable blocks) alone.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withSaveReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 340,
				"end_line": 366,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which targets the combined blocks reducer and handles",
					"long_description": "the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\nregular reducers and needs a higher-order reducer since it needs access to\nboth `byClientId` and `attributes` simultaneously.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "currentPost",
				"namespace": "editor",
				"aliases": [],
				"line": 742,
				"end_line": 764,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the last-known state of the current post, in the format",
					"long_description": "returned by the WP REST API.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 775,
				"end_line": 788,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning typing state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCaretWithinFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 799,
				"end_line": 812,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning whether the caret is within formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "blockSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 823,
				"end_line": 937,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the block selection's state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 962,
				"end_line": 980,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the block insertion point visibility, either null if there",
					"long_description": "is not an explicit insertion point assigned, or an object of its `index` and\n`rootClientId`.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "template",
				"namespace": "editor",
				"aliases": [],
				"line": 991,
				"end_line": 1005,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning whether the post blocks match the defined template or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "settings",
				"namespace": "editor",
				"aliases": [],
				"line": 1016,
				"end_line": 1026,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the editor setting.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "preferences",
				"namespace": "editor",
				"aliases": [],
				"line": 1037,
				"end_line": 1084,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the user preferences.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "saving",
				"namespace": "editor",
				"aliases": [],
				"line": 1096,
				"end_line": 1127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning current network request state (whether a request to",
					"long_description": "the WP REST API is in progress, successful, or failed).",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "postLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1149,
				"end_line": 1161,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "PostLockState"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the post lock status.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"PostLockState"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"PostLockState"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "postSavingLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1174,
				"end_line": 1187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "PostSavingLockState"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Post saving lock.",
					"long_description": "\nWhen post saving is locked, the post cannot be published or updated.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"PostSavingLockState"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"PostLockState"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "previewLink",
				"namespace": "editor",
				"aliases": [],
				"line": 1391,
				"end_line": 1417,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "string"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the post preview link.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The preview link",
							"types": [
								"string"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasEditorUndo",
				"namespace": "editor",
				"aliases": [],
				"line": 169,
				"end_line": 171,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if any past editor history snapshots exist, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether undo history exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasEditorRedo",
				"namespace": "editor",
				"aliases": [],
				"line": 182,
				"end_line": 184,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if any future editor history snapshots exist, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether redo history exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostNew",
				"namespace": "editor",
				"aliases": [],
				"line": 195,
				"end_line": 197,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the currently edited post is yet to be saved, or false if",
					"long_description": "the post has been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is new.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasChangedContent",
				"namespace": "editor",
				"aliases": [],
				"line": 207,
				"end_line": 214,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if content includes unsaved changes, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether content includes unsaved changes.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostDirty",
				"namespace": "editor",
				"aliases": [],
				"line": 225,
				"end_line": 243,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there are unsaved values for the current edit session, or",
					"long_description": "false if the editing state matches the saved or new post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether unsaved values exist.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCleanNewPost",
				"namespace": "editor",
				"aliases": [],
				"line": 254,
				"end_line": 256,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there are no unsaved values for the current edit session and",
					"long_description": "if the currently edited post is new (has never been saved before).",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether new post and unsaved values exist.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPost",
				"namespace": "editor",
				"aliases": [],
				"line": 268,
				"end_line": 270,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post currently being edited in its last known saved state, not",
					"long_description": "including unsaved edits. Returns an object containing relevant default post\nvalues if the post has not yet been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostType",
				"namespace": "editor",
				"aliases": [],
				"line": 280,
				"end_line": 282,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post type of the post currently being edited.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post type.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostId",
				"namespace": "editor",
				"aliases": [],
				"line": 293,
				"end_line": 295,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the ID of the post currently being edited, or null if the post has",
					"long_description": "not yet been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "ID of current post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostRevisionsCount",
				"namespace": "editor",
				"aliases": [],
				"line": 305,
				"end_line": 307,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the number of revisions of the post currently being edited.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Number of revisions.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostLastRevisionId",
				"namespace": "editor",
				"aliases": [],
				"line": 318,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the last revision ID of the post currently being edited,",
					"long_description": "or null if the post has no revisions.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "ID of the last revision.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 391,
				"end_line": 415,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a single attribute of the post being edited, preferring the unsaved",
					"long_description": "edit if one exists, but falling back to the attribute for the last known\nsaved state of the post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Post attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Post attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAutosaveAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 427,
				"end_line": 437,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an attribute value of the current autosave revision for a post, or",
					"long_description": "null if there is no autosave for the post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Autosave attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Autosave attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostVisibility",
				"namespace": "editor",
				"aliases": [],
				"line": 449,
				"end_line": 463,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current visibility of the post being edited, preferring the",
					"long_description": "unsaved value if different than the saved post. The return value is one of\n\"private\", \"password\", or \"public\".",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post visibility.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostPending",
				"namespace": "editor",
				"aliases": [],
				"line": 473,
				"end_line": 475,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if post is pending review.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether current post is pending review.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostPublished",
				"namespace": "editor",
				"aliases": [],
				"line": 485,
				"end_line": 488,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the current post has already been published.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post has been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostScheduled",
				"namespace": "editor",
				"aliases": [],
				"line": 498,
				"end_line": 500,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if post is already scheduled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether current post is scheduled to be posted.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostPublishable",
				"namespace": "editor",
				"aliases": [],
				"line": 510,
				"end_line": 517,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the post being edited can be published.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostSaveable",
				"namespace": "editor",
				"aliases": [],
				"line": 528,
				"end_line": 543,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post can be saved, or false otherwise. A post must",
					"long_description": "contain a title, an excerpt, or non-empty content to be valid for save.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can be saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostEmpty",
				"namespace": "editor",
				"aliases": [],
				"line": 555,
				"end_line": 591,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the edited post has content. A post has content if it has at",
					"long_description": "least one saveable block or otherwise has a non-empty content property\nassigned.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post has content.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostAutosaveable",
				"namespace": "editor",
				"aliases": [],
				"line": 601,
				"end_line": 625,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post can be autosaved, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can be autosaved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 637,
				"end_line": 639,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current autosave, or null if one is not set (i.e. if the post",
					"long_description": "has yet to be autosaved, or has been saved or published since the last\nautosave).",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Current autosave, if exists.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 649,
				"end_line": 651,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the true if there is an existing autosave, otherwise false.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether there is an existing autosave.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostBeingScheduled",
				"namespace": "editor",
				"aliases": [],
				"line": 662,
				"end_line": 667,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the post being edited is being scheduled. Preferring the",
					"long_description": "unsaved status values.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post has been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostDateFloating",
				"namespace": "editor",
				"aliases": [],
				"line": 683,
				"end_line": 693,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the current post should be considered to have a \"floating\"",
					"long_description": "date (i.e. that it would publish \"Immediately\" rather than at a set time).\n\nUnlike in the PHP backend, the REST API returns a full date string for posts\nwhere the 0000-00-00T00:00:00 placeholder is present in the database. To\ninfer that a post is set to publish \"Immediately\" we check whether the date\nand modified date are the same.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the edited post has a floating date value.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockValid",
				"namespace": "editor",
				"aliases": [],
				"line": 743,
				"end_line": 746,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether a block is valid or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Is Valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSelectionStart",
				"namespace": "editor",
				"aliases": [],
				"line": 962,
				"end_line": 964,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current block selection start. This value may be null, and it",
					"long_description": "may represent either a singular block selection or multi-selection start.\nA selection is singular if its start and end match.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block selection start.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSelectionEnd",
				"namespace": "editor",
				"aliases": [],
				"line": 976,
				"end_line": 978,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current block selection end. This value may be null, and it",
					"long_description": "may represent either a singular block selection or multi-selection end.\nA selection is singular if its start and end match.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block selection end.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlockCount",
				"namespace": "editor",
				"aliases": [],
				"line": 988,
				"end_line": 996,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the number of blocks currently selected in the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Number of blocks selected in the post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1006,
				"end_line": 1011,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there is a single selected block, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether a single block is selected.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1022,
				"end_line": 1030,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the currently selected block client ID, or null if there is no",
					"long_description": "selected block.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block client ID.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1040,
				"end_line": 1043,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the currently selected block, or null if there is no selected block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreviousBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1169,
				"end_line": 1171,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the previous block's client ID from the given reference start ID.",
					"long_description": "Defaults start to the selected block. Returns null if there is no previous\nblock.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "return",
							"content": "Adjacent block's client ID, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNextBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1185,
				"end_line": 1187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the next block's client ID from the given reference start ID.",
					"long_description": "Defaults start to the selected block. Returns null if there is no next\nblock.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "return",
							"content": "Adjacent block's client ID, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlocksInitialCaretPosition",
				"namespace": "editor",
				"aliases": [],
				"line": 1198,
				"end_line": 1208,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the initial caret position for the selected block.",
					"long_description": "This position is to used to position the caret properly when the selected block changes.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getLastMultiSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1296,
				"end_line": 1298,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the last block in the multi-selection set, or null",
					"long_description": "if there is no multi-selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Last block client ID in the multi-selection set.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isFirstMultiSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1333,
				"end_line": 1335,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a multi-selection exists, and the block corresponding to the",
					"long_description": "specified client ID is the first block of the multi-selection set, or false\notherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is first in multi-selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockMultiSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 1347,
				"end_line": 1349,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the client ID occurs within the block multi-selection, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is in multi-selection set.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiSelectedBlocksEndClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1415,
				"end_line": 1425,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block which ends the multi-selection set, or",
					"long_description": "null if there is no multi-selection.\n\nThis is not necessarily the last client ID in the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block ending multi-selection.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockOrder",
				"namespace": "editor",
				"aliases": [],
				"line": 1438,
				"end_line": 1440,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an array containing all block client IDs in the editor in the order",
					"long_description": "they appear. Optionally accepts a root client ID of the block list for which\nthe order should be returned, defaulting to the top-level block order.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Ordered client IDs of editor blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockIndex",
				"namespace": "editor",
				"aliases": [],
				"line": 1453,
				"end_line": 1455,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the index at which the block corresponding to the specified client",
					"long_description": "ID occurs within the block order, or `-1` if the block does not exist.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Index at which block exists in order.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 1467,
				"end_line": 1477,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the block corresponding to the specified client ID is",
					"long_description": "currently selected and no multi-selection exists, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is selected and multi-selection exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSelectedInnerBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1489,
				"end_line": 1494,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "deep",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if one of the block's inner blocks is selected.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Perform a deep check.",
							"types": [
								"boolean"
							],
							"variable": "deep"
						},
						{
							"name": "return",
							"content": "Whether the block as an inner block selected",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockWithinSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 1509,
				"end_line": 1517,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the block corresponding to the specified client ID is",
					"long_description": "currently selected but isn't the last of the selected blocks. Here \"last\"\nrefers to the block sequence in the document, _not_ the sequence of\nmulti-selection, which is why `state.blockSelection.end` isn't used.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is selected and not the last in the\n                  selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasMultiSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 1527,
				"end_line": 1532,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a multi-selection has been made, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether multi-selection has been made.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMultiSelecting",
				"namespace": "editor",
				"aliases": [],
				"line": 1546,
				"end_line": 1548,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether in the process of multi-selecting or not. This flag is only true",
					"long_description": "while the multi-selection is being selected (by mouse move), and is false\nonce the multi-selection has been settled.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "True if multi-selecting, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSelectionEnabled",
				"namespace": "editor",
				"aliases": [],
				"line": 1558,
				"end_line": 1560,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Selector that returns if multi-selection is enabled or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "True if it should be possible to multi-select blocks, false if multi-selection is disabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockMode",
				"namespace": "editor",
				"aliases": [],
				"line": 1572,
				"end_line": 1574,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's editing mode, defaulting to \"visual\" if not explicitly",
					"long_description": "assigned.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block editing mode.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 1584,
				"end_line": 1586,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the user is typing, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether user is typing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCaretWithinFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 1596,
				"end_line": 1598,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the caret is within formatted text, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the caret is within formatted text.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 1609,
				"end_line": 1631,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the insertion point, the index at which the new inserted block would",
					"long_description": "be placed. Defaults to the last index.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Insertion point object with `rootClientId`, `index`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockInsertionPointVisible",
				"namespace": "editor",
				"aliases": [],
				"line": 1641,
				"end_line": 1643,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if we should show the block insertion point.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the insertion point is visible or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 1652,
				"end_line": 1654,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns whether the blocks matches the template or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the template is valid or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 1663,
				"end_line": 1665,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the defined block template",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Block Template",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTemplateLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1677,
				"end_line": 1689,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the defined block template lock. Optionally accepts a root block",
					"long_description": "client ID as context, otherwise defaulting to the global context.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional block root client ID.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Block Template Lock",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1699,
				"end_line": 1701,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is currently being saved, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post is being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "didPostSaveRequestSucceed",
				"namespace": "editor",
				"aliases": [],
				"line": 1712,
				"end_line": 1714,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a previous post save was attempted successfully, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post was saved successfully.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "didPostSaveRequestFail",
				"namespace": "editor",
				"aliases": [],
				"line": 1725,
				"end_line": 1727,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a previous post save was attempted but failed, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post save failed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAutosavingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1737,
				"end_line": 1739,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is autosaving, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is autosaving.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPreviewingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1749,
				"end_line": 1751,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is being previewed, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is being previewed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostPreviewLink",
				"namespace": "editor",
				"aliases": [],
				"line": 1761,
				"end_line": 1772,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post preview link",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Preview Link.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSuggestedPostFormat",
				"namespace": "editor",
				"aliases": [],
				"line": 1784,
				"end_line": 1825,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a suggested post format for the current post, inferred only if there",
					"long_description": "is a single block within the post and it is of a type known to match a\ndefault post format. Returns null if the format cannot be determined.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Suggested post format.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlocksForSerialization",
				"namespace": "editor",
				"aliases": [],
				"line": 1836,
				"end_line": 1851,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a set of blocks which are to be used in consideration of the post's",
					"long_description": "generated save content.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Filtered set of blocks for save.",
							"types": [
								"Array.<WPBlock>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canIncludeBlockTypeInInserter",
				"namespace": "editor",
				"aliases": [],
				"line": 1994,
				"end_line": 2000,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether we can show a block type in the inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global State",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "BlockType",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be shown in the inserter.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canIncludeReusableBlockInInserter",
				"namespace": "editor",
				"aliases": [],
				"line": 2012,
				"end_line": 2038,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reusableBlock",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether we can show a reusable block in the inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global State",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Reusable block object",
							"types": [
								"Object"
							],
							"variable": "reusableBlock"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be shown in the inserter.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalIsFetchingReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 2268,
				"end_line": 2270,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "ref",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the reusable block with the given ID is being fetched, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The reusable block's ID.",
							"types": [
								"string"
							],
							"variable": "ref"
						},
						{
							"name": "return",
							"content": "Whether the reusable block is being fetched.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalGetReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 2280,
				"end_line": 2284,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an array of all reusable blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "An array of all reusable blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getStateBeforeOptimisticTransaction",
				"namespace": "editor",
				"aliases": [],
				"line": 2296,
				"end_line": 2301,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "transactionId",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns state object prior to a specified optimist transaction ID, or `null`",
					"long_description": "if the transaction corresponding to the given ID cannot be found.",
					"tags": [
						{
							"name": "param",
							"content": "Current global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optimist transaction ID.",
							"types": [
								"Object"
							],
							"variable": "transactionId"
						},
						{
							"name": "return",
							"content": "Global application state prior to transaction.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 2311,
				"end_line": 2328,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is being published, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post is being published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPermalinkEditable",
				"namespace": "editor",
				"aliases": [],
				"line": 2338,
				"end_line": 2341,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the permalink is editable or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether or not the permalink is editable.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPermalink",
				"namespace": "editor",
				"aliases": [],
				"line": 2351,
				"end_line": 2367,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the permalink for the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The permalink, or null if the post is not viewable.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPermalinkParts",
				"namespace": "editor",
				"aliases": [],
				"line": 2379,
				"end_line": 2398,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the permalink for a post, split into it's three parts: the prefix,",
					"long_description": "the postName, and the suffix.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "An object containing the prefix, postName, and suffix for\n                 the permalink, or null if the post is not viewable.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "inSomeHistory",
				"namespace": "editor",
				"aliases": [],
				"line": 2410,
				"end_line": 2421,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Returns true if an optimistic transaction is pending commit, for which the",
					"long_description": "before state satisfies the given predicate function.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Function given state, returning true if match.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Whether predicate matches for some history.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockListSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2432,
				"end_line": 2434,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the Block List settings of a block, if any exist.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block settings of the block if set.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditorSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2444,
				"end_line": 2446,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the editor settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The editor settings object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTokenSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2457,
				"end_line": 2463,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the token settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Token name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Token settings object, or the named token settings object if set.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostLocked",
				"namespace": "editor",
				"aliases": [],
				"line": 2473,
				"end_line": 2475,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the post is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is locked.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostSavingLocked",
				"namespace": "editor",
				"aliases": [],
				"line": 2485,
				"end_line": 2487,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether post saving is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is locked.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostLockTakeover",
				"namespace": "editor",
				"aliases": [],
				"line": 2497,
				"end_line": 2499,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the edition of the post has been taken over.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is post lock takeover.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPostLockUser",
				"namespace": "editor",
				"aliases": [],
				"line": 2509,
				"end_line": 2511,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns details about the post lock user.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "A user object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getActivePostLock",
				"namespace": "editor",
				"aliases": [],
				"line": 2521,
				"end_line": 2523,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the active post lock.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The lock object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUserUseUnfilteredHTML",
				"namespace": "editor",
				"aliases": [],
				"line": 2533,
				"end_line": 2535,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether or not the user has the unfiltered_html capability.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the user can or can't post unfiltered HTML.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishSidebarEnabled",
				"namespace": "editor",
				"aliases": [],
				"line": 2546,
				"end_line": 2552,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the pre-publish panel should be shown",
					"long_description": "or skipped when the user clicks the \"publish\" button.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the pre-publish panel should be shown or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockDOMNode",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block client ID, returns the corresponding DOM node for the block,",
					"long_description": "if exists. As much as possible, this helper should be avoided, and used only\nin cases where isolated behaviors need remote access to a block node.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block DOM node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockFocusableWrapper",
				"namespace": "editor",
				"aliases": [],
				"line": 37,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block client ID, returns the corresponding DOM node for the block",
					"long_description": "focusable wrapper, if exists. As much as possible, this helper should be\navoided, and used only in cases where isolated behaviors need remote access\nto a block node.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block DOM node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockFocusStop",
				"namespace": "editor",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if the given HTMLElement is a block focus stop. Blocks without",
					"long_description": "their own text fields rely on the focus stop to be keyboard navigable.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a block focus stop.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInSameBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 63,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "b",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if two elements are contained within the same block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First element.",
							"types": [
								"HTMLElement"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second element.",
							"types": [
								"HTMLElement"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether elements are in the same block.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInsideRootBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 76,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockElement",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if an elements is considered part of the block and not its children.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block container element.",
							"types": [
								"HTMLElement"
							],
							"variable": "blockElement"
						},
						{
							"name": "param",
							"content": "Element.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is in the block Element but not its children.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasInnerBlocksContext",
				"namespace": "editor",
				"aliases": [],
				"line": 90,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if the given HTMLElement contains inner blocks (an InnerBlocks",
					"long_description": "element).",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element contains inner blocks.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "editor",
				"aliases": [],
				"line": 42,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.additionalData",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.allowedTypes",
						"default": null,
						"type": "string"
					},
					{
						"name": "$0.filesList",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.maxUploadFileSize",
						"default": null,
						"type": "number"
					},
					{
						"name": "$0.onError",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.onFileChange",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Upload a media file when the file upload button is activated.",
					"long_description": "Wrapper around mediaUpload() that injects the current post ID.",
					"tags": [
						{
							"name": "param",
							"content": "Parameters object passed to the function.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "$0.additionalData"
						},
						{
							"name": "param",
							"content": "Array with the types of media that can be uploaded, if unset all types are allowed.",
							"types": [
								"string"
							],
							"variable": "$0.allowedTypes"
						},
						{
							"name": "param",
							"content": "List of files.",
							"types": [
								"Array"
							],
							"variable": "$0.filesList"
						},
						{
							"name": "param",
							"content": "Maximum upload size in bytes allowed for the site.",
							"types": [
								"number"
							],
							"variable": "$0.maxUploadFileSize"
						},
						{
							"name": "param",
							"content": "Function called when an error happens.",
							"types": [
								"function"
							],
							"variable": "$0.onError"
						},
						{
							"name": "param",
							"content": "Function called each time a file or a temporary representation of the file is available.",
							"types": [
								"function"
							],
							"variable": "$0.onFileChange"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/media-upload/media-upload.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMimeTypesArray",
				"namespace": "editor",
				"aliases": [],
				"line": 50,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "wpMimeTypesObject",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Browsers may use unexpected mime types, and they differ from browser to browser.",
					"long_description": "This function computes a flexible array of mime types from the mime type structured provided by the server.\nConverts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\nThe computation of this array instead of directly using the object,\nsolves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=227004",
					"tags": [
						{
							"name": "param",
							"content": "Mime type object received from the server.\n                                   Extensions are keys separated by '|' and values are mime types associated with an extension.",
							"types": [
								"Object"
							],
							"variable": "wpMimeTypesObject"
						},
						{
							"name": "return",
							"content": "An array of mime types or the parameter passed if it was \"falsy\".",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 83,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.allowedTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.additionalData",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.filesList",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.maxUploadFileSize",
						"default": null,
						"type": "number"
					},
					{
						"name": "$0.onError",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.onFileChange",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.wpAllowedMimeTypes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Media Upload is used by audio, image, gallery, video, and file blocks to",
					"long_description": "\thandle uploading a media file when a file upload button is activated.\n\n\tTODO: future enhancement to add an upload indicator.",
					"tags": [
						{
							"name": "param",
							"content": "Parameters object passed to the function.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Array with the types of media that can be uploaded, if unset all types are allowed.",
							"types": [
								"Array"
							],
							"variable": "$0.allowedTypes"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "$0.additionalData"
						},
						{
							"name": "param",
							"content": "List of files.",
							"types": [
								"Array"
							],
							"variable": "$0.filesList"
						},
						{
							"name": "param",
							"content": "Maximum upload size in bytes allowed for the site.",
							"types": [
								"number"
							],
							"variable": "$0.maxUploadFileSize"
						},
						{
							"name": "param",
							"content": "Function called when an error happens.",
							"types": [
								"function"
							],
							"variable": "$0.onError"
						},
						{
							"name": "param",
							"content": "Function called each time a file or a temporary representation of the file is available.",
							"types": [
								"function"
							],
							"variable": "$0.onFileChange"
						},
						{
							"name": "param",
							"content": "List of allowed mime types and file extensions.",
							"types": [
								"Object"
							],
							"variable": "$0.wpAllowedMimeTypes"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_mediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 94,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					},
					{
						"name": "additionalData",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Media File to Save.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "additionalData"
						},
						{
							"name": "return",
							"content": "Media Object Promise.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/terms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "buildTermsTree",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "flatTerms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns terms in a tree form.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of terms in flat format.",
							"types": [
								"Array"
							],
							"variable": "flatTerms"
						},
						{
							"name": "return",
							"content": "Array of terms in tree format.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getWPAdminURL",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "page",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the URL of a WPAdmin Page.",
					"long_description": "\nTODO: This should be moved to a module less specific to the editor.",
					"tags": [
						{
							"name": "param",
							"content": "Page to navigate to.",
							"types": [
								"string"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Query Args.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "WPAdmin URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cleanForSlug",
				"namespace": "editor",
				"aliases": [],
				"line": 52,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "string",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs some basic cleanup of a string for use as a post slug",
					"long_description": "\nThis replicates some of what santize_title() does in WordPress core, but\nis only designed to approximate what the slug will be.\n\nConverts whitespace, periods, forward slashes and underscores to hyphens.\nConverts Latin-1 Supplement and Latin Extended-A letters to basic Latin\nletters. Removes combining diacritical marks. Converts remaining string\nto lowercase. It does not touch octets, HTML entities, or other encoded\ncharacters.",
					"tags": [
						{
							"name": "param",
							"content": "Title or slug to be processed",
							"types": [
								"string"
							],
							"variable": "string"
						},
						{
							"name": "return",
							"content": "Processed string",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/with-change-detection/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withChangeDetection",
				"namespace": "editor",
				"aliases": [],
				"line": 29,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.ignoreTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.resetTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator for tracking changes to state over time. The",
					"long_description": "returned reducer will include a `isDirty` property on the object reflecting\nwhether the original reference of the reducer has changed.",
					"tags": [
						{
							"name": "param",
							"content": "Optional options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Action types upon which to skip check.",
							"types": [
								"Array"
							],
							"variable": "options.ignoreTypes"
						},
						{
							"name": "param",
							"content": "Action types upon which to reset dirty.",
							"types": [
								"Array"
							],
							"variable": "options.resetTypes"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build/utils/with-history/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withHistory",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.resetTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.ignoreTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.shouldOverwriteState",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which transforms the result of the original",
					"long_description": "reducer into an object tracking its own history (past, present, future).",
					"tags": [
						{
							"name": "param",
							"content": "Optional options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Action types upon which to\n                                                clear past.",
							"types": [
								"Array"
							],
							"variable": "options.resetTypes"
						},
						{
							"name": "param",
							"content": "Action types upon which to\n                                                avoid history tracking.",
							"types": [
								"Array"
							],
							"variable": "options.ignoreTypes"
						},
						{
							"name": "param",
							"content": "Function receiving last and\n                                                current actions, returning\n                                                boolean indicating whether\n                                                present should be merged,\n                                                rather than add undo level.",
							"types": [
								"function"
							],
							"variable": "options.shouldOverwriteState"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/autocomplete/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withFilteredAutocompleters",
				"namespace": "editor",
				"aliases": [],
				"line": 48,
				"end_line": 141,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "Autocomplete",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Wrap the default Autocomplete component with one that",
					"long_description": "supports a filter hook for customizing its list of autocompleters.\n\nSince there may be many Autocomplete instances at one time, this component\napplies the filter on demand, when the component is first focused after\nreceiving a new list of completers.\n\nThis function is exported for unit test.",
					"tags": [
						{
							"name": "param",
							"content": "Original component.",
							"types": [
								"function"
							],
							"variable": "Autocomplete"
						},
						{
							"name": "return",
							"content": "Wrapped component",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/autocompleters/block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "defaultGetBlockInsertionParentClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the client ID of the parent where a newly inserted block would be",
					"long_description": "placed.",
					"tags": [
						{
							"name": "return",
							"content": "Client ID of the parent where a newly inserted block would\n                 be placed.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "defaultGetInserterItems",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the inserter items for the specified parent block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the block for which to retrieve\n                             inserter items.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "The inserter items for the specified\n                                     parent.",
							"types": [
								"Array.<Editor.InserterItem>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "defaultGetSelectedBlockName",
				"namespace": "editor",
				"aliases": [],
				"line": 47,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the name of the currently selected block.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The name of the currently selected block or `null` if no\n                  block is selected.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockCompleter",
				"namespace": "editor",
				"aliases": [],
				"line": 62,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Creates a blocks repeater for replacing the current block with a selected block type.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "A blocks completer.",
							"types": [
								"Completer"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/autocompleters/user.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/block-edit/context.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/block-list/breadcrumb.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/block-mover/mover-description.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockMoverDescription",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "firstIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "isFirst",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "isLast",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "dir",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Return a label for the block movement controls depending on block position.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Number of blocks selected.",
							"types": [
								"number"
							],
							"variable": "selectedCount"
						},
						{
							"name": "param",
							"content": "Block type - in the case of a single block, should\n                                define its 'type'. I.e. 'Text', 'Heading', 'Image' etc.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "The index (position - 1) of the first block selected.",
							"types": [
								"number"
							],
							"variable": "firstIndex"
						},
						{
							"name": "param",
							"content": "This is the first block.",
							"types": [
								"boolean"
							],
							"variable": "isFirst"
						},
						{
							"name": "param",
							"content": "This is the last block.",
							"types": [
								"boolean"
							],
							"variable": "isLast"
						},
						{
							"name": "param",
							"content": "Direction of movement (> 0 is considered to be going\n                                down, < 0 is up).",
							"types": [
								"number"
							],
							"variable": "dir"
						},
						{
							"name": "return",
							"content": "Label for the block movement controls.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiBlockMoverDescription",
				"namespace": "editor",
				"aliases": [],
				"line": 69,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "firstIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "isFirst",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "isLast",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "dir",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Return a label for the block movement controls depending on block position.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Number of blocks selected.",
							"types": [
								"number"
							],
							"variable": "selectedCount"
						},
						{
							"name": "param",
							"content": "The index (position - 1) of the first block selected.",
							"types": [
								"number"
							],
							"variable": "firstIndex"
						},
						{
							"name": "param",
							"content": "This is the first block.",
							"types": [
								"boolean"
							],
							"variable": "isFirst"
						},
						{
							"name": "param",
							"content": "This is the last block.",
							"types": [
								"boolean"
							],
							"variable": "isLast"
						},
						{
							"name": "param",
							"content": "Direction of movement (> 0 is considered to be going\n                                down, < 0 is up).",
							"types": [
								"number"
							],
							"variable": "dir"
						},
						{
							"name": "return",
							"content": "Label for the block movement controls.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/block-preview/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockPreview",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Block Preview Component: It renders a preview given a block name and attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Rendered element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/block-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getActiveStyle",
				"namespace": "editor",
				"aliases": [],
				"line": 34,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					},
					{
						"name": "className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the active style from the given className.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block style variations.",
							"types": [
								"Array"
							],
							"variable": "styles"
						},
						{
							"name": "param",
							"content": "Class name",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "return",
							"content": "The active style.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceActiveStyle",
				"namespace": "editor",
				"aliases": [],
				"line": 83,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "className",
						"default": null,
						"type": "string"
					},
					{
						"name": "activeStyle",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newStyle",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Replaces the active style in the block's className.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Class name.",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "param",
							"content": "The replaced style.",
							"types": [
								"Object"
							],
							"variable": "activeStyle"
						},
						{
							"name": "param",
							"content": "The replacing style.",
							"types": [
								"Object"
							],
							"variable": "newStyle"
						},
						{
							"name": "return",
							"content": "The updated className.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/block-title/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockTitle",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Renders the block's configured title as a string, or empty if the title",
					"long_description": "cannot be determined.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "props.name"
						},
						{
							"name": "return",
							"content": "Block title.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/colors/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getColorClassName",
				"namespace": "editor",
				"aliases": [],
				"line": 58,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorContextName",
						"default": null,
						"type": "string"
					},
					{
						"name": "colorSlug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a class based on the context a color is being used and its slug.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Context/place where color is being used e.g: background, text etc...",
							"types": [
								"string"
							],
							"variable": "colorContextName"
						},
						{
							"name": "param",
							"content": "Slug of the color.",
							"types": [
								"string"
							],
							"variable": "colorSlug"
						},
						{
							"name": "return",
							"content": "String with the class corresponding to the color in the provided context.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMostReadableColor",
				"namespace": "editor",
				"aliases": [],
				"line": 74,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colors",
						"default": null,
						"type": "Array"
					},
					{
						"name": "colorValue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an array of color objects and a color value returns the color value of the most readable color in the array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of color objects as set by the theme or by the editor defaults.",
							"types": [
								"Array"
							],
							"variable": "colors"
						},
						{
							"name": "param",
							"content": "A string containing the color value.",
							"types": [
								"string"
							],
							"variable": "colorValue"
						},
						{
							"name": "return",
							"content": "String with the color value of the most readable color.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/colors/with-colors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withCustomColorPalette",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorsArray",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Higher order component factory for injecting the `colorsArray` argument as",
					"long_description": "the colors prop in the `withCustomColors` HOC.",
					"tags": [
						{
							"name": "param",
							"content": "An array of color objects.",
							"types": [
								"Array"
							],
							"variable": "colorsArray"
						},
						{
							"name": "return",
							"content": "The higher order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withEditorColorPalette",
				"namespace": "editor",
				"aliases": [],
				"line": 55,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Higher order component factory for injecting the editor colors as the",
					"long_description": "`colors` prop in the `withColors` HOC.",
					"tags": [
						{
							"name": "return",
							"content": "The higher order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createColorHOC",
				"namespace": "editor",
				"aliases": [],
				"line": 74,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "withColorPalette",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Helper function used with `createHigherOrderComponent` to create",
					"long_description": "higher order components for managing color logic.",
					"tags": [
						{
							"name": "param",
							"content": "An array of color types (e.g. 'backgroundColor, borderColor).",
							"types": [
								"Array"
							],
							"variable": "colorTypes"
						},
						{
							"name": "param",
							"content": "A HOC for injecting the 'colors' prop into the WrappedComponent.",
							"types": [
								"function"
							],
							"variable": "withColorPalette"
						},
						{
							"name": "return",
							"content": "The component that can be used as a HOC.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createCustomColorsHOC",
				"namespace": "editor",
				"aliases": [],
				"line": 195,
				"end_line": 205,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorsArray",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "A higher-order component factory for creating a 'withCustomColors' HOC, which handles color logic",
					"long_description": "for class generation color value, retrieval and color attribute setting.\n\nUse this higher-order component to work with a custom set of colors.",
					"tags": [
						{
							"name": "param",
							"content": "The array of color objects (name, slug, color, etc... ).",
							"types": [
								"Array"
							],
							"variable": "colorsArray"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 231,
				"end_line": 239,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorTypes",
						"default": null,
						"type": "object"
					}
				],
				"doc": {
					"description": "A higher-order component, which handles color logic for class generation color value, retrieval and color attribute setting.",
					"long_description": "\nFor use with the default editor/theme color palette.",
					"tags": [
						{
							"name": "param",
							"content": "The arguments can be strings or objects. If the argument is an object,\n                                       it should contain the color attribute name as key and the color context as value.\n                                       If the argument is a string the value should be the color attribute name,\n                                       the color context is computed by applying a kebab case transform to the value.\n                                       Color context represents the context/place where the color is going to be used.\n                                       The class name of the color is generated using 'has' followed by the color name\n                                       and ending with the color context all in kebab case e.g: has-green-background-color.",
							"types": [
								"object",
								"string"
							],
							"variable": "colorTypes"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/document-outline/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "computeOutlineHeadings",
				"namespace": "editor",
				"aliases": [],
				"line": 55,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an array of heading blocks enhanced with the following properties:",
					"long_description": "path    - An array of blocks that are ancestors of the heading starting from a top-level node.\n          Can be an empty array if the heading is a top-level node (is not nested inside another block).\nlevel   - An integer with the heading level.\nisEmpty - Flag indicating if the heading has no content.",
					"tags": [
						{
							"name": "param",
							"content": "An array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "An array of blocks that are ancestors of the blocks passed as blocks.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "An array of heading blocks enhanced with the properties described above.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/font-sizes/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFontSizeClass",
				"namespace": "editor",
				"aliases": [],
				"line": 41,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fontSizeSlug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a class based on fontSizeName.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Slug of the fontSize.",
							"types": [
								"string"
							],
							"variable": "fontSizeSlug"
						},
						{
							"name": "return",
							"content": "String with the class corresponding to the fontSize passed.\n                 The class is generated by appending 'has-' followed by fontSizeSlug in kebabCase and ending with '-font-size'.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/font-sizes/with-font-sizes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 36,
				"end_line": 148,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "args",
						"default": null,
						"type": "object"
					}
				],
				"doc": {
					"description": "Higher-order component, which handles font size logic for class generation,",
					"long_description": "font size value retrieval, and font size change handling.",
					"tags": [
						{
							"name": "param",
							"content": "The arguments should all be strings\n                                 Each string contains the font size attribute name e.g: 'fontSize'.",
							"types": [
								"object",
								"string"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/ignore-nested-events/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/inserter/menu.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "This is a placeholder for the media upload component necessary to make it possible to provide",
					"long_description": "an integration with the core blocks that handle media files. By default it renders nothing but\nit provides a way to have it overridden with the `editor.MediaUpload` filter.",
					"tags": [
						{
							"name": "return",
							"content": "Media upload element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/navigable-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/observe-typing/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isKeyDownEligibleForStartTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Returns true if a given keydown event can be inferred as intent to start",
					"long_description": "typing, or false otherwise. A keydown is considered eligible if it is a\ntext navigation without shift active.",
					"tags": [
						{
							"name": "param",
							"content": "Keydown event to test.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "Whether event is eligible to start typing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-preview-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-saved-state/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-taxonomies/flat-term-selector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unescapeTerm",
				"namespace": "editor",
				"aliases": [],
				"line": 51,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "term",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a term object with name unescaped.",
					"long_description": "The unescape of the name propery is done using lodash unescape function.",
					"tags": [
						{
							"name": "param",
							"content": "The term object to unescape.",
							"types": [
								"Object"
							],
							"variable": "term"
						},
						{
							"name": "return",
							"content": "Term object with name property unescaped.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unescapeTerms",
				"namespace": "editor",
				"aliases": [],
				"line": 66,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "terms",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an array of term objects with names unescaped.",
					"long_description": "The unescape of each term is performed using the unescapeTerm function.",
					"tags": [
						{
							"name": "param",
							"content": "Array of term objects to unescape.",
							"types": [
								"Array.<Object>"
							],
							"variable": "terms"
						},
						{
							"name": "return",
							"content": "Array of therm objects unscaped.",
							"types": [
								"Array.<Object>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-taxonomies/hierarchical-term-selector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-text-editor/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "value",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Handles a textarea change event to notify the onChange prop callback and",
					"long_description": "reflect the new value in the component's own state. This marks the start\nof the user's edits, if not already changed, preventing future props\nchanges to value from replacing the rendered value. This is expected to\nbe followed by a reset to dirty state via `stopEditing`.",
					"tags": [
						{
							"name": "param",
							"content": "Change event.",
							"types": [
								"Event"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-title/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/post-type-support-check/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTypeSupportCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "props.children",
						"default": null,
						"type": "WPElement"
					},
					{
						"name": "props.supportKeys",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "A component which renders its own children only if the current editor post",
					"long_description": "type supports one of the given `supportKeys` prop.",
					"tags": [
						{
							"name": "param",
							"content": "Current post type.",
							"types": [
								"Object"
							],
							"variable": "props.postType"
						},
						{
							"name": "param",
							"content": "Children to be rendered if post\n                                             type supports.",
							"types": [
								"WPElement"
							],
							"variable": "props.children"
						},
						{
							"name": "param",
							"content": "String or string array of keys\n                                             to test.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "props.supportKeys"
						},
						{
							"name": "return",
							"content": "Rendered element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/preserve-scroll-in-reorder/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/rich-text/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/rich-text/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/rich-text/list-edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectedListNode",
				"namespace": "editor",
				"aliases": [],
				"line": 26,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Gets the selected list node, which is the closest list node to the start of",
					"long_description": "the selection.",
					"tags": [
						{
							"name": "return",
							"content": "The selected list node, or undefined if none is selected.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isListRootSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 60,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Whether or not the root list is selected.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "True if the root list or nothing is selected, false if an\n                  inner list is selected.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isActiveListType",
				"namespace": "editor",
				"aliases": [],
				"line": 76,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tagName",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootTagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Wether or not the selected list has the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The tag name the list should have.",
							"types": [
								"string"
							],
							"variable": "tagName"
						},
						{
							"name": "param",
							"content": "The current root tag name, to compare with in\n                             case nothing is selected.",
							"types": [
								"string"
							],
							"variable": "rootTagName"
						},
						{
							"name": "return",
							"content": "[description]",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/rich-text/remove-browser-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/rich-text/tinymce.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyInternetExplorerInputFix",
				"namespace": "editor",
				"aliases": [],
				"line": 54,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "editorNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Applies a fix that provides `input` events for contenteditable in Internet Explorer.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The root editor node.",
							"types": [
								"Element"
							],
							"variable": "editorNode"
						},
						{
							"name": "return",
							"content": "A function to remove the fix (for cleanup).",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapTextInputEvent",
				"namespace": "editor\\applyInternetExplorerInputFix",
				"aliases": [],
				"line": 64,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "textInputEvent",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Dispatches `input` events in response to `textinput` events.",
					"long_description": "\nIE provides a `textinput` event that is similar to an `input` event,\nand we use it to manually dispatch an `input` event.\n`textinput` is dispatched for text entry but for not deletions.",
					"tags": [
						{
							"name": "param",
							"content": "An Internet Explorer `textinput` event.",
							"types": [
								"Event"
							],
							"variable": "textInputEvent"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapDeletionKeyUpEvents",
				"namespace": "editor\\applyInternetExplorerInputFix",
				"aliases": [],
				"line": 89,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "keyUp",
						"default": null,
						"type": "KeyboardEvent"
					},
					{
						"name": "keyUp.target",
						"default": null,
						"type": "Node"
					},
					{
						"name": "keyUp.keyCode",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Dispatches `input` events in response to Delete and Backspace keyup.",
					"long_description": "\nIt would be better dispatch an `input` event after each deleting\n`keydown` because the DOM is updated after each, but it is challenging\nto determine the right time to dispatch `input` since propagation of\n`keydown` can be stopped at any point.\n\nIt's easier to listen for `keyup` in the capture phase and dispatch\n`input` before `keyup` propagates further. It's not perfect, but should\nbe good enough.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"KeyboardEvent"
							],
							"variable": "keyUp"
						},
						{
							"name": "param",
							"content": "The event target.",
							"types": [
								"Node"
							],
							"variable": "keyUp.target"
						},
						{
							"name": "param",
							"content": "The key code.",
							"types": [
								"number"
							],
							"variable": "keyUp.keyCode"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/components/writing-flow/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isNavigationCandidate",
				"namespace": "editor",
				"aliases": [],
				"line": 54,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "keyCode",
						"default": null,
						"type": "number"
					},
					{
						"name": "hasModifier",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the element should consider edge navigation upon a keyboard",
					"long_description": "event of the given directional key code, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "HTML element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "KeyboardEvent keyCode to test.",
							"types": [
								"number"
							],
							"variable": "keyCode"
						},
						{
							"name": "param",
							"content": "Whether a modifier is pressed.",
							"types": [
								"boolean"
							],
							"variable": "hasModifier"
						},
						{
							"name": "return",
							"content": "Whether element should consider edge navigation.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/ast/parse.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "updatePosition",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 21,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Update lineno and column based on `str`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "position",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 37,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Mark position and patch `node.position`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "Position",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 53,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Store position information for a node",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stylesheet",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 92,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse stylesheet.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "open",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 108,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Opening brace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "close",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 116,
				"end_line": 118,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Closing brace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rules",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 124,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse ruleset.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "match",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 144,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Match `re` and return captures.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "whitespace",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 161,
				"end_line": 163,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse whitespace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comments",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 169,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse comments;",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 186,
				"end_line": 214,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse comment.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "selector",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 220,
				"end_line": 235,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse selector.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 241,
				"end_line": 266,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse declaration.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declarations",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 272,
				"end_line": 295,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse declarations.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 301,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse keyframe.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atkeyframes",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 326,
				"end_line": 366,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse keyframes.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atsupports",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 372,
				"end_line": 397,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse supports.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "athost",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 403,
				"end_line": 425,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse host.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atmedia",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 431,
				"end_line": 456,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atcustommedia",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 462,
				"end_line": 475,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse custom-media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atpage",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 481,
				"end_line": 513,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse paged media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atdocument",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 519,
				"end_line": 546,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse document.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atfontface",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 552,
				"end_line": 581,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse font-face.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "_compileAtrule",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 605,
				"end_line": 621,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse non-block at-rules",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atrule",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 627,
				"end_line": 633,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse at rule.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 639,
				"end_line": 653,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse rule.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "trim",
				"namespace": "editor",
				"aliases": [],
				"line": 661,
				"end_line": 663,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Trim `str`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "addParent",
				"namespace": "editor",
				"aliases": [],
				"line": 669,
				"end_line": 695,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Adds non-enumerable parent node reference to each node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/ast/stringify/compiler.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Compiler",
				"namespace": "editor",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "Type"
					}
				],
				"doc": {
					"description": "Initialize a compiler.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Type"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"Type"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "emit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Emit `str`",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "visit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 32,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "mapVisit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 40,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Map visit over array of `nodes`, optionally using a `delim`",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/ast/stringify/compress.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Compiler",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Initialize a new `Compiler`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "compile",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 35,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Compile `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 43,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit comment node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "import",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 51,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit import node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "media",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 59,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "document",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 67,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit document node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "charset",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 76,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit charset node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "namespace",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 84,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit namespace node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 92,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit supports node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframes",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 100,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframes node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 108,
				"end_line": 111,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframe node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "page",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 117,
				"end_line": 120,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit page node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'font-face'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 126,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit font-face node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "host",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 134,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit host node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'custom-media'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 142,
				"end_line": 144,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit custom-media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 150,
				"end_line": 158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit rule node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 164,
				"end_line": 166,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit declaration node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/ast/stringify/identity.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Compiler",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Initialize a new `Compiler`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "compile",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 38,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Compile `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stylesheet",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 46,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit stylesheet node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 54,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit comment node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "import",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 62,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit import node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "media",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 70,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "document",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 78,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit document node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "charset",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 87,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit charset node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "namespace",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 95,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit namespace node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 103,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit supports node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframes",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 111,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframes node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 119,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframe node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "page",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 128,
				"end_line": 131,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit page node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'font-face'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 137,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit font-face node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "host",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 145,
				"end_line": 147,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit host node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'custom-media'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 153,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit custom-media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 161,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit rule node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 178,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit declaration node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "indent",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 186,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Increase, decrease or return current indentation.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/ast/stringify/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 23,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Stringfy the given AST `node`.",
					"long_description": "\nOptions:\n\n - `compress` space-optimized output\n - `sourcemap` return an object with `.code` and `.map`",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"String"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "transformStyles",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					},
					{
						"name": "wrapperClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Convert css rules.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "CSS rules.",
							"types": [
								"Array"
							],
							"variable": "styles"
						},
						{
							"name": "param",
							"content": "Wrapper Class Name.",
							"types": [
								"string"
							],
							"variable": "wrapperClassName"
						},
						{
							"name": "return",
							"content": "converted rules.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/transforms/url-rewrite.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isRemotePath",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "filePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Return `true` if the given path is http/https.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "path",
							"types": [
								"string"
							],
							"variable": "filePath"
						},
						{
							"name": "return",
							"content": "is remote path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAbsolutePath",
				"namespace": "editor",
				"aliases": [],
				"line": 27,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "filePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Return `true` if the given filePath is an absolute url.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "path",
							"types": [
								"string"
							],
							"variable": "filePath"
						},
						{
							"name": "return",
							"content": "is absolute path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidURL",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "meta",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the url should be inluded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "url meta info",
							"types": [
								"Object"
							],
							"variable": "meta"
						},
						{
							"name": "return",
							"content": "is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getResourcePath",
				"namespace": "editor",
				"aliases": [],
				"line": 67,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "str",
						"default": null,
						"type": "string"
					},
					{
						"name": "baseURL",
						"default": null,
						"type": "string"
					},
					{
						"name": "absolutePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Get the absolute path of the url, relative to the basePath",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the url",
							"types": [
								"string"
							],
							"variable": "str"
						},
						{
							"name": "param",
							"content": "base URL",
							"types": [
								"string"
							],
							"variable": "baseURL"
						},
						{
							"name": "param",
							"content": "the absolute path",
							"types": [
								"string"
							],
							"variable": "absolutePath"
						},
						{
							"name": "return",
							"content": "the full path to the file",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "processURL",
				"namespace": "editor",
				"aliases": [],
				"line": 80,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "baseURL",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Process the single `url()` pattern",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the base URL for relative URLs",
							"types": [
								"string"
							],
							"variable": "baseURL"
						},
						{
							"name": "return",
							"content": "the Promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getURLs",
				"namespace": "editor",
				"aliases": [],
				"line": 97,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Get all `url()`s, and return the meta info",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "decl.value",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "the urls",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceURLs",
				"namespace": "editor",
				"aliases": [],
				"line": 128,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "raw",
						"default": null,
						"type": "string"
					},
					{
						"name": "URLs",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Replace the raw value's `url()` segment to the new value",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the raw value",
							"types": [
								"string"
							],
							"variable": "raw"
						},
						{
							"name": "param",
							"content": "the URLs to replace",
							"types": [
								"Array"
							],
							"variable": "URLs"
						},
						{
							"name": "return",
							"content": "the new value",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/editor-styles/transforms/wrap.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/hooks/align.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getValidAlignments",
				"namespace": "editor",
				"aliases": [],
				"line": 54,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAlign",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "hasWideBlockSupport",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "hasWideEnabled",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the valid alignments.",
					"long_description": "Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\nExported just for testing purposes, not exported outside the module.",
					"tags": [
						{
							"name": "param",
							"content": "Aligns supported by the block.",
							"types": [
								"boolean",
								"Array.<string>"
							],
							"variable": "blockAlign"
						},
						{
							"name": "param",
							"content": "True if block supports wide alignments. And False otherwise.",
							"types": [
								"boolean"
							],
							"variable": "hasWideBlockSupport"
						},
						{
							"name": "param",
							"content": "True if theme supports wide alignments. And False otherwise.",
							"types": [
								"boolean"
							],
							"variable": "hasWideEnabled"
						},
						{
							"name": "return",
							"content": "Valid alignments.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 81,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes to include `align`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addAssignedAlign",
				"namespace": "editor",
				"aliases": [],
				"line": 186,
				"end_line": 200,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject alignment class name if",
					"long_description": "block supports it.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Block type",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Block attributes",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/hooks/anchor.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 95,
				"end_line": 101,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/hooks/custom-class-name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 32,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 84,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLRootElementClasses",
				"namespace": "editor",
				"aliases": [],
				"line": 100,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string, returns an array of class names assigned to the root",
					"long_description": "element in the markup.",
					"tags": [
						{
							"name": "param",
							"content": "Markup string from which to extract classes.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Array of class names assigned to the root element.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addParsedDifference",
				"namespace": "editor",
				"aliases": [],
				"line": 123,
				"end_line": 143,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a parsed set of block attributes, if the block supports custom class",
					"long_description": "names and an unknown class (per the block's serialization behavior) is\nfound, the unknown classes are treated as custom classes. This prevents the\nblock from being considered as invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Original block attributes.",
							"types": [
								"Object"
							],
							"variable": "blockAttributes"
						},
						{
							"name": "param",
							"content": "Block type settings.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Original block markup.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Filtered block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/hooks/custom-class-name.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 47,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLRootElementClasses",
				"namespace": "editor",
				"aliases": [],
				"line": 63,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string, returns an array of class names assigned to the root",
					"long_description": "element in the markup.",
					"tags": [
						{
							"name": "param",
							"content": "Markup string from which to extract classes.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Array of class names assigned to the root element.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addParsedDifference",
				"namespace": "editor",
				"aliases": [],
				"line": 86,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a parsed set of block attributes, if the block supports custom class",
					"long_description": "names and an unknown class (per the block's serialization behavior) is\nfound, the unknown classes are treated as custom classes. This prevents the\nblock from being considered as invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Original block attributes.",
							"types": [
								"Object"
							],
							"variable": "blockAttributes"
						},
						{
							"name": "param",
							"content": "Block type settings.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Original block markup.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Filtered block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/hooks/generated-class-name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addGeneratedClassName",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject generated className if",
					"long_description": "block supports it. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setupEditor",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					},
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that editor has initialized with",
					"long_description": "the specified post object and editor settings.",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "param",
							"content": "Initial edited attributes object.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetPost",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the latest version of the",
					"long_description": "post has been received, either by initialization or save.",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the latest autosave of the",
					"long_description": "post has been received, by initialization or autosave.",
					"tags": [
						{
							"name": "param",
							"content": "Autosave post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updatePost",
				"namespace": "editor",
				"aliases": [],
				"line": 68,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a patch of updates for the",
					"long_description": "latest version of the post have been received.",
					"tags": [
						{
							"name": "param",
							"content": "Updated post fields.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setupEditorState",
				"namespace": "editor",
				"aliases": [],
				"line": 83,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used to setup the editor state when first opening an editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "param",
							"content": "Array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 100,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that blocks state should be",
					"long_description": "reset to the specified array of blocks, taking precedence over any other\ncontent reflected as an edit in state.",
					"tags": [
						{
							"name": "param",
							"content": "Array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 116,
				"end_line": 121,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that blocks have been received.",
					"long_description": "Unlike resetBlocks, these should be appended to the existing known set, not\nreplacing.",
					"tags": [
						{
							"name": "param",
							"content": "Array of block objects.",
							"types": [
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlockAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 132,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block attributes with",
					"long_description": "the specified client ID has been updated.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Block attributes to be merged.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 149,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updates",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID has been updated.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Block attributes to be merged.",
							"types": [
								"Object"
							],
							"variable": "updates"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "selectBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 169,
				"end_line": 176,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "initialPosition",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID has been selected, optionally accepting a position\nvalue reflecting its selection directionality. An initialPosition of -1\nreflects a reverse selection.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Optional initial position. Pass as -1 to\n                                 reflect reverse selection.",
							"types": [
								"number"
							],
							"variable": "initialPosition"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 208,
				"end_line": 214,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isSelectionEnabled",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object that enables or disables block selection.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Whether block selection should\n                                           be enabled.",
							"types": [
								"boolean"
							],
							"variable": "isSelectionEnabled"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 225,
				"end_line": 232,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that a blocks should be replaced with",
					"long_description": "one or more replacement blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID(s) to replace.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientIds"
						},
						{
							"name": "param",
							"content": "Replacement block(s).",
							"types": [
								"Object",
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 243,
				"end_line": 245,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that a single block should be replaced",
					"long_description": "with one or more replacement blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID to replace.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Replacement block(s).",
							"types": [
								"Object",
								"Array.<Object>"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createOnMove",
				"namespace": "editor",
				"aliases": [],
				"line": 255,
				"end_line": 263,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order action creator which, given the action type to dispatch creates",
					"long_description": "an action creator for managing block movement.",
					"tags": [
						{
							"name": "param",
							"content": "Action type to dispatch.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Action creator.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "moveBlockToPosition",
				"namespace": "editor",
				"aliases": [],
				"line": 279,
				"end_line": 287,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "fromRootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "toRootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that an indexed block should be moved",
					"long_description": "to a new index.",
					"tags": [
						{
							"name": "param",
							"content": "The client ID of the block.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Root client ID source.",
							"types": [
								"string"
							],
							"variable": "fromRootClientId"
						},
						{
							"name": "param",
							"content": "Root client ID destination.",
							"types": [
								"string"
							],
							"variable": "toRootClientId"
						},
						{
							"name": "param",
							"content": "The index to move the block into.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 300,
				"end_line": 303,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updateSelection",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a single block should be",
					"long_description": "inserted, optionally at a specific index respective a root block list.",
					"tags": [
						{
							"name": "param",
							"content": "Block object to insert.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "If true block selection will be updated. If false, block selection will not change. Defaults to true.",
							"types": [
								"boolean"
							],
							"variable": "updateSelection"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 316,
				"end_line": 326,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array.<Object>"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updateSelection",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an array of blocks should",
					"long_description": "be inserted, optionally at a specific index respective a root block list.",
					"tags": [
						{
							"name": "param",
							"content": "Block objects to insert.",
							"types": [
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "If true block selection will be updated.  If false, block selection will not change. Defaults to true.",
							"types": [
								"boolean"
							],
							"variable": "updateSelection"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "showInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 338,
				"end_line": 344,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the insertion point should",
					"long_description": "be shown.",
					"tags": [
						{
							"name": "param",
							"content": "Optional root client ID of block list on\n                              which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hideInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 351,
				"end_line": 355,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object hiding the insertion point.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setTemplateValidity",
				"namespace": "editor",
				"aliases": [],
				"line": 364,
				"end_line": 369,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isValid",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object resetting the template validity.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "template validity flag.",
							"types": [
								"boolean"
							],
							"variable": "isValid"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "synchronizeTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 376,
				"end_line": 380,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object synchronize the template with the list of blocks",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "editPost",
				"namespace": "editor",
				"aliases": [],
				"line": 390,
				"end_line": 395,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that attributes of the post have",
					"long_description": "been edited.",
					"tags": [
						{
							"name": "param",
							"content": "Post attributes to edit.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "savePost",
				"namespace": "editor",
				"aliases": [],
				"line": 405,
				"end_line": 411,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.isAutosave",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object to save the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Options for the save.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Perform an autosave if true.",
							"types": [
								"boolean"
							],
							"variable": "options.isAutosave"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mergeBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 433,
				"end_line": 438,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "firstBlockClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "secondBlockClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that two blocks should be merged",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the first block to merge.",
							"types": [
								"string"
							],
							"variable": "firstBlockClientId"
						},
						{
							"name": "param",
							"content": "Client ID of the second block to merge.",
							"types": [
								"string"
							],
							"variable": "secondBlockClientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autosave",
				"namespace": "editor",
				"aliases": [],
				"line": 447,
				"end_line": 451,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the post should autosave.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Extra flags to identify the autosave.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "redo",
				"namespace": "editor",
				"aliases": [],
				"line": 459,
				"end_line": 463,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history should",
					"long_description": "restore last popped state.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "undo",
				"namespace": "editor",
				"aliases": [],
				"line": 470,
				"end_line": 474,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history should pop.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createUndoLevel",
				"namespace": "editor",
				"aliases": [],
				"line": 482,
				"end_line": 486,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history record should",
					"long_description": "be created.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 498,
				"end_line": 505,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectPrevious",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the blocks corresponding to",
					"long_description": "the set of specified client IDs are to be removed.",
					"tags": [
						{
							"name": "param",
							"content": "Client IDs of blocks to remove.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientIds"
						},
						{
							"name": "param",
							"content": "True if the previous block should be\n                                        selected when a block is removed.",
							"types": [
								"boolean"
							],
							"variable": "selectPrevious"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 517,
				"end_line": 519,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectPrevious",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID is to be removed.",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of block to remove.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "True if the previous block should be\n                                selected when a block is removed.",
							"types": [
								"boolean"
							],
							"variable": "selectPrevious"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleBlockMode",
				"namespace": "editor",
				"aliases": [],
				"line": 529,
				"end_line": 534,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle the block editing mode between",
					"long_description": "visual and HTML modes.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "startTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 541,
				"end_line": 545,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has begun to type.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 552,
				"end_line": 556,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has stopped typing.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enterFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 563,
				"end_line": 567,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the caret has entered formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exitFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 574,
				"end_line": 578,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user caret has exited formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updatePostLock",
				"namespace": "editor",
				"aliases": [],
				"line": 587,
				"end_line": 592,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lock",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to lock the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Details about the post lock status, user, and nonce.",
							"types": [
								"Object"
							],
							"variable": "lock"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalFetchReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 603,
				"end_line": 608,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to fetch a single reusable block or all",
					"long_description": "reusable blocks from the REST API into the store.",
					"tags": [
						{
							"name": "param",
							"content": "If given, only a single reusable block with this ID will\n                    be fetched.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalReceiveReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 620,
				"end_line": 625,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "results",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that reusable blocks have been",
					"long_description": "received. `results` is an array of objects containing:\n - `reusableBlock` - Details about how the reusable block is persisted.\n - `parsedBlock` - The original block.",
					"tags": [
						{
							"name": "param",
							"content": "Reusable blocks received.",
							"types": [
								"Array.<Object>"
							],
							"variable": "results"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalSaveReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 635,
				"end_line": 640,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to save a reusable block that's in the store to",
					"long_description": "the REST API.",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to save.",
							"types": [
								"Object"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalDeleteReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 649,
				"end_line": 654,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used to delete a reusable block via the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to delete.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalUpdateReusableBlockTitle",
				"namespace": "editor",
				"aliases": [],
				"line": 665,
				"end_line": 671,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "title",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a reusable block's title is",
					"long_description": "to be updated.",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to update.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The new title.",
							"types": [
								"string"
							],
							"variable": "title"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalConvertBlockToStatic",
				"namespace": "editor",
				"aliases": [],
				"line": 680,
				"end_line": 685,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to convert a reusable block into a static block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The client ID of the block to attach.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalConvertBlockToReusable",
				"namespace": "editor",
				"aliases": [],
				"line": 694,
				"end_line": 699,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to convert a static block into a reusable block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The client IDs of the block to detach.",
							"types": [
								"string"
							],
							"variable": "clientIds"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertDefaultBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 712,
				"end_line": 715,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a new block of the default",
					"long_description": "type should be added to the block list.",
					"tags": [
						{
							"name": "param",
							"content": "Optional attributes of the block to assign.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which\n                              to append.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "Optional index where to insert the default block",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlockListSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 726,
				"end_line": 732,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object that changes the nested settings of a given block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the block whose nested setting are\n                         being received.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Object with the new settings for the nested block.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enablePublishSidebar",
				"namespace": "editor",
				"aliases": [],
				"line": 753,
				"end_line": 757,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has enabled the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "disablePublishSidebar",
				"namespace": "editor",
				"aliases": [],
				"line": 764,
				"end_line": 768,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has disabled the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "lockPostSaving",
				"namespace": "editor",
				"aliases": [],
				"line": 777,
				"end_line": 782,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to signal that post saving is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The lock name.",
							"types": [
								"string"
							],
							"variable": "lockName"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unlockPostSaving",
				"namespace": "editor",
				"aliases": [],
				"line": 791,
				"end_line": 796,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to signal that post saving is unlocked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The lock name.",
							"types": [
								"string"
							],
							"variable": "lockName"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/array.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertAt",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "array",
						"default": null,
						"type": "Array"
					},
					{
						"name": "elements",
						"default": null,
						"type": "*"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert one or multiple elements into a given position of an array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Source array.",
							"types": [
								"Array"
							],
							"variable": "array"
						},
						{
							"name": "param",
							"content": "Elements to insert.",
							"types": [
								"*"
							],
							"variable": "elements"
						},
						{
							"name": "param",
							"content": "Insert Position.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Result.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "moveTo",
				"namespace": "editor",
				"aliases": [],
				"line": 31,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "array",
						"default": null,
						"type": "Array"
					},
					{
						"name": "from",
						"default": null,
						"type": "number"
					},
					{
						"name": "to",
						"default": null,
						"type": "number"
					},
					{
						"name": "count",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Moves an element in an array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Source array.",
							"types": [
								"Array"
							],
							"variable": "array"
						},
						{
							"name": "param",
							"content": "Source index.",
							"types": [
								"number"
							],
							"variable": "from"
						},
						{
							"name": "param",
							"content": "Destination index.",
							"types": [
								"number"
							],
							"variable": "to"
						},
						{
							"name": "param",
							"content": "Number of elements to move.",
							"types": [
								"number"
							],
							"variable": "count"
						},
						{
							"name": "return",
							"content": "Result.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/constants.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/defaults.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/effects/posts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/effects/reusable-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/effects/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "resolveSelector",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "namespace",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Waits for the resolution of a selector before returning the selector's value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store namespace.",
							"types": [
								"string"
							],
							"variable": "namespace"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector args.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Selector result.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/effects.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateBlocksToTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Block validity is a function of blocks state (at the point of a",
					"long_description": "reset) and the template setting. As a compromise to its placement\nacross distinct parts of state, it is implemented here as a side-\neffect of the block reset action.",
					"tags": [
						{
							"name": "param",
							"content": "RESET_BLOCKS action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "New validity set action if validity has changed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "selectPreviousBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 59,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Effect handler which will return a block select action to select the block",
					"long_description": "occurring before the selected block in the previous state, unless it is the\nsame block or the action includes a falsey `selectPrevious` option flag.",
					"tags": [
						{
							"name": "param",
							"content": "Action which had initiated the effect handler.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Block select action to select previous, if applicable.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "ensureDefaultBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 98,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Effect handler which will return a default block insertion action if there",
					"long_description": "are no other blocks at the root of the editor. This is expected to be used\nin actions which may result in no blocks remaining in the editor (removal,\nreplacement, etc).",
					"tags": [
						{
							"name": "param",
							"content": "Action which had initiated the effect handler.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Default block insert action, if no other blocks exist.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/middlewares.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyMiddlewares",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Applies the custom middlewares used specifically in the editor module.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store Object.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Update Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPostRawValue",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns a post attribute value, flattening nested rendered content using its",
					"long_description": "raw value in place of its original object form.",
					"tags": [
						{
							"name": "param",
							"content": "Original value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Raw value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapBlockOrder",
				"namespace": "editor",
				"aliases": [],
				"line": 56,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object where each key is a nesting",
					"long_description": "context, the value of which is an array of block client IDs existing within\nthat nesting context.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to map.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Assumed root client ID.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Block order map object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "flattenBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 81,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "transform",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Helper method to iterate through all blocks, recursing into inner blocks,",
					"long_description": "applying a transformation function to each one.\nReturns a flattened object with the transformed blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Transforming function to be applied to each block.",
							"types": [
								"function"
							],
							"variable": "transform"
						},
						{
							"name": "return",
							"content": "Flattened object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFlattenedBlocksWithoutAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 108,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object containing all blocks, without",
					"long_description": "attributes, recursing into inner blocks. Keys correspond to the block client\nID, the value of which is the attributes object.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Flattened block attributes object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFlattenedBlockAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 124,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object containing all block attributes,",
					"long_description": "recursing into inner blocks. Keys correspond to the block client ID, the\nvalue of which is the attributes object.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Flattened block attributes object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNestedBlockClientIds",
				"namespace": "editor",
				"aliases": [],
				"line": 145,
				"end_line": 150,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocksOrder",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block order map object, returns *all* of the block client IDs that are",
					"long_description": "a descendant of the given root client ID.\n\nCalling this with `rootClientId` set to `''` results in a list of client IDs\nthat are in the post. That is, it excludes blocks like fetched reusable\nblocks which are stored into state but not visible.",
					"tags": [
						{
							"name": "param",
							"content": "Object that maps block client IDs to a list of\n                              nested block client IDs.",
							"types": [
								"Object"
							],
							"variable": "blocksOrder"
						},
						{
							"name": "param",
							"content": "The root client ID to search. Defaults to ''.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "List of descendant client IDs.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMutateSafeObject",
				"namespace": "editor",
				"aliases": [],
				"line": 162,
				"end_line": 168,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "original",
						"default": null,
						"type": "Object"
					},
					{
						"name": "working",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an object against which it is safe to perform mutating operations,",
					"long_description": "given the original object and its current working copy.",
					"tags": [
						{
							"name": "param",
							"content": "Original object.",
							"types": [
								"Object"
							],
							"variable": "original"
						},
						{
							"name": "param",
							"content": "Working object.",
							"types": [
								"Object"
							],
							"variable": "working"
						},
						{
							"name": "return",
							"content": "Mutation-safe object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSameKeys",
				"namespace": "editor",
				"aliases": [],
				"line": 180,
				"end_line": 182,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the two object arguments have the same keys, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First object.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two objects have the same keys.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isUpdatingSameBlockAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 194,
				"end_line": 196,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are updating the same block attribute, or\nfalse otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether actions are updating the same block attribute.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isUpdatingSamePostProperty",
				"namespace": "editor",
				"aliases": [],
				"line": 208,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are editing the same post property, or\nfalse otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether actions are updating the same post property.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "shouldOverwriteState",
				"namespace": "editor",
				"aliases": [],
				"line": 222,
				"end_line": 228,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are modifying the same property such that\nundo history should be batched.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether to overwrite present state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withInnerBlocksRemoveCascade",
				"namespace": "editor",
				"aliases": [],
				"line": 238,
				"end_line": 256,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer targeting the combined editor reducer, augmenting",
					"long_description": "block client IDs in remove action to include cascade of inner blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withBlockReset",
				"namespace": "editor",
				"aliases": [],
				"line": 269,
				"end_line": 282,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which targets the combined blocks reducer and handles",
					"long_description": "the `RESET_BLOCKS` action. When dispatched, this action will replace all\nblocks that exist in the post, leaving blocks that exist only in state (e.g.\nreusable blocks) alone.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withSaveReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 295,
				"end_line": 321,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which targets the combined blocks reducer and handles",
					"long_description": "the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\nregular reducers and needs a higher-order reducer since it needs access to\nboth `byClientId` and `attributes` simultaneously.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "initialEdits",
				"namespace": "editor",
				"aliases": [],
				"line": 648,
				"end_line": 683,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the initial edits state. With matching shape to that of",
					"long_description": "`editor.edits`, the initial edits are those applied programmatically, are\nnot considered in prompting the user for unsaved changes, and are included\nin (and reset by) the next save payload.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Next state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "currentPost",
				"namespace": "editor",
				"aliases": [],
				"line": 694,
				"end_line": 716,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the last-known state of the current post, in the format",
					"long_description": "returned by the WP REST API.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 726,
				"end_line": 739,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning typing state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCaretWithinFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 749,
				"end_line": 762,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning whether the caret is within formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "blockSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 772,
				"end_line": 886,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the block selection's state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 909,
				"end_line": 927,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the block insertion point visibility, either null if there",
					"long_description": "is not an explicit insertion point assigned, or an object of its `index` and\n`rootClientId`.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "template",
				"namespace": "editor",
				"aliases": [],
				"line": 937,
				"end_line": 951,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning whether the post blocks match the defined template or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "settings",
				"namespace": "editor",
				"aliases": [],
				"line": 961,
				"end_line": 971,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the editor setting.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "preferences",
				"namespace": "editor",
				"aliases": [],
				"line": 981,
				"end_line": 1028,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the user preferences.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "saving",
				"namespace": "editor",
				"aliases": [],
				"line": 1039,
				"end_line": 1070,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning current network request state (whether a request to",
					"long_description": "the WP REST API is in progress, successful, or failed).",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "postLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1091,
				"end_line": 1103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "PostLockState"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the post lock status.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"PostLockState"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"PostLockState"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "postSavingLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1115,
				"end_line": 1128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "PostSavingLockState"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Post saving lock.",
					"long_description": "\nWhen post saving is locked, the post cannot be published or updated.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"PostSavingLockState"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"PostLockState"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autosave",
				"namespace": "editor",
				"aliases": [],
				"line": 1291,
				"end_line": 1315,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the most recent autosave.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The autosave object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "previewLink",
				"namespace": "editor",
				"aliases": [],
				"line": 1325,
				"end_line": 1351,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "string"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the post preview link.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The preview link",
							"types": [
								"string"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasEditorUndo",
				"namespace": "editor",
				"aliases": [],
				"line": 57,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if any past editor history snapshots exist, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether undo history exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasEditorRedo",
				"namespace": "editor",
				"aliases": [],
				"line": 69,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if any future editor history snapshots exist, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether redo history exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostNew",
				"namespace": "editor",
				"aliases": [],
				"line": 81,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the currently edited post is yet to be saved, or false if",
					"long_description": "the post has been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is new.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasChangedContent",
				"namespace": "editor",
				"aliases": [],
				"line": 92,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if content includes unsaved changes, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether content includes unsaved changes.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostDirty",
				"namespace": "editor",
				"aliases": [],
				"line": 109,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there are unsaved values for the current edit session, or",
					"long_description": "false if the editing state matches the saved or new post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether unsaved values exist.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCleanNewPost",
				"namespace": "editor",
				"aliases": [],
				"line": 137,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there are no unsaved values for the current edit session and",
					"long_description": "if the currently edited post is new (has never been saved before).",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether new post and unsaved values exist.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPost",
				"namespace": "editor",
				"aliases": [],
				"line": 150,
				"end_line": 152,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post currently being edited in its last known saved state, not",
					"long_description": "including unsaved edits. Returns an object containing relevant default post\nvalues if the post has not yet been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostType",
				"namespace": "editor",
				"aliases": [],
				"line": 161,
				"end_line": 163,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post type of the post currently being edited.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post type.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostId",
				"namespace": "editor",
				"aliases": [],
				"line": 173,
				"end_line": 175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the ID of the post currently being edited, or null if the post has",
					"long_description": "not yet been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "ID of current post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostRevisionsCount",
				"namespace": "editor",
				"aliases": [],
				"line": 184,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the number of revisions of the post currently being edited.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Number of revisions.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostLastRevisionId",
				"namespace": "editor",
				"aliases": [],
				"line": 196,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the last revision ID of the post currently being edited,",
					"long_description": "or null if the post has no revisions.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "ID of the last revision.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 246,
				"end_line": 252,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an attribute value of the saved post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Post attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Post attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 264,
				"end_line": 288,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a single attribute of the post being edited, preferring the unsaved",
					"long_description": "edit if one exists, but falling back to the attribute for the last known\nsaved state of the post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Post attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Post attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAutosaveAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 299,
				"end_line": 309,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an attribute value of the current autosave revision for a post, or",
					"long_description": "null if there is no autosave for the post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Autosave attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Autosave attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostVisibility",
				"namespace": "editor",
				"aliases": [],
				"line": 320,
				"end_line": 334,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current visibility of the post being edited, preferring the",
					"long_description": "unsaved value if different than the saved post. The return value is one of\n\"private\", \"password\", or \"public\".",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post visibility.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostPending",
				"namespace": "editor",
				"aliases": [],
				"line": 343,
				"end_line": 345,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if post is pending review.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether current post is pending review.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostPublished",
				"namespace": "editor",
				"aliases": [],
				"line": 354,
				"end_line": 357,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the current post has already been published.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post has been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostScheduled",
				"namespace": "editor",
				"aliases": [],
				"line": 366,
				"end_line": 368,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if post is already scheduled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether current post is scheduled to be posted.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostPublishable",
				"namespace": "editor",
				"aliases": [],
				"line": 377,
				"end_line": 384,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the post being edited can be published.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostSaveable",
				"namespace": "editor",
				"aliases": [],
				"line": 394,
				"end_line": 409,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post can be saved, or false otherwise. A post must",
					"long_description": "contain a title, an excerpt, or non-empty content to be valid for save.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can be saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostEmpty",
				"namespace": "editor",
				"aliases": [],
				"line": 420,
				"end_line": 456,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the edited post has content. A post has content if it has at",
					"long_description": "least one saveable block or otherwise has a non-empty content property\nassigned.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post has content.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostAutosaveable",
				"namespace": "editor",
				"aliases": [],
				"line": 465,
				"end_line": 489,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post can be autosaved, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can be autosaved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 500,
				"end_line": 502,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current autosave, or null if one is not set (i.e. if the post",
					"long_description": "has yet to be autosaved, or has been saved or published since the last\nautosave).",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Current autosave, if exists.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 511,
				"end_line": 513,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the true if there is an existing autosave, otherwise false.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether there is an existing autosave.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostBeingScheduled",
				"namespace": "editor",
				"aliases": [],
				"line": 523,
				"end_line": 528,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the post being edited is being scheduled. Preferring the",
					"long_description": "unsaved status values.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post has been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostDateFloating",
				"namespace": "editor",
				"aliases": [],
				"line": 543,
				"end_line": 553,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the current post should be considered to have a \"floating\"",
					"long_description": "date (i.e. that it would publish \"Immediately\" rather than at a set time).\n\nUnlike in the PHP backend, the REST API returns a full date string for posts\nwhere the 0000-00-00T00:00:00 placeholder is present in the database. To\ninfer that a post is set to publish \"Immediately\" we check whether the date\nand modified date are the same.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the edited post has a floating date value.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockName",
				"namespace": "editor",
				"aliases": [],
				"line": 586,
				"end_line": 589,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a block's name given its client ID, or null if no block exists with",
					"long_description": "the client ID.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockValid",
				"namespace": "editor",
				"aliases": [],
				"line": 599,
				"end_line": 602,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether a block is valid or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Is Valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockCount",
				"namespace": "editor",
				"aliases": [],
				"line": 790,
				"end_line": 792,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the number of blocks currently present in the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Number of blocks in the post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSelectionStart",
				"namespace": "editor",
				"aliases": [],
				"line": 803,
				"end_line": 805,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current block selection start. This value may be null, and it",
					"long_description": "may represent either a singular block selection or multi-selection start.\nA selection is singular if its start and end match.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block selection start.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSelectionEnd",
				"namespace": "editor",
				"aliases": [],
				"line": 816,
				"end_line": 818,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current block selection end. This value may be null, and it",
					"long_description": "may represent either a singular block selection or multi-selection end.\nA selection is singular if its start and end match.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block selection end.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlockCount",
				"namespace": "editor",
				"aliases": [],
				"line": 827,
				"end_line": 835,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the number of blocks currently selected in the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Number of blocks selected in the post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 844,
				"end_line": 849,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there is a single selected block, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether a single block is selected.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 859,
				"end_line": 867,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the currently selected block client ID, or null if there is no",
					"long_description": "selected block.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block client ID.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 876,
				"end_line": 879,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the currently selected block, or null if there is no selected block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAdjacentBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 941,
				"end_line": 987,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "modifier",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block adjacent one at the given reference",
					"long_description": "startClientId and modifier directionality. Defaults start startClientId to\nthe selected block, and direction as next block. Returns null if there is no\nadjacent block.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "param",
							"content": "Directionality multiplier (1 next, -1\n                               previous).",
							"types": [
								"number"
							],
							"variable": "modifier"
						},
						{
							"name": "return",
							"content": "Return the client ID of the block, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreviousBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1000,
				"end_line": 1002,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the previous block's client ID from the given reference start ID.",
					"long_description": "Defaults start to the selected block. Returns null if there is no previous\nblock.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "return",
							"content": "Adjacent block's client ID, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNextBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1015,
				"end_line": 1017,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the next block's client ID from the given reference start ID.",
					"long_description": "Defaults start to the selected block. Returns null if there is no next\nblock.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "return",
							"content": "Adjacent block's client ID, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlocksInitialCaretPosition",
				"namespace": "editor",
				"aliases": [],
				"line": 1027,
				"end_line": 1037,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the initial caret position for the selected block.",
					"long_description": "This position is to used to position the caret properly when the selected block changes.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFirstMultiSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1108,
				"end_line": 1110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the first block in the multi-selection set, or null",
					"long_description": "if there is no multi-selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "First block client ID in the multi-selection set.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getLastMultiSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1120,
				"end_line": 1122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the last block in the multi-selection set, or null",
					"long_description": "if there is no multi-selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Last block client ID in the multi-selection set.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isFirstMultiSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1156,
				"end_line": 1158,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a multi-selection exists, and the block corresponding to the",
					"long_description": "specified client ID is the first block of the multi-selection set, or false\notherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is first in multi-selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockMultiSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 1169,
				"end_line": 1171,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the client ID occurs within the block multi-selection, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is in multi-selection set.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiSelectedBlocksStartClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1209,
				"end_line": 1219,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block which begins the multi-selection set, or",
					"long_description": "null if there is no multi-selection.\n\nThis is not necessarily the first client ID in the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block beginning multi-selection.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiSelectedBlocksEndClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1233,
				"end_line": 1243,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block which ends the multi-selection set, or",
					"long_description": "null if there is no multi-selection.\n\nThis is not necessarily the last client ID in the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block ending multi-selection.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockOrder",
				"namespace": "editor",
				"aliases": [],
				"line": 1255,
				"end_line": 1257,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an array containing all block client IDs in the editor in the order",
					"long_description": "they appear. Optionally accepts a root client ID of the block list for which\nthe order should be returned, defaulting to the top-level block order.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Ordered client IDs of editor blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockIndex",
				"namespace": "editor",
				"aliases": [],
				"line": 1269,
				"end_line": 1271,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the index at which the block corresponding to the specified client",
					"long_description": "ID occurs within the block order, or `-1` if the block does not exist.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Index at which block exists in order.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 1282,
				"end_line": 1292,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the block corresponding to the specified client ID is",
					"long_description": "currently selected and no multi-selection exists, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is selected and multi-selection exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSelectedInnerBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1303,
				"end_line": 1308,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "deep",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if one of the block's inner blocks is selected.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Perform a deep check.",
							"types": [
								"boolean"
							],
							"variable": "deep"
						},
						{
							"name": "return",
							"content": "Whether the block as an inner block selected",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockWithinSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 1322,
				"end_line": 1330,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the block corresponding to the specified client ID is",
					"long_description": "currently selected but isn't the last of the selected blocks. Here \"last\"\nrefers to the block sequence in the document, _not_ the sequence of\nmulti-selection, which is why `state.blockSelection.end` isn't used.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is selected and not the last in the\n                  selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasMultiSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 1339,
				"end_line": 1344,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a multi-selection has been made, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether multi-selection has been made.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMultiSelecting",
				"namespace": "editor",
				"aliases": [],
				"line": 1357,
				"end_line": 1359,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether in the process of multi-selecting or not. This flag is only true",
					"long_description": "while the multi-selection is being selected (by mouse move), and is false\nonce the multi-selection has been settled.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "True if multi-selecting, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSelectionEnabled",
				"namespace": "editor",
				"aliases": [],
				"line": 1368,
				"end_line": 1370,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Selector that returns if multi-selection is enabled or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "True if it should be possible to multi-select blocks, false if multi-selection is disabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockMode",
				"namespace": "editor",
				"aliases": [],
				"line": 1381,
				"end_line": 1383,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's editing mode, defaulting to \"visual\" if not explicitly",
					"long_description": "assigned.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block editing mode.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 1392,
				"end_line": 1394,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the user is typing, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether user is typing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCaretWithinFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 1403,
				"end_line": 1405,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the caret is within formatted text, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the caret is within formatted text.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 1415,
				"end_line": 1437,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the insertion point, the index at which the new inserted block would",
					"long_description": "be placed. Defaults to the last index.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Insertion point object with `rootClientId`, `index`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockInsertionPointVisible",
				"namespace": "editor",
				"aliases": [],
				"line": 1446,
				"end_line": 1448,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if we should show the block insertion point.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the insertion point is visible or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 1456,
				"end_line": 1458,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns whether the blocks matches the template or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the template is valid or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 1466,
				"end_line": 1468,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the defined block template",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Block Template",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTemplateLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1479,
				"end_line": 1491,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the defined block template lock. Optionally accepts a root block",
					"long_description": "client ID as context, otherwise defaulting to the global context.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional block root client ID.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Block Template Lock",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1500,
				"end_line": 1502,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is currently being saved, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post is being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "didPostSaveRequestSucceed",
				"namespace": "editor",
				"aliases": [],
				"line": 1512,
				"end_line": 1514,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a previous post save was attempted successfully, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post was saved successfully.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "didPostSaveRequestFail",
				"namespace": "editor",
				"aliases": [],
				"line": 1524,
				"end_line": 1526,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a previous post save was attempted but failed, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post save failed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAutosavingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1535,
				"end_line": 1537,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is autosaving, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is autosaving.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPreviewingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1546,
				"end_line": 1548,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is being previewed, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is being previewed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostPreviewLink",
				"namespace": "editor",
				"aliases": [],
				"line": 1557,
				"end_line": 1568,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post preview link",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Preview Link.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSuggestedPostFormat",
				"namespace": "editor",
				"aliases": [],
				"line": 1579,
				"end_line": 1620,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a suggested post format for the current post, inferred only if there",
					"long_description": "is a single block within the post and it is of a type known to match a\ndefault post format. Returns null if the format cannot be determined.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Suggested post format.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlocksForSerialization",
				"namespace": "editor",
				"aliases": [],
				"line": 1630,
				"end_line": 1645,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a set of blocks which are to be used in consideration of the post's",
					"long_description": "generated save content.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Filtered set of blocks for save.",
							"types": [
								"Array.<WPBlock>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canInsertBlockTypeUnmemoized",
				"namespace": "editor",
				"aliases": [],
				"line": 1689,
				"end_line": 1743,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines if the given block type is allowed to be inserted into the block list.",
					"long_description": "This function is not exported and not memoized because using a memoized selector\ninside another memoized selector is just a waste of time.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The name of the block type, e.g.' core/paragraph'.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be inserted.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getInsertUsage",
				"namespace": "editor",
				"aliases": [],
				"line": 1769,
				"end_line": 1771,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns information about how recently and frequently a block has been inserted.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string which identifies the insert, e.g. 'core/block/12'",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "An object containing `time` which is when the last\n                                           insert occurred as a UNIX epoch, and `count` which is\n                                           the number of inserts that have occurred.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canIncludeBlockTypeInInserter",
				"namespace": "editor",
				"aliases": [],
				"line": 1783,
				"end_line": 1789,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether we can show a block type in the inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global State",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "BlockType",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be shown in the inserter.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canIncludeReusableBlockInInserter",
				"namespace": "editor",
				"aliases": [],
				"line": 1801,
				"end_line": 1827,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reusableBlock",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether we can show a reusable block in the inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global State",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Reusable block object",
							"types": [
								"Object"
							],
							"variable": "reusableBlock"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be shown in the inserter.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalIsSavingReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 2037,
				"end_line": 2039,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "ref",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether or not the reusable block with the given ID is being saved.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The reusable block's ID.",
							"types": [
								"string"
							],
							"variable": "ref"
						},
						{
							"name": "return",
							"content": "Whether or not the reusable block is being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalIsFetchingReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 2050,
				"end_line": 2052,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "ref",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the reusable block with the given ID is being fetched, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The reusable block's ID.",
							"types": [
								"string"
							],
							"variable": "ref"
						},
						{
							"name": "return",
							"content": "Whether the reusable block is being fetched.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalGetReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 2061,
				"end_line": 2065,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an array of all reusable blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "An array of all reusable blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getStateBeforeOptimisticTransaction",
				"namespace": "editor",
				"aliases": [],
				"line": 2076,
				"end_line": 2081,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "transactionId",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns state object prior to a specified optimist transaction ID, or `null`",
					"long_description": "if the transaction corresponding to the given ID cannot be found.",
					"tags": [
						{
							"name": "param",
							"content": "Current global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optimist transaction ID.",
							"types": [
								"Object"
							],
							"variable": "transactionId"
						},
						{
							"name": "return",
							"content": "Global application state prior to transaction.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 2090,
				"end_line": 2107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is being published, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post is being published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPermalinkEditable",
				"namespace": "editor",
				"aliases": [],
				"line": 2116,
				"end_line": 2119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the permalink is editable or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether or not the permalink is editable.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPermalink",
				"namespace": "editor",
				"aliases": [],
				"line": 2128,
				"end_line": 2144,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the permalink for the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The permalink, or null if the post is not viewable.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPermalinkParts",
				"namespace": "editor",
				"aliases": [],
				"line": 2155,
				"end_line": 2174,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the permalink for a post, split into it's three parts: the prefix,",
					"long_description": "the postName, and the suffix.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "An object containing the prefix, postName, and suffix for\n                 the permalink, or null if the post is not viewable.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "inSomeHistory",
				"namespace": "editor",
				"aliases": [],
				"line": 2185,
				"end_line": 2196,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Returns true if an optimistic transaction is pending commit, for which the",
					"long_description": "before state satisfies the given predicate function.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Function given state, returning true if match.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Whether predicate matches for some history.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockListSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2206,
				"end_line": 2208,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the Block List settings of a block, if any exist.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block settings of the block if set.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditorSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2217,
				"end_line": 2219,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the editor settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The editor settings object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTokenSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2229,
				"end_line": 2235,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the token settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Token name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Token settings object, or the named token settings object if set.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostLocked",
				"namespace": "editor",
				"aliases": [],
				"line": 2244,
				"end_line": 2246,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the post is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is locked.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostSavingLocked",
				"namespace": "editor",
				"aliases": [],
				"line": 2255,
				"end_line": 2257,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether post saving is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is locked.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostLockTakeover",
				"namespace": "editor",
				"aliases": [],
				"line": 2266,
				"end_line": 2268,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the edition of the post has been taken over.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is post lock takeover.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPostLockUser",
				"namespace": "editor",
				"aliases": [],
				"line": 2277,
				"end_line": 2279,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns details about the post lock user.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "A user object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getActivePostLock",
				"namespace": "editor",
				"aliases": [],
				"line": 2288,
				"end_line": 2290,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the active post lock.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The lock object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUserUseUnfilteredHTML",
				"namespace": "editor",
				"aliases": [],
				"line": 2299,
				"end_line": 2301,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether or not the user has the unfiltered_html capability.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the user can or can't post unfiltered HTML.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishSidebarEnabled",
				"namespace": "editor",
				"aliases": [],
				"line": 2311,
				"end_line": 2317,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the pre-publish panel should be shown",
					"long_description": "or skipped when the user clicks the \"publish\" button.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the pre-publish panel should be shown or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockDOMNode",
				"namespace": "editor",
				"aliases": [],
				"line": 10,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block client ID, returns the corresponding DOM node for the block,",
					"long_description": "if exists. As much as possible, this helper should be avoided, and used only\nin cases where isolated behaviors need remote access to a block node.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block DOM node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockFocusableWrapper",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block client ID, returns the corresponding DOM node for the block",
					"long_description": "focusable wrapper, if exists. As much as possible, this helper should be\navoided, and used only in cases where isolated behaviors need remote access\nto a block node.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block DOM node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockFocusStop",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if the given HTMLElement is a block focus stop. Blocks without",
					"long_description": "their own text fields rely on the focus stop to be keyboard navigable.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a block focus stop.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInSameBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 48,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "b",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if two elements are contained within the same block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First element.",
							"types": [
								"HTMLElement"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second element.",
							"types": [
								"HTMLElement"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether elements are in the same block.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInsideRootBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 60,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockElement",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if an elements is considered part of the block and not its children.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block container element.",
							"types": [
								"HTMLElement"
							],
							"variable": "blockElement"
						},
						{
							"name": "param",
							"content": "Element.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is in the block Element but not its children.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasInnerBlocksContext",
				"namespace": "editor",
				"aliases": [],
				"line": 73,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if the given HTMLElement contains inner blocks (an InnerBlocks",
					"long_description": "element).",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element contains inner blocks.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 30,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.additionalData",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.allowedTypes",
						"default": null,
						"type": "string"
					},
					{
						"name": "$0.filesList",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.maxUploadFileSize",
						"default": null,
						"type": "number"
					},
					{
						"name": "$0.onError",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.onFileChange",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Upload a media file when the file upload button is activated.",
					"long_description": "Wrapper around mediaUpload() that injects the current post ID.",
					"tags": [
						{
							"name": "param",
							"content": "Parameters object passed to the function.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "$0.additionalData"
						},
						{
							"name": "param",
							"content": "Array with the types of media that can be uploaded, if unset all types are allowed.",
							"types": [
								"string"
							],
							"variable": "$0.allowedTypes"
						},
						{
							"name": "param",
							"content": "List of files.",
							"types": [
								"Array"
							],
							"variable": "$0.filesList"
						},
						{
							"name": "param",
							"content": "Maximum upload size in bytes allowed for the site.",
							"types": [
								"number"
							],
							"variable": "$0.maxUploadFileSize"
						},
						{
							"name": "param",
							"content": "Function called when an error happens.",
							"types": [
								"function"
							],
							"variable": "$0.onError"
						},
						{
							"name": "param",
							"content": "Function called each time a file or a temporary representation of the file is available.",
							"types": [
								"function"
							],
							"variable": "$0.onFileChange"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/media-upload/media-upload.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMimeTypesArray",
				"namespace": "editor",
				"aliases": [],
				"line": 32,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "wpMimeTypesObject",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Browsers may use unexpected mime types, and they differ from browser to browser.",
					"long_description": "This function computes a flexible array of mime types from the mime type structured provided by the server.\nConverts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\nThe computation of this array instead of directly using the object,\nsolves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=227004",
					"tags": [
						{
							"name": "param",
							"content": "Mime type object received from the server.\n                                   Extensions are keys separated by '|' and values are mime types associated with an extension.",
							"types": [
								"Object"
							],
							"variable": "wpMimeTypesObject"
						},
						{
							"name": "return",
							"content": "An array of mime types or the parameter passed if it was \"falsy\".",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 64,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.allowedTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.additionalData",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.filesList",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.maxUploadFileSize",
						"default": null,
						"type": "number"
					},
					{
						"name": "$0.onError",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.onFileChange",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.wpAllowedMimeTypes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Media Upload is used by audio, image, gallery, video, and file blocks to",
					"long_description": "\thandle uploading a media file when a file upload button is activated.\n\n\tTODO: future enhancement to add an upload indicator.",
					"tags": [
						{
							"name": "param",
							"content": "Parameters object passed to the function.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Array with the types of media that can be uploaded, if unset all types are allowed.",
							"types": [
								"Array"
							],
							"variable": "$0.allowedTypes"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "$0.additionalData"
						},
						{
							"name": "param",
							"content": "List of files.",
							"types": [
								"Array"
							],
							"variable": "$0.filesList"
						},
						{
							"name": "param",
							"content": "Maximum upload size in bytes allowed for the site.",
							"types": [
								"number"
							],
							"variable": "$0.maxUploadFileSize"
						},
						{
							"name": "param",
							"content": "Function called when an error happens.",
							"types": [
								"function"
							],
							"variable": "$0.onError"
						},
						{
							"name": "param",
							"content": "Function called each time a file or a temporary representation of the file is available.",
							"types": [
								"function"
							],
							"variable": "$0.onFileChange"
						},
						{
							"name": "param",
							"content": "List of allowed mime types and file extensions.",
							"types": [
								"Object"
							],
							"variable": "$0.wpAllowedMimeTypes"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_mediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 74,
				"end_line": 300,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					},
					{
						"name": "additionalData",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Media File to Save.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "additionalData"
						},
						{
							"name": "return",
							"content": "Media Object Promise.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/terms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "buildTermsTree",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "flatTerms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns terms in a tree form.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of terms in flat format.",
							"types": [
								"Array"
							],
							"variable": "flatTerms"
						},
						{
							"name": "return",
							"content": "Array of terms in tree format.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getWPAdminURL",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "page",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the URL of a WPAdmin Page.",
					"long_description": "\nTODO: This should be moved to a module less specific to the editor.",
					"tags": [
						{
							"name": "param",
							"content": "Page to navigate to.",
							"types": [
								"string"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Query Args.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "WPAdmin URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cleanForSlug",
				"namespace": "editor",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "string",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs some basic cleanup of a string for use as a post slug",
					"long_description": "\nThis replicates some of what santize_title() does in WordPress core, but\nis only designed to approximate what the slug will be.\n\nConverts whitespace, periods, forward slashes and underscores to hyphens.\nConverts Latin-1 Supplement and Latin Extended-A letters to basic Latin\nletters. Removes combining diacritical marks. Converts remaining string\nto lowercase. It does not touch octets, HTML entities, or other encoded\ncharacters.",
					"tags": [
						{
							"name": "param",
							"content": "Title or slug to be processed",
							"types": [
								"string"
							],
							"variable": "string"
						},
						{
							"name": "return",
							"content": "Processed string",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/with-change-detection/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withChangeDetection",
				"namespace": "editor",
				"aliases": [],
				"line": 19,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.ignoreTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.resetTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator for tracking changes to state over time. The",
					"long_description": "returned reducer will include a `isDirty` property on the object reflecting\nwhether the original reference of the reducer has changed.",
					"tags": [
						{
							"name": "param",
							"content": "Optional options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Action types upon which to skip check.",
							"types": [
								"Array"
							],
							"variable": "options.ignoreTypes"
						},
						{
							"name": "param",
							"content": "Action types upon which to reset dirty.",
							"types": [
								"Array"
							],
							"variable": "options.resetTypes"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/build-module/utils/with-history/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withHistory",
				"namespace": "editor",
				"aliases": [],
				"line": 42,
				"end_line": 147,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.resetTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.ignoreTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.shouldOverwriteState",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which transforms the result of the original",
					"long_description": "reducer into an object tracking its own history (past, present, future).",
					"tags": [
						{
							"name": "param",
							"content": "Optional options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Action types upon which to\n                                                clear past.",
							"types": [
								"Array"
							],
							"variable": "options.resetTypes"
						},
						{
							"name": "param",
							"content": "Action types upon which to\n                                                avoid history tracking.",
							"types": [
								"Array"
							],
							"variable": "options.ignoreTypes"
						},
						{
							"name": "param",
							"content": "Function receiving last and\n                                                current actions, returning\n                                                boolean indicating whether\n                                                present should be merged,\n                                                rather than add undo level.",
							"types": [
								"function"
							],
							"variable": "options.shouldOverwriteState"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/autocomplete/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withFilteredAutocompleters",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "Autocomplete",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Wrap the default Autocomplete component with one that",
					"long_description": "supports a filter hook for customizing its list of autocompleters.\n\nSince there may be many Autocomplete instances at one time, this component\napplies the filter on demand, when the component is first focused after\nreceiving a new list of completers.\n\nThis function is exported for unit test.",
					"tags": [
						{
							"name": "param",
							"content": "Original component.",
							"types": [
								"function"
							],
							"variable": "Autocomplete"
						},
						{
							"name": "return",
							"content": "Wrapped component",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/autocompleters/block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "defaultGetBlockInsertionParentClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 19,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the client ID of the parent where a newly inserted block would be",
					"long_description": "placed.",
					"tags": [
						{
							"name": "return",
							"content": "Client ID of the parent where a newly inserted block would\n                 be placed.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "defaultGetInserterItems",
				"namespace": "editor",
				"aliases": [],
				"line": 32,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the inserter items for the specified parent block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the block for which to retrieve\n                             inserter items.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "The inserter items for the specified\n                                     parent.",
							"types": [
								"Array.<Editor.InserterItem>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "defaultGetSelectedBlockName",
				"namespace": "editor",
				"aliases": [],
				"line": 42,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the name of the currently selected block.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The name of the currently selected block or `null` if no\n                  block is selected.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createBlockCompleter",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Creates a blocks repeater for replacing the current block with a selected block type.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "A blocks completer.",
							"types": [
								"Completer"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/autocompleters/user.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-edit/context.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-list/block.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "focusTabbable",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 129,
				"end_line": 164,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "ignoreInnerBlocks",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "When a block becomes selected, transition focus to an inner tabbable.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Should not focus inner blocks.",
							"types": [
								"boolean"
							],
							"variable": "ignoreInnerBlocks"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "maybeHover",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 209,
				"end_line": 223,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "A mouseover event handler to apply hover effect when a pointer device is",
					"long_description": "placed within the bounds of the block. The mouseover event is preferred\nover mouseenter because it may be the case that a previous mouseenter\nevent was blocked from being handled by a IgnoreNestedEvents component,\ntherefore transitioning out of a nested block to the bounds of the block\nwould otherwise not trigger a hover effect.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "hideHoverEffects",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 230,
				"end_line": 234,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Sets the block state as unhovered if currently hovering. There are cases",
					"long_description": "where mouseleave may occur but the block is not hovered (multi-select),\nso to avoid unnecesary renders, the state is only set if hovered.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onFocus",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 243,
				"end_line": 247,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Marks the block as selected when focused and not already selected. This",
					"long_description": "specifically handles the case where block does not set focus on its own\n(via `setFocus`), typically if there is no focusable input in the block.",
					"tags": [
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "preventDrag",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 257,
				"end_line": 259,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "DragEvent"
					}
				],
				"doc": {
					"description": "Prevents default dragging behavior within a block to allow for multi-",
					"long_description": "selection to take effect unhampered.",
					"tags": [
						{
							"name": "param",
							"content": "Drag event.",
							"types": [
								"DragEvent"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onPointerDown",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 268,
				"end_line": 292,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "MouseEvent"
					}
				],
				"doc": {
					"description": "Begins tracking cursor multi-selection when clicking down within block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A mousedown event.",
							"types": [
								"MouseEvent"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "deleteOrInsertAfterWrapper",
				"namespace": "editor\\BlockListBlock",
				"aliases": [],
				"line": 302,
				"end_line": 331,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Interprets keydown event intent to remove or insert after block if key",
					"long_description": "event occurs on wrapper node. This can occur when the block has no text\nfields of its own, particularly after initial insertion, to allow for\neasy deletion and continuous writing flow to add additional content.",
					"tags": [
						{
							"name": "param",
							"content": "Keydown event.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-list/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onPointerMove",
				"namespace": "editor\\BlockList",
				"aliases": [],
				"line": 86,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "MouseEvent"
					}
				],
				"doc": {
					"description": "Handles a pointer move event to update the extent of the current cursor",
					"long_description": "multi-selection.",
					"tags": [
						{
							"name": "param",
							"content": "A mousemove event object.",
							"types": [
								"MouseEvent"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onSelectionStart",
				"namespace": "editor\\BlockList",
				"aliases": [],
				"line": 115,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Binds event handlers to the document for tracking a pending multi-select",
					"long_description": "in response to a mousedown event occurring in a rendered block.",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of block where mousedown occurred.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onSelectionChange",
				"namespace": "editor\\BlockList",
				"aliases": [],
				"line": 146,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Handles multi-selection changes in response to pointer move.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of block under cursor in multi-select\n                         drag.",
							"types": [
								"string"
							],
							"variable": "clientId"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onSelectionEnd",
				"namespace": "editor\\BlockList",
				"aliases": [],
				"line": 172,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Handles a mouseup event to end the current cursor multi-selection.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-mover/mover-description.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockMoverDescription",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "firstIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "isFirst",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "isLast",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "dir",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Return a label for the block movement controls depending on block position.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Number of blocks selected.",
							"types": [
								"number"
							],
							"variable": "selectedCount"
						},
						{
							"name": "param",
							"content": "Block type - in the case of a single block, should\n                                define its 'type'. I.e. 'Text', 'Heading', 'Image' etc.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "The index (position - 1) of the first block selected.",
							"types": [
								"number"
							],
							"variable": "firstIndex"
						},
						{
							"name": "param",
							"content": "This is the first block.",
							"types": [
								"boolean"
							],
							"variable": "isFirst"
						},
						{
							"name": "param",
							"content": "This is the last block.",
							"types": [
								"boolean"
							],
							"variable": "isLast"
						},
						{
							"name": "param",
							"content": "Direction of movement (> 0 is considered to be going\n                                down, < 0 is up).",
							"types": [
								"number"
							],
							"variable": "dir"
						},
						{
							"name": "return",
							"content": "Label for the block movement controls.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiBlockMoverDescription",
				"namespace": "editor",
				"aliases": [],
				"line": 79,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "selectedCount",
						"default": null,
						"type": "number"
					},
					{
						"name": "firstIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "isFirst",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "isLast",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "dir",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Return a label for the block movement controls depending on block position.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Number of blocks selected.",
							"types": [
								"number"
							],
							"variable": "selectedCount"
						},
						{
							"name": "param",
							"content": "The index (position - 1) of the first block selected.",
							"types": [
								"number"
							],
							"variable": "firstIndex"
						},
						{
							"name": "param",
							"content": "This is the first block.",
							"types": [
								"boolean"
							],
							"variable": "isFirst"
						},
						{
							"name": "param",
							"content": "This is the last block.",
							"types": [
								"boolean"
							],
							"variable": "isLast"
						},
						{
							"name": "param",
							"content": "Direction of movement (> 0 is considered to be going\n                                down, < 0 is up).",
							"types": [
								"number"
							],
							"variable": "dir"
						},
						{
							"name": "return",
							"content": "Label for the block movement controls.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-preview/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockPreview",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Block Preview Component: It renders a preview given a block name and attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component props.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Rendered element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-selection-clearer/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clearSelectionIfFocusTarget",
				"namespace": "editor\\BlockSelectionClearer",
				"aliases": [],
				"line": 32,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "FocusEvent"
					}
				],
				"doc": {
					"description": "Clears the selected block on focus if the container is the target of the",
					"long_description": "focus. This assumes no other descendents have received focus until event\nhas bubbled to the container.",
					"tags": [
						{
							"name": "param",
							"content": "Focus event.",
							"types": [
								"FocusEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getActiveStyle",
				"namespace": "editor",
				"aliases": [],
				"line": 30,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					},
					{
						"name": "className",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the active style from the given className.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block style variations.",
							"types": [
								"Array"
							],
							"variable": "styles"
						},
						{
							"name": "param",
							"content": "Class name",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "return",
							"content": "The active style.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceActiveStyle",
				"namespace": "editor",
				"aliases": [],
				"line": 55,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "className",
						"default": null,
						"type": "string"
					},
					{
						"name": "activeStyle",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newStyle",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Replaces the active style in the block's className.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Class name.",
							"types": [
								"string"
							],
							"variable": "className"
						},
						{
							"name": "param",
							"content": "The replaced style.",
							"types": [
								"Object"
							],
							"variable": "activeStyle"
						},
						{
							"name": "param",
							"content": "The replacing style.",
							"types": [
								"Object"
							],
							"variable": "newStyle"
						},
						{
							"name": "return",
							"content": "The updated className.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/block-title/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "BlockTitle",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Renders the block's configured title as a string, or empty if the title",
					"long_description": "cannot be determined.",
					"tags": [
						{
							"name": "param",
							"content": "Block name.",
							"types": [
								"string"
							],
							"variable": "props.name"
						},
						{
							"name": "return",
							"content": "Block title.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/colors/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getColorClassName",
				"namespace": "editor",
				"aliases": [],
				"line": 53,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorContextName",
						"default": null,
						"type": "string"
					},
					{
						"name": "colorSlug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a class based on the context a color is being used and its slug.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Context/place where color is being used e.g: background, text etc...",
							"types": [
								"string"
							],
							"variable": "colorContextName"
						},
						{
							"name": "param",
							"content": "Slug of the color.",
							"types": [
								"string"
							],
							"variable": "colorSlug"
						},
						{
							"name": "return",
							"content": "String with the class corresponding to the color in the provided context.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMostReadableColor",
				"namespace": "editor",
				"aliases": [],
				"line": 69,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colors",
						"default": null,
						"type": "Array"
					},
					{
						"name": "colorValue",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an array of color objects and a color value returns the color value of the most readable color in the array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of color objects as set by the theme or by the editor defaults.",
							"types": [
								"Array"
							],
							"variable": "colors"
						},
						{
							"name": "param",
							"content": "A string containing the color value.",
							"types": [
								"string"
							],
							"variable": "colorValue"
						},
						{
							"name": "return",
							"content": "String with the color value of the most readable color.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/colors/with-colors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withCustomColorPalette",
				"namespace": "editor",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorsArray",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Higher order component factory for injecting the `colorsArray` argument as",
					"long_description": "the colors prop in the `withCustomColors` HOC.",
					"tags": [
						{
							"name": "param",
							"content": "An array of color objects.",
							"types": [
								"Array"
							],
							"variable": "colorsArray"
						},
						{
							"name": "return",
							"content": "The higher order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withEditorColorPalette",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Higher order component factory for injecting the editor colors as the",
					"long_description": "`colors` prop in the `withColors` HOC.",
					"tags": [
						{
							"name": "return",
							"content": "The higher order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createColorHOC",
				"namespace": "editor",
				"aliases": [],
				"line": 54,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "withColorPalette",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Helper function used with `createHigherOrderComponent` to create",
					"long_description": "higher order components for managing color logic.",
					"tags": [
						{
							"name": "param",
							"content": "An array of color types (e.g. 'backgroundColor, borderColor).",
							"types": [
								"Array"
							],
							"variable": "colorTypes"
						},
						{
							"name": "param",
							"content": "A HOC for injecting the 'colors' prop into the WrappedComponent.",
							"types": [
								"function"
							],
							"variable": "withColorPalette"
						},
						{
							"name": "return",
							"content": "The component that can be used as a HOC.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createCustomColorsHOC",
				"namespace": "editor",
				"aliases": [],
				"line": 169,
				"end_line": 174,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorsArray",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "A higher-order component factory for creating a 'withCustomColors' HOC, which handles color logic",
					"long_description": "for class generation color value, retrieval and color attribute setting.\n\nUse this higher-order component to work with a custom set of colors.",
					"tags": [
						{
							"name": "param",
							"content": "The array of color objects (name, slug, color, etc... ).",
							"types": [
								"Array"
							],
							"variable": "colorsArray"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 200,
				"end_line": 203,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "colorTypes",
						"default": null,
						"type": "object"
					}
				],
				"doc": {
					"description": "A higher-order component, which handles color logic for class generation color value, retrieval and color attribute setting.",
					"long_description": "\nFor use with the default editor/theme color palette.",
					"tags": [
						{
							"name": "param",
							"content": "The arguments can be strings or objects. If the argument is an object,\n                                       it should contain the color attribute name as key and the color context as value.\n                                       If the argument is a string the value should be the color attribute name,\n                                       the color context is computed by applying a kebab case transform to the value.\n                                       Color context represents the context/place where the color is going to be used.\n                                       The class name of the color is generated using 'has' followed by the color name\n                                       and ending with the color context all in kebab case e.g: has-green-background-color.",
							"types": [
								"object",
								"string"
							],
							"variable": "colorTypes"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/document-outline/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "computeOutlineHeadings",
				"namespace": "editor",
				"aliases": [],
				"line": 51,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an array of heading blocks enhanced with the following properties:",
					"long_description": "path    - An array of blocks that are ancestors of the heading starting from a top-level node.\n          Can be an empty array if the heading is a top-level node (is not nested inside another block).\nlevel   - An integer with the heading level.\nisEmpty - Flag indicating if the heading has no content.",
					"tags": [
						{
							"name": "param",
							"content": "An array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "An array of blocks that are ancestors of the blocks passed as blocks.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "An array of heading blocks enhanced with the properties described above.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/font-sizes/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFontSizeClass",
				"namespace": "editor",
				"aliases": [],
				"line": 37,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fontSizeSlug",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a class based on fontSizeName.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Slug of the fontSize.",
							"types": [
								"string"
							],
							"variable": "fontSizeSlug"
						},
						{
							"name": "return",
							"content": "String with the class corresponding to the fontSize passed.\n                 The class is generated by appending 'has-' followed by fontSizeSlug in kebabCase and ending with '-font-size'.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/font-sizes/with-font-sizes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 27,
				"end_line": 134,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "args",
						"default": null,
						"type": "object"
					}
				],
				"doc": {
					"description": "Higher-order component, which handles font size logic for class generation,",
					"long_description": "font size value retrieval, and font size change handling.",
					"tags": [
						{
							"name": "param",
							"content": "The arguments should all be strings\n                                 Each string contains the font size attribute name e.g: 'fontSize'.",
							"types": [
								"object",
								"string"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/global-keyboard-shortcuts/visual-editor-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "clearMultiSelection",
				"namespace": "editor\\VisualEditorGlobalKeyboardShortcuts",
				"aliases": [],
				"line": 87,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Clears current multi-selection, if one exists.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/inner-blocks/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "synchronizeBlocksWithTemplate",
				"namespace": "editor\\InnerBlocks",
				"aliases": [],
				"line": 72,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Called on mount or when a mismatch exists between the templates and",
					"long_description": "inner blocks, synchronizes inner blocks with the template, replacing\ncurrent blocks.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/inserter/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "renderToggle",
				"namespace": "editor\\Inserter",
				"aliases": [],
				"line": 55,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.onToggle",
						"default": null,
						"type": "function"
					},
					{
						"name": "options.isOpen",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Render callback to display Dropdown toggle element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Callback to invoke when toggle is\n                                   pressed.",
							"types": [
								"function"
							],
							"variable": "options.onToggle"
						},
						{
							"name": "param",
							"content": "Whether dropdown is currently open.",
							"types": [
								"boolean"
							],
							"variable": "options.isOpen"
						},
						{
							"name": "return",
							"content": "Dropdown toggle element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderContent",
				"namespace": "editor\\Inserter",
				"aliases": [],
				"line": 72,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options.onClose",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Render callback to display Dropdown content element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Callback to invoke when dropdown is\n                                  closed.",
							"types": [
								"function"
							],
							"variable": "options.onClose"
						},
						{
							"name": "return",
							"content": "Dropdown content element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/inserter/menu.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "MediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 13,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "This is a placeholder for the media upload component necessary to make it possible to provide",
					"long_description": "an integration with the core blocks that handle media files. By default it renders nothing but\nit provides a way to have it overridden with the `editor.MediaUpload` filter.",
					"tags": [
						{
							"name": "return",
							"content": "Media upload element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/multi-select-scroll-into-view/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "scrollIntoView",
				"namespace": "editor\\MultiSelectScrollIntoView",
				"aliases": [],
				"line": 31,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Ensures that if a multi-selection exists, the extent of the selection is",
					"long_description": "visible within the nearest scrollable container.",
					"tags": [
						{
							"name": "return",
							"content": "",
							"types": [
								"void"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/navigable-toolbar/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "focusSelection",
				"namespace": "editor\\NavigableToolbar",
				"aliases": [],
				"line": 44,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Programmatically shifts focus to the element where the current selection",
					"long_description": "exists, if there is a selection.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/observe-typing/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isKeyDownEligibleForStartTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 39,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Returns true if a given keydown event can be inferred as intent to start",
					"long_description": "typing, or false otherwise. A keydown is considered eligible if it is a\ntext navigation without shift active.",
					"tags": [
						{
							"name": "param",
							"content": "Keydown event to test.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "Whether event is eligible to start typing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleEventBindings",
				"namespace": "editor\\ObserveTyping",
				"aliases": [],
				"line": 82,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isBound",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Bind or unbind events to the document when typing has started or stopped",
					"long_description": "respectively, or when component has become unmounted.",
					"tags": [
						{
							"name": "param",
							"content": "Whether event bindings should be applied.",
							"types": [
								"boolean"
							],
							"variable": "isBound"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopTypingOnMouseMove",
				"namespace": "editor\\ObserveTyping",
				"aliases": [],
				"line": 93,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "MouseEvent"
					}
				],
				"doc": {
					"description": "On mouse move, unset typing flag if user has moved cursor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Mousemove event.",
							"types": [
								"MouseEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopTypingOnSelectionUncollapse",
				"namespace": "editor\\ObserveTyping",
				"aliases": [],
				"line": 116,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "On selection change, unset typing flag if user has made an uncollapsed",
					"long_description": "(shift) selection.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stopTypingOnEscapeKey",
				"namespace": "editor\\ObserveTyping",
				"aliases": [],
				"line": 130,
				"end_line": 134,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Unsets typing flag if user presses Escape while typing flag is active.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Keypress or keydown event to interpret.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "startTypingInTextField",
				"namespace": "editor\\ObserveTyping",
				"aliases": [],
				"line": 141,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Handles a keypress or keydown event to infer intention to start typing.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Keypress or keydown event to interpret.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopTypingOnNonTextField",
				"namespace": "editor\\ObserveTyping",
				"aliases": [],
				"line": 167,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "FocusEvent"
					}
				],
				"doc": {
					"description": "Stops typing when focus transitions to a non-text field element.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Focus event.",
							"types": [
								"FocusEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-locked-modal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getHookName",
				"namespace": "editor\\PostLockedModal",
				"aliases": [],
				"line": 54,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a `@wordpress/hooks` hook name specific to the instance of the",
					"long_description": "component.",
					"tags": [
						{
							"name": "return",
							"content": "Hook name prefix.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "sendPostLock",
				"namespace": "editor\\PostLockedModal",
				"aliases": [],
				"line": 67,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Keep the lock refreshed.",
					"long_description": "\nWhen the user does not send a heartbeat in a heartbeat-tick\nthe user is no longer editing and another user can start editing.",
					"tags": [
						{
							"name": "param",
							"content": "Data to send in the heartbeat request.",
							"types": [
								"Object"
							],
							"variable": "data"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receivePostLock",
				"namespace": "editor\\PostLockedModal",
				"aliases": [],
				"line": 84,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Refresh post locks: update the lock string or show the dialog if somebody has taken over editing.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data received in the heartbeat request",
							"types": [
								"Object"
							],
							"variable": "data"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "releasePostLock",
				"namespace": "editor\\PostLockedModal",
				"aliases": [],
				"line": 112,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Unlock the post before the window is exited.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-preview-button/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setPreviewWindowLink",
				"namespace": "editor\\PostPreviewButton",
				"aliases": [],
				"line": 119,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets the preview window's location to the given URL, if a preview window",
					"long_description": "exists and is not closed.",
					"tags": [
						{
							"name": "param",
							"content": "URL to assign as preview window location.",
							"types": [
								"string"
							],
							"variable": "url"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-taxonomies/flat-term-selector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unescapeTerm",
				"namespace": "editor",
				"aliases": [],
				"line": 47,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "term",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a term object with name unescaped.",
					"long_description": "The unescape of the name propery is done using lodash unescape function.",
					"tags": [
						{
							"name": "param",
							"content": "The term object to unescape.",
							"types": [
								"Object"
							],
							"variable": "term"
						},
						{
							"name": "return",
							"content": "Term object with name property unescaped.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unescapeTerms",
				"namespace": "editor",
				"aliases": [],
				"line": 62,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "terms",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an array of term objects with names unescaped.",
					"long_description": "The unescape of each term is performed using the unescapeTerm function.",
					"tags": [
						{
							"name": "param",
							"content": "Array of term objects to unescape.",
							"types": [
								"Array.<Object>"
							],
							"variable": "terms"
						},
						{
							"name": "return",
							"content": "Array of therm objects unscaped.",
							"types": [
								"Array.<Object>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-taxonomies/hierarchical-term-selector.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-text-editor/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "edit",
				"namespace": "editor\\PostTextEditor",
				"aliases": [],
				"line": 47,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Handles a textarea change event to notify the onChange prop callback and",
					"long_description": "reflect the new value in the component's own state. This marks the start\nof the user's edits, if not already changed, preventing future props\nchanges to value from replacing the rendered value. This is expected to\nbe followed by a reset to dirty state via `stopEditing`.",
					"tags": [
						{
							"name": "param",
							"content": "Change event.",
							"types": [
								"Event"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopEditing",
				"namespace": "editor\\PostTextEditor",
				"aliases": [],
				"line": 58,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Function called when the user has completed their edits, responsible for",
					"long_description": "ensuring that changes, if made, are surfaced to the onPersist prop\ncallback and resetting dirty state.",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-title/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "redirectHistory",
				"namespace": "editor\\PostTitle",
				"aliases": [],
				"line": 80,
				"end_line": 88,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Emulates behavior of an undo or redo on its corresponding key press",
					"long_description": "combination. This is a workaround to React's treatment of undo in a\ncontrolled textarea where characters are updated one at a time.\nInstead, leverage the store's undo handling of title changes.",
					"tags": [
						{
							"name": "param",
							"content": "Key event.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/post-type-support-check/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "PostTypeSupportCheck",
				"namespace": "editor",
				"aliases": [],
				"line": 23,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.postType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "props.children",
						"default": null,
						"type": "WPElement"
					},
					{
						"name": "props.supportKeys",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "A component which renders its own children only if the current editor post",
					"long_description": "type supports one of the given `supportKeys` prop.",
					"tags": [
						{
							"name": "param",
							"content": "Current post type.",
							"types": [
								"Object"
							],
							"variable": "props.postType"
						},
						{
							"name": "param",
							"content": "Children to be rendered if post\n                                             type supports.",
							"types": [
								"WPElement"
							],
							"variable": "props.children"
						},
						{
							"name": "param",
							"content": "String or string array of keys\n                                             to test.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "props.supportKeys"
						},
						{
							"name": "return",
							"content": "Rendered element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/rich-text/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getRecord",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 150,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Get the current record (value and selection) from props and state.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "The current record (value and selection).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onPaste",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 199,
				"end_line": 312,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "PasteEvent"
					}
				],
				"doc": {
					"description": "Handles a paste event.",
					"long_description": "\nSaves the pasted data as plain text in `pastedPlainText`.",
					"tags": [
						{
							"name": "param",
							"content": "The paste event.",
							"types": [
								"PasteEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onFocus",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 331,
				"end_line": 338,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Handles a focus event on the contenteditable field, calling the",
					"long_description": "`unstableOnFocus` prop callback if one is defined. The callback does not\nreceive any arguments.\n\nThis is marked as a private API and the `unstableOnFocus` prop is not\ndocumented, as the current requirements where it is used are subject to\nfuture refactoring following `isSelected` handling.\n\nIn contrast with `setFocusedElement`, this is only triggered in response\nto focus within the contenteditable field, whereas `setFocusedElement`\nis triggered on focus within any `RichText` descendent element.",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onInput",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 349,
				"end_line": 368,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "SyntheticEvent"
					}
				],
				"doc": {
					"description": "Handle input on the next selection change event.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Synthetic input event.",
							"types": [
								"SyntheticEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onSelectionChange",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 379,
				"end_line": 392,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Handles the `selectionchange` event: sync the selection to local state.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onChangeEditableValue",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 400,
				"end_line": 404,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formats",
						"default": null,
						"type": "Array"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Calls all registered onChangeEditableValue handlers.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The formats of the latest rich-text value.",
							"types": [
								"Array"
							],
							"variable": "formats"
						},
						{
							"name": "param",
							"content": "The text of the latest rich-text value.",
							"types": [
								"string"
							],
							"variable": "text"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onChange",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 415,
				"end_line": 429,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "record",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$2",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$2.withoutHistory",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Sync the value to global state. The node tree and selection will also be",
					"long_description": "updated if differences are found.",
					"tags": [
						{
							"name": "param",
							"content": "The record to sync and apply.",
							"types": [
								"Object"
							],
							"variable": "record"
						},
						{
							"name": "param",
							"content": "Named options.",
							"types": [
								"Object"
							],
							"variable": "$2"
						},
						{
							"name": "param",
							"content": "If true, no undo level will be\n                                   created.",
							"types": [
								"boolean"
							],
							"variable": "$2.withoutHistory"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onDeleteKeyDown",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 450,
				"end_line": 489,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Handles a delete keyDown event to handle merge or removal for collapsed",
					"long_description": "selection where caret is at directional edge: forward for a delete key,\nreverse for a backspace key.",
					"tags": [
						{
							"name": "param",
							"content": "Keydown event.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "onKeyDown",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 496,
				"end_line": 585,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "KeyboardEvent"
					}
				],
				"doc": {
					"description": "Handles a keydown event.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The keydown event.",
							"types": [
								"KeyboardEvent"
							],
							"variable": "event"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "splitContent",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 597,
				"end_line": 632,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Splits the content at the location of the selection.",
					"long_description": "\nReplaces the content of the editor inside this element with the contents\nbefore the selection. Sends the elements after the selection to the `onSplit`\nhandler.",
					"tags": [
						{
							"name": "param",
							"content": "The blocks to add after the split point.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "The context for splitting.",
							"types": [
								"Object"
							],
							"variable": "context"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFormatProps",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 700,
				"end_line": 702,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Get props that are provided by formats to modify RichText.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Props that start with 'format_'.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "formatToValue",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 710,
				"end_line": 735,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Converts the outside data structure to our internal representation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The outside value, data type depends on props.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "An internal rich-text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeEditorOnlyFormats",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 760,
				"end_line": 769,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Removes editor only formats from the value.",
					"long_description": "\nEditor only formats are applied using `prepareEditableTree`, so we need to\nremove them before converting the internal state",
					"tags": [
						{
							"name": "param",
							"content": "The internal rich-text value.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "A new rich-text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "valueToFormat",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 777,
				"end_line": 798,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Converts the internal value to the external data format.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The internal rich-text value.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The external data format, data type depends on props.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/rich-text/index.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onChange",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 181,
				"end_line": 188,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Handles any case where the content of the AztecRN instance has changed",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "onContentSizeChange",
				"namespace": "editor\\RichText",
				"aliases": [],
				"line": 194,
				"end_line": 201,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Handles any case where the content of the AztecRN instance has changed in size",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/rich-text/list-edit.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectedListNode",
				"namespace": "editor",
				"aliases": [],
				"line": 29,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Gets the selected list node, which is the closest list node to the start of",
					"long_description": "the selection.",
					"tags": [
						{
							"name": "return",
							"content": "The selected list node, or undefined if none is selected.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isListRootSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 61,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Whether or not the root list is selected.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "True if the root list or nothing is selected, false if an\n                  inner list is selected.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isActiveListType",
				"namespace": "editor",
				"aliases": [],
				"line": 77,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tagName",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootTagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Wether or not the selected list has the given tag name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The tag name the list should have.",
							"types": [
								"string"
							],
							"variable": "tagName"
						},
						{
							"name": "param",
							"content": "The current root tag name, to compare with in\n                             case nothing is selected.",
							"types": [
								"string"
							],
							"variable": "rootTagName"
						},
						{
							"name": "return",
							"content": "[description]",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/rich-text/remove-browser-shortcuts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/rich-text/tinymce.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyInternetExplorerInputFix",
				"namespace": "editor",
				"aliases": [],
				"line": 45,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "editorNode",
						"default": null,
						"type": "Element"
					}
				],
				"doc": {
					"description": "Applies a fix that provides `input` events for contenteditable in Internet Explorer.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The root editor node.",
							"types": [
								"Element"
							],
							"variable": "editorNode"
						},
						{
							"name": "return",
							"content": "A function to remove the fix (for cleanup).",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapTextInputEvent",
				"namespace": "editor\\applyInternetExplorerInputFix",
				"aliases": [],
				"line": 55,
				"end_line": 62,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "textInputEvent",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Dispatches `input` events in response to `textinput` events.",
					"long_description": "\nIE provides a `textinput` event that is similar to an `input` event,\nand we use it to manually dispatch an `input` event.\n`textinput` is dispatched for text entry but for not deletions.",
					"tags": [
						{
							"name": "param",
							"content": "An Internet Explorer `textinput` event.",
							"types": [
								"Event"
							],
							"variable": "textInputEvent"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapDeletionKeyUpEvents",
				"namespace": "editor\\applyInternetExplorerInputFix",
				"aliases": [],
				"line": 80,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "keyUp",
						"default": null,
						"type": "KeyboardEvent"
					},
					{
						"name": "keyUp.target",
						"default": null,
						"type": "Node"
					},
					{
						"name": "keyUp.keyCode",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Dispatches `input` events in response to Delete and Backspace keyup.",
					"long_description": "\nIt would be better dispatch an `input` event after each deleting\n`keydown` because the DOM is updated after each, but it is challenging\nto determine the right time to dispatch `input` since propagation of\n`keydown` can be stopped at any point.\n\nIt's easier to listen for `keyup` in the capture phase and dispatch\n`input` before `keyup` propagates further. It's not perfect, but should\nbe good enough.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"KeyboardEvent"
							],
							"variable": "keyUp"
						},
						{
							"name": "param",
							"content": "The event target.",
							"types": [
								"Node"
							],
							"variable": "keyUp.target"
						},
						{
							"name": "param",
							"content": "The key code.",
							"types": [
								"number"
							],
							"variable": "keyUp.keyCode"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "initialize",
				"namespace": "editor",
				"aliases": [],
				"line": 174,
				"end_line": 258,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Initializes TinyMCE. Can only be called once per instance.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/unsaved-changes-warning/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "warnIfUnsavedChanges",
				"namespace": "editor\\UnsavedChangesWarning",
				"aliases": [],
				"line": 29,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "event",
						"default": null,
						"type": "Event"
					}
				],
				"doc": {
					"description": "Warns the user if there are unsaved changes before leaving the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "`beforeunload` event.",
							"types": [
								"Event"
							],
							"variable": "event"
						},
						{
							"name": "return",
							"content": "Warning prompt message, if unsaved changes exist.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/components/writing-flow/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isNavigationCandidate",
				"namespace": "editor",
				"aliases": [],
				"line": 62,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "keyCode",
						"default": null,
						"type": "number"
					},
					{
						"name": "hasModifier",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the element should consider edge navigation upon a keyboard",
					"long_description": "event of the given directional key code, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "HTML element to test.",
							"types": [
								"Element"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "KeyboardEvent keyCode to test.",
							"types": [
								"number"
							],
							"variable": "keyCode"
						},
						{
							"name": "param",
							"content": "Whether a modifier is pressed.",
							"types": [
								"boolean"
							],
							"variable": "hasModifier"
						},
						{
							"name": "return",
							"content": "Whether element should consider edge navigation.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getClosestTabbable",
				"namespace": "editor\\WritingFlow",
				"aliases": [],
				"line": 112,
				"end_line": 174,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "target",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the optimal tab target from the given focused element in the",
					"long_description": "desired direction. A preference is made toward text fields, falling back\nto the block focus stop if no other candidates exist for the block.",
					"tags": [
						{
							"name": "param",
							"content": "Currently focused text field.",
							"types": [
								"Element"
							],
							"variable": "target"
						},
						{
							"name": "param",
							"content": "True if considering as the first field.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "Optimal tab target, if one exists.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTabbableEdge",
				"namespace": "editor\\WritingFlow",
				"aliases": [],
				"line": 217,
				"end_line": 220,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "target",
						"default": null,
						"type": "Element"
					},
					{
						"name": "isReverse",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if the given target field is the last in its block which",
					"long_description": "can be considered for tab transition. For example, in a block with two\ntext fields, this would return true when reversing from the first of the\ntwo fields, but false when reversing from the second.",
					"tags": [
						{
							"name": "param",
							"content": "Currently focused text field.",
							"types": [
								"Element"
							],
							"variable": "target"
						},
						{
							"name": "param",
							"content": "True if considering as the first field.",
							"types": [
								"boolean"
							],
							"variable": "isReverse"
						},
						{
							"name": "return",
							"content": "Whether field is at edge for tab transition.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "focusLastTextField",
				"namespace": "editor\\WritingFlow",
				"aliases": [],
				"line": 311,
				"end_line": 317,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Sets focus to the end of the last tabbable text field, if one exists.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/ast/parse.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "updatePosition",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 24,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Update lineno and column based on `str`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "position",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 38,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Mark position and patch `node.position`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "Position",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 51,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Store position information for a node",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stylesheet",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 88,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse stylesheet.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "open",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 105,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Opening brace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "close",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 113,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Closing brace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rules",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 121,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse ruleset.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "match",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 139,
				"end_line": 148,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Match `re` and return captures.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "whitespace",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 154,
				"end_line": 156,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse whitespace.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comments",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 162,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse comments;",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 178,
				"end_line": 204,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse comment.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "selector",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 210,
				"end_line": 226,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse selector.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 232,
				"end_line": 260,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse declaration.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declarations",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 266,
				"end_line": 288,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse declarations.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 294,
				"end_line": 314,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse keyframe.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atkeyframes",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 320,
				"end_line": 358,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse keyframes.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atsupports",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 364,
				"end_line": 388,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse supports.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "athost",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 394,
				"end_line": 416,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse host.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atmedia",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 422,
				"end_line": 446,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atcustommedia",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 452,
				"end_line": 464,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse custom-media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atpage",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 470,
				"end_line": 501,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse paged media.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atdocument",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 507,
				"end_line": 533,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse document.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atfontface",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 539,
				"end_line": 567,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse font-face.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "_compileAtrule",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 591,
				"end_line": 603,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse non-block at-rules",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "atrule",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 609,
				"end_line": 625,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse at rule.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\module\\exports",
				"aliases": [],
				"line": 631,
				"end_line": 645,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Parse rule.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "trim",
				"namespace": "editor",
				"aliases": [],
				"line": 654,
				"end_line": 656,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Trim `str`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "addParent",
				"namespace": "editor",
				"aliases": [],
				"line": 662,
				"end_line": 687,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Adds non-enumerable parent node reference to each node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/ast/stringify/compiler.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Compiler",
				"namespace": "editor",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "Type"
					}
				],
				"doc": {
					"description": "Initialize a compiler.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Type"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"Type"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "emit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 26,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Emit `str`",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "visit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 34,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "mapVisit",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 42,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Map visit over array of `nodes`, optionally using a `delim`",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/ast/stringify/compress.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Compiler",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Initialize a new `Compiler`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "compile",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 38,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Compile `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 48,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit comment node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "import",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 56,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit import node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "media",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 64,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "document",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 75,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit document node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "charset",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 88,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit charset node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "namespace",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 96,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit namespace node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 104,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit supports node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframes",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 115,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframes node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 129,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframe node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "page",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 142,
				"end_line": 151,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit page node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'font-face'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 157,
				"end_line": 162,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit font-face node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "host",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 168,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit host node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'custom-media'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 179,
				"end_line": 181,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit custom-media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 187,
				"end_line": 197,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit rule node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 203,
				"end_line": 205,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit declaration node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/ast/stringify/identity.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "Compiler",
				"namespace": "editor",
				"aliases": [],
				"line": 26,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Initialize a new `Compiler`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "compile",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 42,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Compile `node`.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "stylesheet",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit stylesheet node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "comment",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 58,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit comment node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "import",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 66,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit import node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "media",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 74,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "document",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 92,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit document node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "charset",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 114,
				"end_line": 116,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit charset node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "namespace",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 122,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit namespace node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "supports",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 130,
				"end_line": 143,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit supports node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframes",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 149,
				"end_line": 162,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframes node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "keyframe",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 168,
				"end_line": 185,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit keyframe node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "page",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 191,
				"end_line": 202,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit page node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'font-face'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 208,
				"end_line": 215,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit font-face node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "host",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 221,
				"end_line": 234,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit host node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "'custom-media'",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 240,
				"end_line": 242,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit custom-media node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "rule",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 248,
				"end_line": 263,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit rule node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "declaration",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 269,
				"end_line": 273,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Visit declaration node.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "indent",
				"namespace": "editor\\Compiler",
				"aliases": [],
				"line": 279,
				"end_line": 288,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Increase, decrease or return current indentation.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/ast/stringify/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 24,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Stringfy the given AST `node`.",
					"long_description": "\nOptions:\n\n - `compress` space-optimized output\n - `sourcemap` return an object with `.code` and `.map`",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "",
							"types": [
								"String"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "transformStyles",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "styles",
						"default": null,
						"type": "Array"
					},
					{
						"name": "wrapperClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Convert css rules.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "CSS rules.",
							"types": [
								"Array"
							],
							"variable": "styles"
						},
						{
							"name": "param",
							"content": "Wrapper Class Name.",
							"types": [
								"string"
							],
							"variable": "wrapperClassName"
						},
						{
							"name": "return",
							"content": "converted rules.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/transforms/url-rewrite.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isRemotePath",
				"namespace": "editor",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "filePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Return `true` if the given path is http/https.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "path",
							"types": [
								"string"
							],
							"variable": "filePath"
						},
						{
							"name": "return",
							"content": "is remote path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAbsolutePath",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "filePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Return `true` if the given filePath is an absolute url.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "path",
							"types": [
								"string"
							],
							"variable": "filePath"
						},
						{
							"name": "return",
							"content": "is absolute path.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidURL",
				"namespace": "editor",
				"aliases": [],
				"line": 35,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "meta",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether or not the url should be inluded.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "url meta info",
							"types": [
								"Object"
							],
							"variable": "meta"
						},
						{
							"name": "return",
							"content": "is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getResourcePath",
				"namespace": "editor",
				"aliases": [],
				"line": 62,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "str",
						"default": null,
						"type": "string"
					},
					{
						"name": "baseURL",
						"default": null,
						"type": "string"
					},
					{
						"name": "absolutePath",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Get the absolute path of the url, relative to the basePath",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the url",
							"types": [
								"string"
							],
							"variable": "str"
						},
						{
							"name": "param",
							"content": "base URL",
							"types": [
								"string"
							],
							"variable": "baseURL"
						},
						{
							"name": "param",
							"content": "the absolute path",
							"types": [
								"string"
							],
							"variable": "absolutePath"
						},
						{
							"name": "return",
							"content": "the full path to the file",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "processURL",
				"namespace": "editor",
				"aliases": [],
				"line": 75,
				"end_line": 90,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "baseURL",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Process the single `url()` pattern",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the base URL for relative URLs",
							"types": [
								"string"
							],
							"variable": "baseURL"
						},
						{
							"name": "return",
							"content": "the Promise",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getURLs",
				"namespace": "editor",
				"aliases": [],
				"line": 99,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Get all `url()`s, and return the meta info",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "decl.value",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "the urls",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceURLs",
				"namespace": "editor",
				"aliases": [],
				"line": 127,
				"end_line": 133,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "raw",
						"default": null,
						"type": "string"
					},
					{
						"name": "URLs",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Replace the raw value's `url()` segment to the new value",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "the raw value",
							"types": [
								"string"
							],
							"variable": "raw"
						},
						{
							"name": "param",
							"content": "the URLs to replace",
							"types": [
								"Array"
							],
							"variable": "URLs"
						},
						{
							"name": "return",
							"content": "the new value",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/editor-styles/transforms/wrap.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/hooks/align.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getValidAlignments",
				"namespace": "editor",
				"aliases": [],
				"line": 50,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAlign",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "hasWideBlockSupport",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "hasWideEnabled",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the valid alignments.",
					"long_description": "Takes into consideration the aligns supported by a block, if the block supports wide controls or not and if theme supports wide controls or not.\nExported just for testing purposes, not exported outside the module.",
					"tags": [
						{
							"name": "param",
							"content": "Aligns supported by the block.",
							"types": [
								"boolean",
								"Array.<string>"
							],
							"variable": "blockAlign"
						},
						{
							"name": "param",
							"content": "True if block supports wide alignments. And False otherwise.",
							"types": [
								"boolean"
							],
							"variable": "hasWideBlockSupport"
						},
						{
							"name": "param",
							"content": "True if theme supports wide alignments. And False otherwise.",
							"types": [
								"boolean"
							],
							"variable": "hasWideEnabled"
						},
						{
							"name": "return",
							"content": "Valid alignments.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 77,
				"end_line": 92,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes to include `align`.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addAssignedAlign",
				"namespace": "editor",
				"aliases": [],
				"line": 190,
				"end_line": 206,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject alignment class name if",
					"long_description": "block supports it.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Block type",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Block attributes",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/hooks/anchor.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 99,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/hooks/custom-class-name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 34,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 92,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLRootElementClasses",
				"namespace": "editor",
				"aliases": [],
				"line": 108,
				"end_line": 119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string, returns an array of class names assigned to the root",
					"long_description": "element in the markup.",
					"tags": [
						{
							"name": "param",
							"content": "Markup string from which to extract classes.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Array of class names assigned to the root element.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addParsedDifference",
				"namespace": "editor",
				"aliases": [],
				"line": 133,
				"end_line": 153,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a parsed set of block attributes, if the block supports custom class",
					"long_description": "names and an unknown class (per the block's serialization behavior) is\nfound, the unknown classes are treated as custom classes. This prevents the\nblock from being considered as invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Original block attributes.",
							"types": [
								"Object"
							],
							"variable": "blockAttributes"
						},
						{
							"name": "param",
							"content": "Block type settings.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Original block markup.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Filtered block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/hooks/custom-class-name.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 25,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Filters registered block settings, extending attributes with anchor using ID",
					"long_description": "of the first node.",
					"tags": [
						{
							"name": "param",
							"content": "Original block settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Filtered block settings.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addSaveProps",
				"namespace": "editor",
				"aliases": [],
				"line": 49,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject anchor ID, if block",
					"long_description": "supports anchor. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Current block attributes.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getHTMLRootElementClasses",
				"namespace": "editor",
				"aliases": [],
				"line": 65,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an HTML string, returns an array of class names assigned to the root",
					"long_description": "element in the markup.",
					"tags": [
						{
							"name": "param",
							"content": "Markup string from which to extract classes.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Array of class names assigned to the root element.",
							"types": [
								"Array.<string>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addParsedDifference",
				"namespace": "editor",
				"aliases": [],
				"line": 90,
				"end_line": 113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockAttributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "innerHTML",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a parsed set of block attributes, if the block supports custom class",
					"long_description": "names and an unknown class (per the block's serialization behavior) is\nfound, the unknown classes are treated as custom classes. This prevents the\nblock from being considered as invalid.",
					"tags": [
						{
							"name": "param",
							"content": "Original block attributes.",
							"types": [
								"Object"
							],
							"variable": "blockAttributes"
						},
						{
							"name": "param",
							"content": "Block type settings.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Original block markup.",
							"types": [
								"string"
							],
							"variable": "innerHTML"
						},
						{
							"name": "return",
							"content": "Filtered block attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/hooks/generated-class-name.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addGeneratedClassName",
				"namespace": "editor",
				"aliases": [],
				"line": 22,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "extraProps",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Override props assigned to save component to inject generated className if",
					"long_description": "block supports it. This is only applied if the block's save result is an\nelement and not a markup string.",
					"tags": [
						{
							"name": "param",
							"content": "Additional props applied to save element.",
							"types": [
								"Object"
							],
							"variable": "extraProps"
						},
						{
							"name": "param",
							"content": "Block type.",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "return",
							"content": "Filtered props applied to save element.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setupEditor",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					},
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that editor has initialized with",
					"long_description": "the specified post object and editor settings.",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "param",
							"content": "Initial edited attributes object.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetPost",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the latest version of the",
					"long_description": "post has been received, either by initialization or save.",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 51,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the latest autosave of the",
					"long_description": "post has been received, by initialization or autosave.",
					"tags": [
						{
							"name": "param",
							"content": "Autosave post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updatePost",
				"namespace": "editor",
				"aliases": [],
				"line": 66,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a patch of updates for the",
					"long_description": "latest version of the post have been received.",
					"tags": [
						{
							"name": "param",
							"content": "Updated post fields.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setupEditorState",
				"namespace": "editor",
				"aliases": [],
				"line": 81,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "post",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used to setup the editor state when first opening an editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Post object.",
							"types": [
								"Object"
							],
							"variable": "post"
						},
						{
							"name": "param",
							"content": "Array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 98,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that blocks state should be",
					"long_description": "reset to the specified array of blocks, taking precedence over any other\ncontent reflected as an edit in state.",
					"tags": [
						{
							"name": "param",
							"content": "Array of blocks.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "receiveBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 114,
				"end_line": 119,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that blocks have been received.",
					"long_description": "Unlike resetBlocks, these should be appended to the existing known set, not\nreplacing.",
					"tags": [
						{
							"name": "param",
							"content": "Array of block objects.",
							"types": [
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlockAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 130,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block attributes with",
					"long_description": "the specified client ID has been updated.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Block attributes to be merged.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 147,
				"end_line": 153,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updates",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID has been updated.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Block attributes to be merged.",
							"types": [
								"Object"
							],
							"variable": "updates"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "selectBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 167,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "initialPosition",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID has been selected, optionally accepting a position\nvalue reflecting its selection directionality. An initialPosition of -1\nreflects a reverse selection.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Optional initial position. Pass as -1 to\n                                 reflect reverse selection.",
							"types": [
								"number"
							],
							"variable": "initialPosition"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 209,
				"end_line": 214,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isSelectionEnabled",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object that enables or disables block selection.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Whether block selection should\n                                           be enabled.",
							"types": [
								"boolean"
							],
							"variable": "isSelectionEnabled"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 225,
				"end_line": 232,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					},
					{
						"name": "blocks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that a blocks should be replaced with",
					"long_description": "one or more replacement blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID(s) to replace.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientIds"
						},
						{
							"name": "param",
							"content": "Replacement block(s).",
							"types": [
								"Object",
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replaceBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 243,
				"end_line": 245,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "block",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that a single block should be replaced",
					"long_description": "with one or more replacement blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID to replace.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Replacement block(s).",
							"types": [
								"Object",
								"Array.<Object>"
							],
							"variable": "block"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createOnMove",
				"namespace": "editor",
				"aliases": [],
				"line": 255,
				"end_line": 263,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order action creator which, given the action type to dispatch creates",
					"long_description": "an action creator for managing block movement.",
					"tags": [
						{
							"name": "param",
							"content": "Action type to dispatch.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "return",
							"content": "Action creator.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "moveBlockToPosition",
				"namespace": "editor",
				"aliases": [],
				"line": 279,
				"end_line": 287,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "fromRootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "toRootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object signalling that an indexed block should be moved",
					"long_description": "to a new index.",
					"tags": [
						{
							"name": "param",
							"content": "The client ID of the block.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Root client ID source.",
							"types": [
								"string"
							],
							"variable": "fromRootClientId"
						},
						{
							"name": "param",
							"content": "Root client ID destination.",
							"types": [
								"string"
							],
							"variable": "toRootClientId"
						},
						{
							"name": "param",
							"content": "The index to move the block into.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 300,
				"end_line": 302,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "block",
						"default": null,
						"type": "Object"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updateSelection",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a single block should be",
					"long_description": "inserted, optionally at a specific index respective a root block list.",
					"tags": [
						{
							"name": "param",
							"content": "Block object to insert.",
							"types": [
								"Object"
							],
							"variable": "block"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "If true block selection will be updated. If false, block selection will not change. Defaults to true.",
							"types": [
								"boolean"
							],
							"variable": "updateSelection"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 315,
				"end_line": 324,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array.<Object>"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "updateSelection",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an array of blocks should",
					"long_description": "be inserted, optionally at a specific index respective a root block list.",
					"tags": [
						{
							"name": "param",
							"content": "Block objects to insert.",
							"types": [
								"Array.<Object>"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "If true block selection will be updated.  If false, block selection will not change. Defaults to true.",
							"types": [
								"boolean"
							],
							"variable": "updateSelection"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "showInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 336,
				"end_line": 342,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the insertion point should",
					"long_description": "be shown.",
					"tags": [
						{
							"name": "param",
							"content": "Optional root client ID of block list on\n                              which to insert.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "Index at which block should be inserted.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hideInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 349,
				"end_line": 353,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object hiding the insertion point.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "setTemplateValidity",
				"namespace": "editor",
				"aliases": [],
				"line": 362,
				"end_line": 367,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "isValid",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object resetting the template validity.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "template validity flag.",
							"types": [
								"boolean"
							],
							"variable": "isValid"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "synchronizeTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 374,
				"end_line": 378,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object synchronize the template with the list of blocks",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "editPost",
				"namespace": "editor",
				"aliases": [],
				"line": 388,
				"end_line": 393,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "edits",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that attributes of the post have",
					"long_description": "been edited.",
					"tags": [
						{
							"name": "param",
							"content": "Post attributes to edit.",
							"types": [
								"Object"
							],
							"variable": "edits"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "savePost",
				"namespace": "editor",
				"aliases": [],
				"line": 403,
				"end_line": 408,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.isAutosave",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object to save the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Options for the save.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Perform an autosave if true.",
							"types": [
								"boolean"
							],
							"variable": "options.isAutosave"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mergeBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 432,
				"end_line": 437,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "firstBlockClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "secondBlockClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that two blocks should be merged",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the first block to merge.",
							"types": [
								"string"
							],
							"variable": "firstBlockClientId"
						},
						{
							"name": "param",
							"content": "Client ID of the second block to merge.",
							"types": [
								"string"
							],
							"variable": "secondBlockClientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autosave",
				"namespace": "editor",
				"aliases": [],
				"line": 446,
				"end_line": 448,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the post should autosave.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Extra flags to identify the autosave.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "redo",
				"namespace": "editor",
				"aliases": [],
				"line": 456,
				"end_line": 458,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history should",
					"long_description": "restore last popped state.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "undo",
				"namespace": "editor",
				"aliases": [],
				"line": 465,
				"end_line": 467,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history should pop.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createUndoLevel",
				"namespace": "editor",
				"aliases": [],
				"line": 475,
				"end_line": 477,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that undo history record should",
					"long_description": "be created.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 489,
				"end_line": 495,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectPrevious",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the blocks corresponding to",
					"long_description": "the set of specified client IDs are to be removed.",
					"tags": [
						{
							"name": "param",
							"content": "Client IDs of blocks to remove.",
							"types": [
								"string",
								"Array.<string>"
							],
							"variable": "clientIds"
						},
						{
							"name": "param",
							"content": "True if the previous block should be\n                                        selected when a block is removed.",
							"types": [
								"boolean"
							],
							"variable": "selectPrevious"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 507,
				"end_line": 509,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectPrevious",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that the block with the",
					"long_description": "specified client ID is to be removed.",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of block to remove.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "True if the previous block should be\n                                selected when a block is removed.",
							"types": [
								"boolean"
							],
							"variable": "selectPrevious"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toggleBlockMode",
				"namespace": "editor",
				"aliases": [],
				"line": 519,
				"end_line": 524,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to toggle the block editing mode between",
					"long_description": "visual and HTML modes.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "startTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 531,
				"end_line": 535,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has begun to type.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "stopTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 542,
				"end_line": 546,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has stopped typing.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enterFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 553,
				"end_line": 557,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the caret has entered formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "exitFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 564,
				"end_line": 568,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user caret has exited formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updatePostLock",
				"namespace": "editor",
				"aliases": [],
				"line": 577,
				"end_line": 582,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lock",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to lock the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Details about the post lock status, user, and nonce.",
							"types": [
								"Object"
							],
							"variable": "lock"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalFetchReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 593,
				"end_line": 598,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to fetch a single reusable block or all",
					"long_description": "reusable blocks from the REST API into the store.",
					"tags": [
						{
							"name": "param",
							"content": "If given, only a single reusable block with this ID will\n                    be fetched.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalReceiveReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 610,
				"end_line": 615,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "results",
						"default": null,
						"type": "Array.<Object>"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that reusable blocks have been",
					"long_description": "received. `results` is an array of objects containing:\n - `reusableBlock` - Details about how the reusable block is persisted.\n - `parsedBlock` - The original block.",
					"tags": [
						{
							"name": "param",
							"content": "Reusable blocks received.",
							"types": [
								"Array.<Object>"
							],
							"variable": "results"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalSaveReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 625,
				"end_line": 630,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used to save a reusable block that's in the store to",
					"long_description": "the REST API.",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to save.",
							"types": [
								"Object"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalDeleteReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 639,
				"end_line": 644,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used to delete a reusable block via the REST API.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to delete.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalUpdateReusableBlockTitle",
				"namespace": "editor",
				"aliases": [],
				"line": 655,
				"end_line": 661,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					},
					{
						"name": "title",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a reusable block's title is",
					"long_description": "to be updated.",
					"tags": [
						{
							"name": "param",
							"content": "The ID of the reusable block to update.",
							"types": [
								"number"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "The new title.",
							"types": [
								"string"
							],
							"variable": "title"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalConvertBlockToStatic",
				"namespace": "editor",
				"aliases": [],
				"line": 670,
				"end_line": 675,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to convert a reusable block into a static block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The client ID of the block to attach.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalConvertBlockToReusable",
				"namespace": "editor",
				"aliases": [],
				"line": 684,
				"end_line": 689,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientIds",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to convert a static block into a reusable block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The client IDs of the block to detach.",
							"types": [
								"string"
							],
							"variable": "clientIds"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertDefaultBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 701,
				"end_line": 705,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attributes",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a new block of the default",
					"long_description": "type should be added to the block list.",
					"tags": [
						{
							"name": "param",
							"content": "Optional attributes of the block to assign.",
							"types": [
								"Object"
							],
							"variable": "attributes"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list on which\n                              to append.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "param",
							"content": "Optional index where to insert the default block",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "updateBlockListSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 716,
				"end_line": 722,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object that changes the nested settings of a given block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Client ID of the block whose nested setting are\n                         being received.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Object with the new settings for the nested block.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enablePublishSidebar",
				"namespace": "editor",
				"aliases": [],
				"line": 743,
				"end_line": 747,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has enabled the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "disablePublishSidebar",
				"namespace": "editor",
				"aliases": [],
				"line": 754,
				"end_line": 758,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object used in signalling that the user has disabled the publish sidebar.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "lockPostSaving",
				"namespace": "editor",
				"aliases": [],
				"line": 767,
				"end_line": 772,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to signal that post saving is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The lock name.",
							"types": [
								"string"
							],
							"variable": "lockName"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unlockPostSaving",
				"namespace": "editor",
				"aliases": [],
				"line": 781,
				"end_line": 786,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "lockName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to signal that post saving is unlocked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The lock name.",
							"types": [
								"string"
							],
							"variable": "lockName"
						},
						{
							"name": "return",
							"content": "Action object",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/array.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertAt",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "array",
						"default": null,
						"type": "Array"
					},
					{
						"name": "elements",
						"default": null,
						"type": "*"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert one or multiple elements into a given position of an array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Source array.",
							"types": [
								"Array"
							],
							"variable": "array"
						},
						{
							"name": "param",
							"content": "Elements to insert.",
							"types": [
								"*"
							],
							"variable": "elements"
						},
						{
							"name": "param",
							"content": "Insert Position.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Result.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "moveTo",
				"namespace": "editor",
				"aliases": [],
				"line": 33,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "array",
						"default": null,
						"type": "Array"
					},
					{
						"name": "from",
						"default": null,
						"type": "number"
					},
					{
						"name": "to",
						"default": null,
						"type": "number"
					},
					{
						"name": "count",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Moves an element in an array.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Source array.",
							"types": [
								"Array"
							],
							"variable": "array"
						},
						{
							"name": "param",
							"content": "Source index.",
							"types": [
								"number"
							],
							"variable": "from"
						},
						{
							"name": "param",
							"content": "Destination index.",
							"types": [
								"number"
							],
							"variable": "to"
						},
						{
							"name": "param",
							"content": "Number of elements to move.",
							"types": [
								"number"
							],
							"variable": "count"
						},
						{
							"name": "return",
							"content": "Result.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/constants.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/defaults.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/effects/posts.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/effects/reusable-blocks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/effects/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "resolveSelector",
				"namespace": "editor",
				"aliases": [],
				"line": 15,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "namespace",
						"default": null,
						"type": "string"
					},
					{
						"name": "selectorName",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Waits for the resolution of a selector before returning the selector's value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store namespace.",
							"types": [
								"string"
							],
							"variable": "namespace"
						},
						{
							"name": "param",
							"content": "Selector name.",
							"types": [
								"string"
							],
							"variable": "selectorName"
						},
						{
							"name": "param",
							"content": "Selector args.",
							"types": [
								"Array"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Selector result.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/effects.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateBlocksToTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 70,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Block validity is a function of blocks state (at the point of a",
					"long_description": "reset) and the template setting. As a compromise to its placement\nacross distinct parts of state, it is implemented here as a side-\neffect of the block reset action.",
					"tags": [
						{
							"name": "param",
							"content": "RESET_BLOCKS action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "New validity set action if validity has changed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "selectPreviousBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 99,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Effect handler which will return a block select action to select the block",
					"long_description": "occurring before the selected block in the previous state, unless it is the\nsame block or the action includes a falsey `selectPrevious` option flag.",
					"tags": [
						{
							"name": "param",
							"content": "Action which had initiated the effect handler.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Block select action to select previous, if applicable.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "ensureDefaultBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 137,
				"end_line": 141,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Effect handler which will return a default block insertion action if there",
					"long_description": "are no other blocks at the root of the editor. This is expected to be used\nin actions which may result in no blocks remaining in the editor (removal,\nreplacement, etc).",
					"tags": [
						{
							"name": "param",
							"content": "Action which had initiated the effect handler.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Store instance.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Default block insert action, if no other blocks exist.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/middlewares.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyMiddlewares",
				"namespace": "editor",
				"aliases": [],
				"line": 20,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "store",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Applies the custom middlewares used specifically in the editor module.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Store Object.",
							"types": [
								"Object"
							],
							"variable": "store"
						},
						{
							"name": "return",
							"content": "Update Store Object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getPostRawValue",
				"namespace": "editor",
				"aliases": [],
				"line": 49,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns a post attribute value, flattening nested rendered content using its",
					"long_description": "raw value in place of its original object form.",
					"tags": [
						{
							"name": "param",
							"content": "Original value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Raw value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mapBlockOrder",
				"namespace": "editor",
				"aliases": [],
				"line": 67,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object where each key is a nesting",
					"long_description": "context, the value of which is an array of block client IDs existing within\nthat nesting context.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to map.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Assumed root client ID.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Block order map object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "flattenBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 91,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					},
					{
						"name": "transform",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Helper method to iterate through all blocks, recursing into inner blocks,",
					"long_description": "applying a transformation function to each one.\nReturns a flattened object with the transformed blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "param",
							"content": "Transforming function to be applied to each block.",
							"types": [
								"function"
							],
							"variable": "transform"
						},
						{
							"name": "return",
							"content": "Flattened object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFlattenedBlocksWithoutAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 113,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object containing all blocks, without",
					"long_description": "attributes, recursing into inner blocks. Keys correspond to the block client\nID, the value of which is the attributes object.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Flattened block attributes object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFlattenedBlockAttributes",
				"namespace": "editor",
				"aliases": [],
				"line": 126,
				"end_line": 128,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocks",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Given an array of blocks, returns an object containing all block attributes,",
					"long_description": "recursing into inner blocks. Keys correspond to the block client ID, the\nvalue of which is the attributes object.",
					"tags": [
						{
							"name": "param",
							"content": "Blocks to flatten.",
							"types": [
								"Array"
							],
							"variable": "blocks"
						},
						{
							"name": "return",
							"content": "Flattened block attributes object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNestedBlockClientIds",
				"namespace": "editor",
				"aliases": [],
				"line": 144,
				"end_line": 150,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blocksOrder",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block order map object, returns *all* of the block client IDs that are",
					"long_description": "a descendant of the given root client ID.\n\nCalling this with `rootClientId` set to `''` results in a list of client IDs\nthat are in the post. That is, it excludes blocks like fetched reusable\nblocks which are stored into state but not visible.",
					"tags": [
						{
							"name": "param",
							"content": "Object that maps block client IDs to a list of\n                              nested block client IDs.",
							"types": [
								"Object"
							],
							"variable": "blocksOrder"
						},
						{
							"name": "param",
							"content": "The root client ID to search. Defaults to ''.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "List of descendant client IDs.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMutateSafeObject",
				"namespace": "editor",
				"aliases": [],
				"line": 161,
				"end_line": 167,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "original",
						"default": null,
						"type": "Object"
					},
					{
						"name": "working",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an object against which it is safe to perform mutating operations,",
					"long_description": "given the original object and its current working copy.",
					"tags": [
						{
							"name": "param",
							"content": "Original object.",
							"types": [
								"Object"
							],
							"variable": "original"
						},
						{
							"name": "param",
							"content": "Working object.",
							"types": [
								"Object"
							],
							"variable": "working"
						},
						{
							"name": "return",
							"content": "Mutation-safe object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSameKeys",
				"namespace": "editor",
				"aliases": [],
				"line": 178,
				"end_line": 180,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the two object arguments have the same keys, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First object.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two objects have the same keys.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isUpdatingSameBlockAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 192,
				"end_line": 198,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are updating the same block attribute, or\nfalse otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether actions are updating the same block attribute.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isUpdatingSamePostProperty",
				"namespace": "editor",
				"aliases": [],
				"line": 210,
				"end_line": 215,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are editing the same post property, or\nfalse otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether actions are updating the same post property.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "shouldOverwriteState",
				"namespace": "editor",
				"aliases": [],
				"line": 227,
				"end_line": 236,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "action",
						"default": null,
						"type": "Object"
					},
					{
						"name": "previousAction",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if, given the currently dispatching action and the previously",
					"long_description": "dispatched action, the two actions are modifying the same property such that\nundo history should be batched.",
					"tags": [
						{
							"name": "param",
							"content": "Currently dispatching action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "param",
							"content": "Previously dispatched action.",
							"types": [
								"Object"
							],
							"variable": "previousAction"
						},
						{
							"name": "return",
							"content": "Whether to overwrite present state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withInnerBlocksRemoveCascade",
				"namespace": "editor",
				"aliases": [],
				"line": 246,
				"end_line": 260,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer targeting the combined editor reducer, augmenting",
					"long_description": "block client IDs in remove action to include cascade of inner blocks.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withBlockReset",
				"namespace": "editor",
				"aliases": [],
				"line": 272,
				"end_line": 293,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which targets the combined blocks reducer and handles",
					"long_description": "the `RESET_BLOCKS` action. When dispatched, this action will replace all\nblocks that exist in the post, leaving blocks that exist only in state (e.g.\nreusable blocks) alone.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "withSaveReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 305,
				"end_line": 330,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "reducer",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer which targets the combined blocks reducer and handles",
					"long_description": "the `SAVE_REUSABLE_BLOCK_SUCCESS` action. This action can't be handled by\nregular reducers and needs a higher-order reducer since it needs access to\nboth `byClientId` and `attributes` simultaneously.",
					"tags": [
						{
							"name": "param",
							"content": "Original reducer function.",
							"types": [
								"function"
							],
							"variable": "reducer"
						},
						{
							"name": "return",
							"content": "Enhanced reducer function.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "initialEdits",
				"namespace": "editor",
				"aliases": [],
				"line": 691,
				"end_line": 723,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the initial edits state. With matching shape to that of",
					"long_description": "`editor.edits`, the initial edits are those applied programmatically, are\nnot considered in prompting the user for unsaved changes, and are included\nin (and reset by) the next save payload.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Action object.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Next state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "currentPost",
				"namespace": "editor",
				"aliases": [],
				"line": 734,
				"end_line": 755,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the last-known state of the current post, in the format",
					"long_description": "returned by the WP REST API.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 765,
				"end_line": 775,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning typing state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCaretWithinFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 785,
				"end_line": 795,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning whether the caret is within formatted text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "blockSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 805,
				"end_line": 912,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the block selection's state.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "insertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 936,
				"end_line": 947,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the block insertion point visibility, either null if there",
					"long_description": "is not an explicit insertion point assigned, or an object of its `index` and\n`rootClientId`.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "template",
				"namespace": "editor",
				"aliases": [],
				"line": 957,
				"end_line": 967,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning whether the post blocks match the defined template or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "settings",
				"namespace": "editor",
				"aliases": [],
				"line": 977,
				"end_line": 987,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the editor setting.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "preferences",
				"namespace": "editor",
				"aliases": [],
				"line": 997,
				"end_line": 1042,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the user preferences.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "saving",
				"namespace": "editor",
				"aliases": [],
				"line": 1053,
				"end_line": 1081,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning current network request state (whether a request to",
					"long_description": "the WP REST API is in progress, successful, or failed).",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "postLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1102,
				"end_line": 1109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "PostLockState"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the post lock status.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"PostLockState"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"PostLockState"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "postSavingLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1121,
				"end_line": 1130,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "PostSavingLockState"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Post saving lock.",
					"long_description": "\nWhen post saving is locked, the post cannot be published or updated.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"PostSavingLockState"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"PostLockState"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "autosave",
				"namespace": "editor",
				"aliases": [],
				"line": 1282,
				"end_line": 1300,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the most recent autosave.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The autosave object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "previewLink",
				"namespace": "editor",
				"aliases": [],
				"line": 1310,
				"end_line": 1330,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "string"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the post preview link.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The preview link",
							"types": [
								"string"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasEditorUndo",
				"namespace": "editor",
				"aliases": [],
				"line": 77,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if any past editor history snapshots exist, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether undo history exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasEditorRedo",
				"namespace": "editor",
				"aliases": [],
				"line": 89,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if any future editor history snapshots exist, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether redo history exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostNew",
				"namespace": "editor",
				"aliases": [],
				"line": 101,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the currently edited post is yet to be saved, or false if",
					"long_description": "the post has been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is new.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasChangedContent",
				"namespace": "editor",
				"aliases": [],
				"line": 112,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if content includes unsaved changes, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether content includes unsaved changes.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostDirty",
				"namespace": "editor",
				"aliases": [],
				"line": 133,
				"end_line": 151,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there are unsaved values for the current edit session, or",
					"long_description": "false if the editing state matches the saved or new post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether unsaved values exist.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCleanNewPost",
				"namespace": "editor",
				"aliases": [],
				"line": 161,
				"end_line": 163,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there are no unsaved values for the current edit session and",
					"long_description": "if the currently edited post is new (has never been saved before).",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether new post and unsaved values exist.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPost",
				"namespace": "editor",
				"aliases": [],
				"line": 174,
				"end_line": 176,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post currently being edited in its last known saved state, not",
					"long_description": "including unsaved edits. Returns an object containing relevant default post\nvalues if the post has not yet been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostType",
				"namespace": "editor",
				"aliases": [],
				"line": 185,
				"end_line": 187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post type of the post currently being edited.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post type.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostId",
				"namespace": "editor",
				"aliases": [],
				"line": 197,
				"end_line": 199,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the ID of the post currently being edited, or null if the post has",
					"long_description": "not yet been saved.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "ID of current post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostRevisionsCount",
				"namespace": "editor",
				"aliases": [],
				"line": 208,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the number of revisions of the post currently being edited.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Number of revisions.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostLastRevisionId",
				"namespace": "editor",
				"aliases": [],
				"line": 220,
				"end_line": 222,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the last revision ID of the post currently being edited,",
					"long_description": "or null if the post has no revisions.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "ID of the last revision.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getCurrentPostAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 276,
				"end_line": 281,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an attribute value of the saved post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Post attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Post attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 293,
				"end_line": 319,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a single attribute of the post being edited, preferring the unsaved",
					"long_description": "edit if one exists, but falling back to the attribute for the last known\nsaved state of the post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Post attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Post attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAutosaveAttribute",
				"namespace": "editor",
				"aliases": [],
				"line": 330,
				"end_line": 339,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "attributeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an attribute value of the current autosave revision for a post, or",
					"long_description": "null if there is no autosave for the post.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Autosave attribute name.",
							"types": [
								"string"
							],
							"variable": "attributeName"
						},
						{
							"name": "return",
							"content": "Autosave attribute value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostVisibility",
				"namespace": "editor",
				"aliases": [],
				"line": 350,
				"end_line": 362,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current visibility of the post being edited, preferring the",
					"long_description": "unsaved value if different than the saved post. The return value is one of\n\"private\", \"password\", or \"public\".",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Post visibility.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostPending",
				"namespace": "editor",
				"aliases": [],
				"line": 371,
				"end_line": 373,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if post is pending review.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether current post is pending review.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostPublished",
				"namespace": "editor",
				"aliases": [],
				"line": 382,
				"end_line": 387,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the current post has already been published.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post has been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCurrentPostScheduled",
				"namespace": "editor",
				"aliases": [],
				"line": 396,
				"end_line": 398,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if post is already scheduled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether current post is scheduled to be posted.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostPublishable",
				"namespace": "editor",
				"aliases": [],
				"line": 407,
				"end_line": 416,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the post being edited can be published.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostSaveable",
				"namespace": "editor",
				"aliases": [],
				"line": 426,
				"end_line": 446,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post can be saved, or false otherwise. A post must",
					"long_description": "contain a title, an excerpt, or non-empty content to be valid for save.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can be saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostEmpty",
				"namespace": "editor",
				"aliases": [],
				"line": 457,
				"end_line": 494,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the edited post has content. A post has content if it has at",
					"long_description": "least one saveable block or otherwise has a non-empty content property\nassigned.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post has content.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostAutosaveable",
				"namespace": "editor",
				"aliases": [],
				"line": 503,
				"end_line": 527,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post can be autosaved, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post can be autosaved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 538,
				"end_line": 540,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current autosave, or null if one is not set (i.e. if the post",
					"long_description": "has yet to be autosaved, or has been saved or published since the last\nautosave).",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Current autosave, if exists.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasAutosave",
				"namespace": "editor",
				"aliases": [],
				"line": 549,
				"end_line": 551,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the true if there is an existing autosave, otherwise false.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether there is an existing autosave.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostBeingScheduled",
				"namespace": "editor",
				"aliases": [],
				"line": 561,
				"end_line": 567,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if the post being edited is being scheduled. Preferring the",
					"long_description": "unsaved status values.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post has been published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEditedPostDateFloating",
				"namespace": "editor",
				"aliases": [],
				"line": 582,
				"end_line": 590,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the current post should be considered to have a \"floating\"",
					"long_description": "date (i.e. that it would publish \"Immediately\" rather than at a set time).\n\nUnlike in the PHP backend, the REST API returns a full date string for posts\nwhere the 0000-00-00T00:00:00 placeholder is present in the database. To\ninfer that a post is set to publish \"Immediately\" we check whether the date\nand modified date are the same.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the edited post has a floating date value.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockName",
				"namespace": "editor",
				"aliases": [],
				"line": 623,
				"end_line": 626,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a block's name given its client ID, or null if no block exists with",
					"long_description": "the client ID.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockValid",
				"namespace": "editor",
				"aliases": [],
				"line": 636,
				"end_line": 639,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether a block is valid or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Is Valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockCount",
				"namespace": "editor",
				"aliases": [],
				"line": 853,
				"end_line": 855,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the number of blocks currently present in the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Number of blocks in the post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSelectionStart",
				"namespace": "editor",
				"aliases": [],
				"line": 866,
				"end_line": 868,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current block selection start. This value may be null, and it",
					"long_description": "may represent either a singular block selection or multi-selection start.\nA selection is singular if its start and end match.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block selection start.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockSelectionEnd",
				"namespace": "editor",
				"aliases": [],
				"line": 879,
				"end_line": 881,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the current block selection end. This value may be null, and it",
					"long_description": "may represent either a singular block selection or multi-selection end.\nA selection is singular if its start and end match.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block selection end.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlockCount",
				"namespace": "editor",
				"aliases": [],
				"line": 890,
				"end_line": 898,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the number of blocks currently selected in the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Number of blocks selected in the post.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 907,
				"end_line": 910,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if there is a single selected block, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether a single block is selected.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 920,
				"end_line": 926,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the currently selected block client ID, or null if there is no",
					"long_description": "selected block.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block client ID.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 935,
				"end_line": 938,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the currently selected block, or null if there is no selected block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAdjacentBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1005,
				"end_line": 1049,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "modifier",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block adjacent one at the given reference",
					"long_description": "startClientId and modifier directionality. Defaults start startClientId to\nthe selected block, and direction as next block. Returns null if there is no\nadjacent block.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "param",
							"content": "Directionality multiplier (1 next, -1\n                               previous).",
							"types": [
								"number"
							],
							"variable": "modifier"
						},
						{
							"name": "return",
							"content": "Return the client ID of the block, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPreviousBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1062,
				"end_line": 1064,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the previous block's client ID from the given reference start ID.",
					"long_description": "Defaults start to the selected block. Returns null if there is no previous\nblock.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "return",
							"content": "Adjacent block's client ID, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNextBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1077,
				"end_line": 1079,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the next block's client ID from the given reference start ID.",
					"long_description": "Defaults start to the selected block. Returns null if there is no next\nblock.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional client ID of block from which to\n                               search.",
							"types": [
								"string"
							],
							"variable": "startClientId"
						},
						{
							"name": "return",
							"content": "Adjacent block's client ID, or null if none exists.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSelectedBlocksInitialCaretPosition",
				"namespace": "editor",
				"aliases": [],
				"line": 1089,
				"end_line": 1096,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the initial caret position for the selected block.",
					"long_description": "This position is to used to position the caret properly when the selected block changes.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Selected block.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFirstMultiSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1172,
				"end_line": 1174,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the first block in the multi-selection set, or null",
					"long_description": "if there is no multi-selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "First block client ID in the multi-selection set.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getLastMultiSelectedBlockClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1184,
				"end_line": 1186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the last block in the multi-selection set, or null",
					"long_description": "if there is no multi-selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Last block client ID in the multi-selection set.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isFirstMultiSelectedBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1221,
				"end_line": 1223,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if a multi-selection exists, and the block corresponding to the",
					"long_description": "specified client ID is the first block of the multi-selection set, or false\notherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is first in multi-selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockMultiSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 1234,
				"end_line": 1236,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the client ID occurs within the block multi-selection, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is in multi-selection set.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiSelectedBlocksStartClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1276,
				"end_line": 1282,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block which begins the multi-selection set, or",
					"long_description": "null if there is no multi-selection.\n\nThis is not necessarily the first client ID in the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block beginning multi-selection.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getMultiSelectedBlocksEndClientId",
				"namespace": "editor",
				"aliases": [],
				"line": 1296,
				"end_line": 1302,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the client ID of the block which ends the multi-selection set, or",
					"long_description": "null if there is no multi-selection.\n\nThis is not necessarily the last client ID in the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Client ID of block ending multi-selection.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockOrder",
				"namespace": "editor",
				"aliases": [],
				"line": 1314,
				"end_line": 1316,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an array containing all block client IDs in the editor in the order",
					"long_description": "they appear. Optionally accepts a root client ID of the block list for which\nthe order should be returned, defaulting to the top-level block order.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Ordered client IDs of editor blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockIndex",
				"namespace": "editor",
				"aliases": [],
				"line": 1328,
				"end_line": 1330,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the index at which the block corresponding to the specified client",
					"long_description": "ID occurs within the block order, or `-1` if the block does not exist.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Index at which block exists in order.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockSelected",
				"namespace": "editor",
				"aliases": [],
				"line": 1341,
				"end_line": 1349,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the block corresponding to the specified client ID is",
					"long_description": "currently selected and no multi-selection exists, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is selected and multi-selection exists.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasSelectedInnerBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 1360,
				"end_line": 1369,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					},
					{
						"name": "deep",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns true if one of the block's inner blocks is selected.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "param",
							"content": "Perform a deep check.",
							"types": [
								"boolean"
							],
							"variable": "deep"
						},
						{
							"name": "return",
							"content": "Whether the block as an inner block selected",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockWithinSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 1383,
				"end_line": 1391,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the block corresponding to the specified client ID is",
					"long_description": "currently selected but isn't the last of the selected blocks. Here \"last\"\nrefers to the block sequence in the document, _not_ the sequence of\nmulti-selection, which is why `state.blockSelection.end` isn't used.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Whether block is selected and not the last in the\n                  selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasMultiSelection",
				"namespace": "editor",
				"aliases": [],
				"line": 1400,
				"end_line": 1403,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a multi-selection has been made, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether multi-selection has been made.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isMultiSelecting",
				"namespace": "editor",
				"aliases": [],
				"line": 1416,
				"end_line": 1418,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Whether in the process of multi-selecting or not. This flag is only true",
					"long_description": "while the multi-selection is being selected (by mouse move), and is false\nonce the multi-selection has been settled.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "True if multi-selecting, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSelectionEnabled",
				"namespace": "editor",
				"aliases": [],
				"line": 1427,
				"end_line": 1429,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Selector that returns if multi-selection is enabled or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "True if it should be possible to multi-select blocks, false if multi-selection is disabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockMode",
				"namespace": "editor",
				"aliases": [],
				"line": 1440,
				"end_line": 1442,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the block's editing mode, defaulting to \"visual\" if not explicitly",
					"long_description": "assigned.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block editing mode.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isTyping",
				"namespace": "editor",
				"aliases": [],
				"line": 1451,
				"end_line": 1453,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the user is typing, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether user is typing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isCaretWithinFormattedText",
				"namespace": "editor",
				"aliases": [],
				"line": 1462,
				"end_line": 1464,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the caret is within formatted text, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the caret is within formatted text.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockInsertionPoint",
				"namespace": "editor",
				"aliases": [],
				"line": 1474,
				"end_line": 1491,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the insertion point, the index at which the new inserted block would",
					"long_description": "be placed. Defaults to the last index.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Insertion point object with `rootClientId`, `index`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockInsertionPointVisible",
				"namespace": "editor",
				"aliases": [],
				"line": 1500,
				"end_line": 1502,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if we should show the block insertion point.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the insertion point is visible or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 1510,
				"end_line": 1512,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns whether the blocks matches the template or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the template is valid or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTemplate",
				"namespace": "editor",
				"aliases": [],
				"line": 1520,
				"end_line": 1522,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns the defined block template",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Block Template",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTemplateLock",
				"namespace": "editor",
				"aliases": [],
				"line": 1533,
				"end_line": 1544,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the defined block template lock. Optionally accepts a root block",
					"long_description": "client ID as context, otherwise defaulting to the global context.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional block root client ID.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Block Template Lock",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isSavingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1553,
				"end_line": 1555,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is currently being saved, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post is being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "didPostSaveRequestSucceed",
				"namespace": "editor",
				"aliases": [],
				"line": 1565,
				"end_line": 1567,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a previous post save was attempted successfully, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post was saved successfully.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "didPostSaveRequestFail",
				"namespace": "editor",
				"aliases": [],
				"line": 1577,
				"end_line": 1579,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if a previous post save was attempted but failed, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post save failed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isAutosavingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1588,
				"end_line": 1590,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is autosaving, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is autosaving.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPreviewingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 1599,
				"end_line": 1601,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is being previewed, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the post is being previewed.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditedPostPreviewLink",
				"namespace": "editor",
				"aliases": [],
				"line": 1610,
				"end_line": 1618,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the post preview link",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Preview Link.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getSuggestedPostFormat",
				"namespace": "editor",
				"aliases": [],
				"line": 1629,
				"end_line": 1667,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a suggested post format for the current post, inferred only if there",
					"long_description": "is a single block within the post and it is of a type known to match a\ndefault post format. Returns null if the format cannot be determined.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Suggested post format.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlocksForSerialization",
				"namespace": "editor",
				"aliases": [],
				"line": 1677,
				"end_line": 1697,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a set of blocks which are to be used in consideration of the post's",
					"long_description": "generated save content.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Filtered set of blocks for save.",
							"types": [
								"Array.<WPBlock>"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canInsertBlockTypeUnmemoized",
				"namespace": "editor",
				"aliases": [],
				"line": 1749,
				"end_line": 1794,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockName",
						"default": null,
						"type": "string"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines if the given block type is allowed to be inserted into the block list.",
					"long_description": "This function is not exported and not memoized because using a memoized selector\ninside another memoized selector is just a waste of time.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The name of the block type, e.g.' core/paragraph'.",
							"types": [
								"string"
							],
							"variable": "blockName"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be inserted.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getInsertUsage",
				"namespace": "editor",
				"aliases": [],
				"line": 1825,
				"end_line": 1827,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns information about how recently and frequently a block has been inserted.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "A string which identifies the insert, e.g. 'core/block/12'",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "An object containing `time` which is when the last\n                                           insert occurred as a UNIX epoch, and `count` which is\n                                           the number of inserts that have occurred.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canIncludeBlockTypeInInserter",
				"namespace": "editor",
				"aliases": [],
				"line": 1838,
				"end_line": 1844,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "blockType",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether we can show a block type in the inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global State",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "BlockType",
							"types": [
								"Object"
							],
							"variable": "blockType"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be shown in the inserter.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canIncludeReusableBlockInInserter",
				"namespace": "editor",
				"aliases": [],
				"line": 1855,
				"end_line": 1879,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "reusableBlock",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootClientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether we can show a reusable block in the inserter",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global State",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Reusable block object",
							"types": [
								"Object"
							],
							"variable": "reusableBlock"
						},
						{
							"name": "param",
							"content": "Optional root client ID of block list.",
							"types": [
								"string"
							],
							"variable": "rootClientId"
						},
						{
							"name": "return",
							"content": "Whether the given block type is allowed to be shown in the inserter.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalIsSavingReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 2098,
				"end_line": 2100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "ref",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns whether or not the reusable block with the given ID is being saved.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The reusable block's ID.",
							"types": [
								"string"
							],
							"variable": "ref"
						},
						{
							"name": "return",
							"content": "Whether or not the reusable block is being saved.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalIsFetchingReusableBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 2111,
				"end_line": 2113,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "ref",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the reusable block with the given ID is being fetched, or",
					"long_description": "false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The reusable block's ID.",
							"types": [
								"string"
							],
							"variable": "ref"
						},
						{
							"name": "return",
							"content": "Whether the reusable block is being fetched.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__experimentalGetReusableBlocks",
				"namespace": "editor",
				"aliases": [],
				"line": 2122,
				"end_line": 2127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an array of all reusable blocks.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "An array of all reusable blocks.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getStateBeforeOptimisticTransaction",
				"namespace": "editor",
				"aliases": [],
				"line": 2138,
				"end_line": 2145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "transactionId",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns state object prior to a specified optimist transaction ID, or `null`",
					"long_description": "if the transaction corresponding to the given ID cannot be found.",
					"tags": [
						{
							"name": "param",
							"content": "Current global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optimist transaction ID.",
							"types": [
								"Object"
							],
							"variable": "transactionId"
						},
						{
							"name": "return",
							"content": "Global application state prior to transaction.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishingPost",
				"namespace": "editor",
				"aliases": [],
				"line": 2154,
				"end_line": 2175,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the post is being published, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether post is being published.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPermalinkEditable",
				"namespace": "editor",
				"aliases": [],
				"line": 2184,
				"end_line": 2188,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the permalink is editable or not.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether or not the permalink is editable.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPermalink",
				"namespace": "editor",
				"aliases": [],
				"line": 2197,
				"end_line": 2210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the permalink for the post.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The permalink, or null if the post is not viewable.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPermalinkParts",
				"namespace": "editor",
				"aliases": [],
				"line": 2221,
				"end_line": 2236,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the permalink for a post, split into it's three parts: the prefix,",
					"long_description": "the postName, and the suffix.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "An object containing the prefix, postName, and suffix for\n                 the permalink, or null if the post is not viewable.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "inSomeHistory",
				"namespace": "editor",
				"aliases": [],
				"line": 2247,
				"end_line": 2258,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "predicate",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Returns true if an optimistic transaction is pending commit, for which the",
					"long_description": "before state satisfies the given predicate function.",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Function given state, returning true if match.",
							"types": [
								"function"
							],
							"variable": "predicate"
						},
						{
							"name": "return",
							"content": "Whether predicate matches for some history.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockListSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2268,
				"end_line": 2270,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the Block List settings of a block, if any exist.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block settings of the block if set.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getEditorSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2279,
				"end_line": 2281,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the editor settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The editor settings object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getTokenSettings",
				"namespace": "editor",
				"aliases": [],
				"line": 2291,
				"end_line": 2297,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the token settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Token name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Token settings object, or the named token settings object if set.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostLocked",
				"namespace": "editor",
				"aliases": [],
				"line": 2306,
				"end_line": 2308,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the post is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is locked.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostSavingLocked",
				"namespace": "editor",
				"aliases": [],
				"line": 2317,
				"end_line": 2319,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether post saving is locked.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is locked.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPostLockTakeover",
				"namespace": "editor",
				"aliases": [],
				"line": 2328,
				"end_line": 2330,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the edition of the post has been taken over.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Is post lock takeover.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPostLockUser",
				"namespace": "editor",
				"aliases": [],
				"line": 2339,
				"end_line": 2341,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns details about the post lock user.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "A user object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getActivePostLock",
				"namespace": "editor",
				"aliases": [],
				"line": 2350,
				"end_line": 2352,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the active post lock.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "The lock object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "canUserUseUnfilteredHTML",
				"namespace": "editor",
				"aliases": [],
				"line": 2361,
				"end_line": 2363,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether or not the user has the unfiltered_html capability.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Editor state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the user can or can't post unfiltered HTML.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isPublishSidebarEnabled",
				"namespace": "editor",
				"aliases": [],
				"line": 2373,
				"end_line": 2378,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether the pre-publish panel should be shown",
					"long_description": "or skipped when the user clicks the \"publish\" button.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether the pre-publish panel should be shown or not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getBlockDOMNode",
				"namespace": "editor",
				"aliases": [],
				"line": 10,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block client ID, returns the corresponding DOM node for the block,",
					"long_description": "if exists. As much as possible, this helper should be avoided, and used only\nin cases where isolated behaviors need remote access to a block node.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block DOM node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getBlockFocusableWrapper",
				"namespace": "editor",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "clientId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Given a block client ID, returns the corresponding DOM node for the block",
					"long_description": "focusable wrapper, if exists. As much as possible, this helper should be\navoided, and used only in cases where isolated behaviors need remote access\nto a block node.",
					"tags": [
						{
							"name": "param",
							"content": "Block client ID.",
							"types": [
								"string"
							],
							"variable": "clientId"
						},
						{
							"name": "return",
							"content": "Block DOM node.",
							"types": [
								"Element"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isBlockFocusStop",
				"namespace": "editor",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if the given HTMLElement is a block focus stop. Blocks without",
					"long_description": "their own text fields rely on the focus stop to be keyboard navigable.",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is a block focus stop.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInSameBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 48,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "b",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if two elements are contained within the same block.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First element.",
							"types": [
								"HTMLElement"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second element.",
							"types": [
								"HTMLElement"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether elements are in the same block.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInsideRootBlock",
				"namespace": "editor",
				"aliases": [],
				"line": 60,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "blockElement",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if an elements is considered part of the block and not its children.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Block container element.",
							"types": [
								"HTMLElement"
							],
							"variable": "blockElement"
						},
						{
							"name": "param",
							"content": "Element.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element is in the block Element but not its children.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasInnerBlocksContext",
				"namespace": "editor",
				"aliases": [],
				"line": 75,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "HTMLElement"
					}
				],
				"doc": {
					"description": "Returns true if the given HTMLElement contains inner blocks (an InnerBlocks",
					"long_description": "element).",
					"tags": [
						{
							"name": "param",
							"content": "Element to test.",
							"types": [
								"HTMLElement"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "Whether element contains inner blocks.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/media-upload/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "editor\\module",
				"aliases": [],
				"line": 28,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.additionalData",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.allowedTypes",
						"default": null,
						"type": "string"
					},
					{
						"name": "$0.filesList",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.maxUploadFileSize",
						"default": null,
						"type": "number"
					},
					{
						"name": "$0.onError",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.onFileChange",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Upload a media file when the file upload button is activated.",
					"long_description": "Wrapper around mediaUpload() that injects the current post ID.",
					"tags": [
						{
							"name": "param",
							"content": "Parameters object passed to the function.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "$0.additionalData"
						},
						{
							"name": "param",
							"content": "Array with the types of media that can be uploaded, if unset all types are allowed.",
							"types": [
								"string"
							],
							"variable": "$0.allowedTypes"
						},
						{
							"name": "param",
							"content": "List of files.",
							"types": [
								"Array"
							],
							"variable": "$0.filesList"
						},
						{
							"name": "param",
							"content": "Maximum upload size in bytes allowed for the site.",
							"types": [
								"number"
							],
							"variable": "$0.maxUploadFileSize"
						},
						{
							"name": "param",
							"content": "Function called when an error happens.",
							"types": [
								"function"
							],
							"variable": "$0.onError"
						},
						{
							"name": "param",
							"content": "Function called each time a file or a temporary representation of the file is available.",
							"types": [
								"function"
							],
							"variable": "$0.onFileChange"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/media-upload/media-upload.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getMimeTypesArray",
				"namespace": "editor",
				"aliases": [],
				"line": 38,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "wpMimeTypesObject",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Browsers may use unexpected mime types, and they differ from browser to browser.",
					"long_description": "This function computes a flexible array of mime types from the mime type structured provided by the server.\nConverts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\nThe computation of this array instead of directly using the object,\nsolves the problem in chrome where mp3 files have audio/mp3 as mime type instead of audio/mpeg.\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=227004",
					"tags": [
						{
							"name": "param",
							"content": "Mime type object received from the server.\n                                   Extensions are keys separated by '|' and values are mime types associated with an extension.",
							"types": [
								"Object"
							],
							"variable": "wpMimeTypesObject"
						},
						{
							"name": "return",
							"content": "An array of mime types or the parameter passed if it was \"falsy\".",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "mediaUpload",
				"namespace": "editor",
				"aliases": [],
				"line": 64,
				"end_line": 201,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$0",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.allowedTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.additionalData",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$0.filesList",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$0.maxUploadFileSize",
						"default": null,
						"type": "number"
					},
					{
						"name": "$0.onError",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.onFileChange",
						"default": null,
						"type": "function"
					},
					{
						"name": "$0.wpAllowedMimeTypes",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Media Upload is used by audio, image, gallery, video, and file blocks to",
					"long_description": "\thandle uploading a media file when a file upload button is activated.\n\n\tTODO: future enhancement to add an upload indicator.",
					"tags": [
						{
							"name": "param",
							"content": "Parameters object passed to the function.",
							"types": [
								"Object"
							],
							"variable": "$0"
						},
						{
							"name": "param",
							"content": "Array with the types of media that can be uploaded, if unset all types are allowed.",
							"types": [
								"Array"
							],
							"variable": "$0.allowedTypes"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "$0.additionalData"
						},
						{
							"name": "param",
							"content": "List of files.",
							"types": [
								"Array"
							],
							"variable": "$0.filesList"
						},
						{
							"name": "param",
							"content": "Maximum upload size in bytes allowed for the site.",
							"types": [
								"number"
							],
							"variable": "$0.maxUploadFileSize"
						},
						{
							"name": "param",
							"content": "Function called when an error happens.",
							"types": [
								"function"
							],
							"variable": "$0.onError"
						},
						{
							"name": "param",
							"content": "Function called each time a file or a temporary representation of the file is available.",
							"types": [
								"function"
							],
							"variable": "$0.onFileChange"
						},
						{
							"name": "param",
							"content": "List of allowed mime types and file extensions.",
							"types": [
								"Object"
							],
							"variable": "$0.wpAllowedMimeTypes"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createMediaFromFile",
				"namespace": "editor",
				"aliases": [],
				"line": 209,
				"end_line": 219,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					},
					{
						"name": "additionalData",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Media File to Save.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "param",
							"content": "Additional data to include in the request.",
							"types": [
								"Object"
							],
							"variable": "additionalData"
						},
						{
							"name": "return",
							"content": "Media Object Promise.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/terms.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "buildTermsTree",
				"namespace": "editor",
				"aliases": [],
				"line": 13,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "flatTerms",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns terms in a tree form.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of terms in flat format.",
							"types": [
								"Array"
							],
							"variable": "flatTerms"
						},
						{
							"name": "return",
							"content": "Array of terms in tree format.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/url.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getWPAdminURL",
				"namespace": "editor",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "page",
						"default": null,
						"type": "string"
					},
					{
						"name": "query",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns the URL of a WPAdmin Page.",
					"long_description": "\nTODO: This should be moved to a module less specific to the editor.",
					"tags": [
						{
							"name": "param",
							"content": "Page to navigate to.",
							"types": [
								"string"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Query Args.",
							"types": [
								"Object"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "WPAdmin URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "cleanForSlug",
				"namespace": "editor",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "string",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Performs some basic cleanup of a string for use as a post slug",
					"long_description": "\nThis replicates some of what santize_title() does in WordPress core, but\nis only designed to approximate what the slug will be.\n\nConverts whitespace, periods, forward slashes and underscores to hyphens.\nConverts Latin-1 Supplement and Latin Extended-A letters to basic Latin\nletters. Removes combining diacritical marks. Converts remaining string\nto lowercase. It does not touch octets, HTML entities, or other encoded\ncharacters.",
					"tags": [
						{
							"name": "param",
							"content": "Title or slug to be processed",
							"types": [
								"string"
							],
							"variable": "string"
						},
						{
							"name": "return",
							"content": "Processed string",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/with-change-detection/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withChangeDetection",
				"namespace": "editor",
				"aliases": [],
				"line": 17,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.ignoreTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.resetTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator for tracking changes to state over time. The",
					"long_description": "returned reducer will include a `isDirty` property on the object reflecting\nwhether the original reference of the reducer has changed.",
					"tags": [
						{
							"name": "param",
							"content": "Optional options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Action types upon which to skip check.",
							"types": [
								"Array"
							],
							"variable": "options.ignoreTypes"
						},
						{
							"name": "param",
							"content": "Action types upon which to reset dirty.",
							"types": [
								"Array"
							],
							"variable": "options.resetTypes"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/editor/src/utils/with-history/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withHistory",
				"namespace": "editor",
				"aliases": [],
				"line": 37,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.resetTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.ignoreTypes",
						"default": null,
						"type": "Array"
					},
					{
						"name": "options.shouldOverwriteState",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which transforms the result of the original",
					"long_description": "reducer into an object tracking its own history (past, present, future).",
					"tags": [
						{
							"name": "param",
							"content": "Optional options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Action types upon which to\n                                                clear past.",
							"types": [
								"Array"
							],
							"variable": "options.resetTypes"
						},
						{
							"name": "param",
							"content": "Action types upon which to\n                                                avoid history tracking.",
							"types": [
								"Array"
							],
							"variable": "options.ignoreTypes"
						},
						{
							"name": "param",
							"content": "Function receiving last and\n                                                current actions, returning\n                                                boolean indicating whether\n                                                present should be merged,\n                                                rather than add undo level.",
							"types": [
								"function"
							],
							"variable": "options.shouldOverwriteState"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build/raw-html.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "RawHTML",
				"namespace": "element",
				"aliases": [],
				"line": 30,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.children",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Component used as equivalent of Fragment with unescaped HTML, in cases where",
					"long_description": "it is desirable to render dangerous HTML without needing a wrapper element.\nTo preserve additional props, a `div` wrapper _will_ be created if any props\naside from `children` are passed.",
					"tags": [
						{
							"name": "param",
							"content": "HTML to render.",
							"types": [
								"string"
							],
							"variable": "props.children"
						},
						{
							"name": "return",
							"content": "Dangerously-rendering element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build/react.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "concatChildren",
				"namespace": "element",
				"aliases": [],
				"line": 156,
				"end_line": 174,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "childrenArguments",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Concatenate two or more React children objects.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of children arguments (array of arrays/strings/objects) to concatenate.",
							"types": [
								"Object"
							],
							"variable": "childrenArguments"
						},
						{
							"name": "return",
							"content": "The concatenated value.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "switchChildrenNodeName",
				"namespace": "element",
				"aliases": [],
				"line": 185,
				"end_line": 200,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nodeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switches the nodeName of all the elements in the children object.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Children object.",
							"types": [
								"Object"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Node name.",
							"types": [
								"string"
							],
							"variable": "nodeName"
						},
						{
							"name": "return",
							"content": "The updated children object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build/serialize.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasPrefix",
				"namespace": "element",
				"aliases": [],
				"line": 155,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "string",
						"default": null,
						"type": "string"
					},
					{
						"name": "prefixes",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns true if the specified string is prefixed by one of an array of",
					"long_description": "possible prefixes.",
					"tags": [
						{
							"name": "param",
							"content": "String to check.",
							"types": [
								"string"
							],
							"variable": "string"
						},
						{
							"name": "param",
							"content": "Possible prefixes.",
							"types": [
								"Array.<string>"
							],
							"variable": "prefixes"
						},
						{
							"name": "return",
							"content": "Whether string has prefix.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInternalAttribute",
				"namespace": "element",
				"aliases": [],
				"line": 170,
				"end_line": 172,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given prop name should be ignored in attributes",
					"long_description": "serialization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute to check.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "return",
							"content": "Whether attribute should be ignored.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalAttributeValue",
				"namespace": "element",
				"aliases": [],
				"line": 183,
				"end_line": 190,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the normal form of the element's attribute value for HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute name.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "param",
							"content": "Non-normalized attribute value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalAttributeName",
				"namespace": "element",
				"aliases": [],
				"line": 200,
				"end_line": 210,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the normal form of the element's attribute name for HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Non-normalized attribute name.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "return",
							"content": "Normalized attribute name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalStylePropertyName",
				"namespace": "element",
				"aliases": [],
				"line": 224,
				"end_line": 234,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "property",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the normal form of the style property name for HTML.",
					"long_description": "\n- Converts property names to kebab-case, e.g. 'backgroundColor' → 'background-color'\n- Leaves custom attributes alone, e.g. '--myBackgroundColor' → '--myBackgroundColor'\n- Converts vendor-prefixed property names to -kebab-case, e.g. 'MozTransform' → '-moz-transform'",
					"tags": [
						{
							"name": "param",
							"content": "Property name.",
							"types": [
								"string"
							],
							"variable": "property"
						},
						{
							"name": "return",
							"content": "Normalized property name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalStylePropertyValue",
				"namespace": "element",
				"aliases": [],
				"line": 246,
				"end_line": 252,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "property",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the normal form of the style property value for HTML. Appends a",
					"long_description": "default pixel unit if numeric, not a unitless property, and not zero.",
					"tags": [
						{
							"name": "param",
							"content": "Property name.",
							"types": [
								"string"
							],
							"variable": "property"
						},
						{
							"name": "param",
							"content": "Non-normalized property value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized property value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderElement",
				"namespace": "element",
				"aliases": [],
				"line": 264,
				"end_line": 322,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "WPElement"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a React element to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element to serialize.",
							"types": [
								"WPElement"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderNativeComponent",
				"namespace": "element",
				"aliases": [],
				"line": 336,
				"end_line": 364,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a native component type to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Native component type to serialize, or null if\n                               rendering as fragment of children content.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderComponent",
				"namespace": "element",
				"aliases": [],
				"line": 377,
				"end_line": 387,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "Component",
						"default": null,
						"type": "function"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a non-native component type to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component type to serialize.",
							"types": [
								"function"
							],
							"variable": "Component"
						},
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderChildren",
				"namespace": "element",
				"aliases": [],
				"line": 399,
				"end_line": 410,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "Array"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes an array of children to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Children to serialize.",
							"types": [
								"Array"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized children.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderAttributes",
				"namespace": "element",
				"aliases": [],
				"line": 420,
				"end_line": 468,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a props object as a string of HTML attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Attributes string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderStyle",
				"namespace": "element",
				"aliases": [],
				"line": 478,
				"end_line": 505,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "style",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a style object as a string attribute value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Style object.",
							"types": [
								"Object"
							],
							"variable": "style"
						},
						{
							"name": "return",
							"content": "Style attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isEmptyElement",
				"namespace": "element",
				"aliases": [],
				"line": 20,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Checks if the provided WP element is empty.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "WP element to check.",
							"types": [
								"*"
							],
							"variable": "element"
						},
						{
							"name": "return",
							"content": "True when an element is considered empty.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build-module/raw-html.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "element\\module",
				"aliases": [],
				"line": 19,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.children",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Component used as equivalent of Fragment with unescaped HTML, in cases where",
					"long_description": "it is desirable to render dangerous HTML without needing a wrapper element.\nTo preserve additional props, a `div` wrapper _will_ be created if any props\naside from `children` are passed.",
					"tags": [
						{
							"name": "param",
							"content": "HTML to render.",
							"types": [
								"string"
							],
							"variable": "props.children"
						},
						{
							"name": "return",
							"content": "Dangerously-rendering element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build-module/react.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "concatChildren",
				"namespace": "element",
				"aliases": [],
				"line": 93,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "childrenArguments",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Concatenate two or more React children objects.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of children arguments (array of arrays/strings/objects) to concatenate.",
							"types": [
								"Object"
							],
							"variable": "childrenArguments"
						},
						{
							"name": "return",
							"content": "The concatenated value.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "switchChildrenNodeName",
				"namespace": "element",
				"aliases": [],
				"line": 120,
				"end_line": 136,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nodeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switches the nodeName of all the elements in the children object.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Children object.",
							"types": [
								"Object"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Node name.",
							"types": [
								"string"
							],
							"variable": "nodeName"
						},
						{
							"name": "return",
							"content": "The updated children object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build-module/serialize.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasPrefix",
				"namespace": "element",
				"aliases": [],
				"line": 135,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "string",
						"default": null,
						"type": "string"
					},
					{
						"name": "prefixes",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns true if the specified string is prefixed by one of an array of",
					"long_description": "possible prefixes.",
					"tags": [
						{
							"name": "param",
							"content": "String to check.",
							"types": [
								"string"
							],
							"variable": "string"
						},
						{
							"name": "param",
							"content": "Possible prefixes.",
							"types": [
								"Array.<string>"
							],
							"variable": "prefixes"
						},
						{
							"name": "return",
							"content": "Whether string has prefix.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInternalAttribute",
				"namespace": "element",
				"aliases": [],
				"line": 149,
				"end_line": 151,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given prop name should be ignored in attributes",
					"long_description": "serialization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute to check.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "return",
							"content": "Whether attribute should be ignored.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalAttributeValue",
				"namespace": "element",
				"aliases": [],
				"line": 162,
				"end_line": 169,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the normal form of the element's attribute value for HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute name.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "param",
							"content": "Non-normalized attribute value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalAttributeName",
				"namespace": "element",
				"aliases": [],
				"line": 179,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the normal form of the element's attribute name for HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Non-normalized attribute name.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "return",
							"content": "Normalized attribute name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalStylePropertyName",
				"namespace": "element",
				"aliases": [],
				"line": 203,
				"end_line": 213,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "property",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the normal form of the style property name for HTML.",
					"long_description": "\n- Converts property names to kebab-case, e.g. 'backgroundColor' → 'background-color'\n- Leaves custom attributes alone, e.g. '--myBackgroundColor' → '--myBackgroundColor'\n- Converts vendor-prefixed property names to -kebab-case, e.g. 'MozTransform' → '-moz-transform'",
					"tags": [
						{
							"name": "param",
							"content": "Property name.",
							"types": [
								"string"
							],
							"variable": "property"
						},
						{
							"name": "return",
							"content": "Normalized property name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalStylePropertyValue",
				"namespace": "element",
				"aliases": [],
				"line": 225,
				"end_line": 231,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "property",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the normal form of the style property value for HTML. Appends a",
					"long_description": "default pixel unit if numeric, not a unitless property, and not zero.",
					"tags": [
						{
							"name": "param",
							"content": "Property name.",
							"types": [
								"string"
							],
							"variable": "property"
						},
						{
							"name": "param",
							"content": "Non-normalized property value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized property value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderElement",
				"namespace": "element",
				"aliases": [],
				"line": 243,
				"end_line": 302,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "WPElement"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a React element to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element to serialize.",
							"types": [
								"WPElement"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderNativeComponent",
				"namespace": "element",
				"aliases": [],
				"line": 315,
				"end_line": 343,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a native component type to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Native component type to serialize, or null if\n                               rendering as fragment of children content.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderComponent",
				"namespace": "element",
				"aliases": [],
				"line": 355,
				"end_line": 365,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "Component",
						"default": null,
						"type": "function"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a non-native component type to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component type to serialize.",
							"types": [
								"function"
							],
							"variable": "Component"
						},
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderChildren",
				"namespace": "element",
				"aliases": [],
				"line": 376,
				"end_line": 387,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "Array"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes an array of children to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Children to serialize.",
							"types": [
								"Array"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized children.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderAttributes",
				"namespace": "element",
				"aliases": [],
				"line": 397,
				"end_line": 445,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a props object as a string of HTML attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Attributes string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderStyle",
				"namespace": "element",
				"aliases": [],
				"line": 454,
				"end_line": 481,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "style",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a style object as a string attribute value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Style object.",
							"types": [
								"Object"
							],
							"variable": "style"
						},
						{
							"name": "return",
							"content": "Style attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/build-module/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/src/raw-html.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "element\\module",
				"aliases": [],
				"line": 16,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "props.children",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Component used as equivalent of Fragment with unescaped HTML, in cases where",
					"long_description": "it is desirable to render dangerous HTML without needing a wrapper element.\nTo preserve additional props, a `div` wrapper _will_ be created if any props\naside from `children` are passed.",
					"tags": [
						{
							"name": "param",
							"content": "HTML to render.",
							"types": [
								"string"
							],
							"variable": "props.children"
						},
						{
							"name": "return",
							"content": "Dangerously-rendering element.",
							"types": [
								"WPElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/src/react.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "concatChildren",
				"namespace": "element",
				"aliases": [],
				"line": 103,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "childrenArguments",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Concatenate two or more React children objects.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Array of children arguments (array of arrays/strings/objects) to concatenate.",
							"types": [
								"Object"
							],
							"variable": "childrenArguments"
						},
						{
							"name": "return",
							"content": "The concatenated value.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "switchChildrenNodeName",
				"namespace": "element",
				"aliases": [],
				"line": 127,
				"end_line": 135,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "Object"
					},
					{
						"name": "nodeName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Switches the nodeName of all the elements in the children object.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Children object.",
							"types": [
								"Object"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Node name.",
							"types": [
								"string"
							],
							"variable": "nodeName"
						},
						{
							"name": "return",
							"content": "The updated children object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/src/serialize.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "hasPrefix",
				"namespace": "element",
				"aliases": [],
				"line": 251,
				"end_line": 253,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "string",
						"default": null,
						"type": "string"
					},
					{
						"name": "prefixes",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns true if the specified string is prefixed by one of an array of",
					"long_description": "possible prefixes.",
					"tags": [
						{
							"name": "param",
							"content": "String to check.",
							"types": [
								"string"
							],
							"variable": "string"
						},
						{
							"name": "param",
							"content": "Possible prefixes.",
							"types": [
								"Array.<string>"
							],
							"variable": "prefixes"
						},
						{
							"name": "return",
							"content": "Whether string has prefix.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isInternalAttribute",
				"namespace": "element",
				"aliases": [],
				"line": 263,
				"end_line": 265,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given prop name should be ignored in attributes",
					"long_description": "serialization, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute to check.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "return",
							"content": "Whether attribute should be ignored.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalAttributeValue",
				"namespace": "element",
				"aliases": [],
				"line": 275,
				"end_line": 282,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the normal form of the element's attribute value for HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute name.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "param",
							"content": "Non-normalized attribute value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalAttributeName",
				"namespace": "element",
				"aliases": [],
				"line": 291,
				"end_line": 301,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attribute",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the normal form of the element's attribute name for HTML.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Non-normalized attribute name.",
							"types": [
								"string"
							],
							"variable": "attribute"
						},
						{
							"name": "return",
							"content": "Normalized attribute name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalStylePropertyName",
				"namespace": "element",
				"aliases": [],
				"line": 314,
				"end_line": 324,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "property",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the normal form of the style property name for HTML.",
					"long_description": "\n- Converts property names to kebab-case, e.g. 'backgroundColor' → 'background-color'\n- Leaves custom attributes alone, e.g. '--myBackgroundColor' → '--myBackgroundColor'\n- Converts vendor-prefixed property names to -kebab-case, e.g. 'MozTransform' → '-moz-transform'",
					"tags": [
						{
							"name": "param",
							"content": "Property name.",
							"types": [
								"string"
							],
							"variable": "property"
						},
						{
							"name": "return",
							"content": "Normalized property name.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNormalStylePropertyValue",
				"namespace": "element",
				"aliases": [],
				"line": 335,
				"end_line": 342,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "property",
						"default": null,
						"type": "string"
					},
					{
						"name": "value",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns the normal form of the style property value for HTML. Appends a",
					"long_description": "default pixel unit if numeric, not a unitless property, and not zero.",
					"tags": [
						{
							"name": "param",
							"content": "Property name.",
							"types": [
								"string"
							],
							"variable": "property"
						},
						{
							"name": "param",
							"content": "Non-normalized property value.",
							"types": [
								"*"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Normalized property value.",
							"types": [
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderElement",
				"namespace": "element",
				"aliases": [],
				"line": 353,
				"end_line": 412,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "element",
						"default": null,
						"type": "WPElement"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a React element to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element to serialize.",
							"types": [
								"WPElement"
							],
							"variable": "element"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderNativeComponent",
				"namespace": "element",
				"aliases": [],
				"line": 425,
				"end_line": 452,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a native component type to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Native component type to serialize, or null if\n                               rendering as fragment of children content.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderComponent",
				"namespace": "element",
				"aliases": [],
				"line": 464,
				"end_line": 474,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "Component",
						"default": null,
						"type": "function"
					},
					{
						"name": "props",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes a non-native component type to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Component type to serialize.",
							"types": [
								"function"
							],
							"variable": "Component"
						},
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized element",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderChildren",
				"namespace": "element",
				"aliases": [],
				"line": 485,
				"end_line": 497,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "children",
						"default": null,
						"type": "Array"
					},
					{
						"name": "context",
						"default": null,
						"type": "Object"
					},
					{
						"name": "legacyContext",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Serializes an array of children to string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Children to serialize.",
							"types": [
								"Array"
							],
							"variable": "children"
						},
						{
							"name": "param",
							"content": "Context object.",
							"types": [
								"Object"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Legacy context object.",
							"types": [
								"Object"
							],
							"variable": "legacyContext"
						},
						{
							"name": "return",
							"content": "Serialized children.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderAttributes",
				"namespace": "element",
				"aliases": [],
				"line": 506,
				"end_line": 561,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "props",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a props object as a string of HTML attributes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Props object.",
							"types": [
								"Object"
							],
							"variable": "props"
						},
						{
							"name": "return",
							"content": "Attributes string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "renderStyle",
				"namespace": "element",
				"aliases": [],
				"line": 570,
				"end_line": 596,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "style",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Renders a style object as a string attribute value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Style object.",
							"types": [
								"Object"
							],
							"variable": "style"
						},
						{
							"name": "return",
							"content": "Style attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/element/src/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/escape-html/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "escapeAmpersand",
				"namespace": "escape-html",
				"aliases": [],
				"line": 40,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with ampersands escaped. Note that this is an imperfect",
					"long_description": "implementation, where only ampersands which do not appear as a pattern of\nnamed, decimal, or hexadecimal character references are escaped. Invalid\nnamed references (i.e. ambiguous ampersand) are are still permitted.",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeQuotationMark",
				"namespace": "escape-html",
				"aliases": [],
				"line": 52,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with quotation marks replaced.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeLessThan",
				"namespace": "escape-html",
				"aliases": [],
				"line": 64,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with less-than sign replaced.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeAttribute",
				"namespace": "escape-html",
				"aliases": [],
				"line": 81,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an escaped attribute value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeHTML",
				"namespace": "escape-html",
				"aliases": [],
				"line": 98,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an escaped HTML element value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped HTML element value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAttributeName",
				"namespace": "escape-html",
				"aliases": [],
				"line": 110,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given attribute name is valid, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute name to test.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Whether attribute is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/escape-html/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "escapeAmpersand",
				"namespace": "escape-html",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with ampersands escaped. Note that this is an imperfect",
					"long_description": "implementation, where only ampersands which do not appear as a pattern of\nnamed, decimal, or hexadecimal character references are escaped. Invalid\nnamed references (i.e. ambiguous ampersand) are are still permitted.",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeQuotationMark",
				"namespace": "escape-html",
				"aliases": [],
				"line": 39,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with quotation marks replaced.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeLessThan",
				"namespace": "escape-html",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with less-than sign replaced.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeAttribute",
				"namespace": "escape-html",
				"aliases": [],
				"line": 66,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an escaped attribute value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeHTML",
				"namespace": "escape-html",
				"aliases": [],
				"line": 82,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an escaped HTML element value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped HTML element value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAttributeName",
				"namespace": "escape-html",
				"aliases": [],
				"line": 93,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given attribute name is valid, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute name to test.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Whether attribute is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/escape-html/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "escapeAmpersand",
				"namespace": "escape-html",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with ampersands escaped. Note that this is an imperfect",
					"long_description": "implementation, where only ampersands which do not appear as a pattern of\nnamed, decimal, or hexadecimal character references are escaped. Invalid\nnamed references (i.e. ambiguous ampersand) are are still permitted.",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeQuotationMark",
				"namespace": "escape-html",
				"aliases": [],
				"line": 39,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with quotation marks replaced.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeLessThan",
				"namespace": "escape-html",
				"aliases": [],
				"line": 50,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a string with less-than sign replaced.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original string.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeAttribute",
				"namespace": "escape-html",
				"aliases": [],
				"line": 66,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an escaped attribute value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "escapeHTML",
				"namespace": "escape-html",
				"aliases": [],
				"line": 82,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an escaped HTML element value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Element value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Escaped HTML element value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAttributeName",
				"namespace": "escape-html",
				"aliases": [],
				"line": 93,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given attribute name is valid, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Attribute name to test.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Whether attribute is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/bold/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/code/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/image/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/italic/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/link/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/link/inline.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "stopKeyPropagation",
				"namespace": "format-library",
				"aliases": [],
				"line": 53,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "createLinkFormat",
				"namespace": "format-library",
				"aliases": [],
				"line": 67,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "opensInNewWindow",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "text",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Generates the format object that will be applied to the link text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The href of the link.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Whether this link will open in a new window.",
							"types": [
								"boolean"
							],
							"variable": "opensInNewWindow"
						},
						{
							"name": "param",
							"content": "The text that is being hyperlinked.",
							"types": [
								"Object"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The final format object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/link/positioned-at-selection.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getCurrentCaretPositionStyle",
				"namespace": "format-library",
				"aliases": [],
				"line": 35,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a style object for applying as `position: absolute` for an element",
					"long_description": "relative to the bottom-center of the current selection. Includes `top` and\n`left` style properties.",
					"tags": [
						{
							"name": "return",
							"content": "Style object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/link/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isValidHref",
				"namespace": "format-library",
				"aliases": [],
				"line": 27,
				"end_line": 83,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "href",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check for issues with the provided href.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The href.",
							"types": [
								"string"
							],
							"variable": "href"
						},
						{
							"name": "return",
							"content": "Is the href invalid?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/strikethrough/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build/underline/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build-module/link/inline.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createLinkFormat",
				"namespace": "format-library",
				"aliases": [],
				"line": 45,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "opensInNewWindow",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "text",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Generates the format object that will be applied to the link text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The href of the link.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Whether this link will open in a new window.",
							"types": [
								"boolean"
							],
							"variable": "opensInNewWindow"
						},
						{
							"name": "param",
							"content": "The text that is being hyperlinked.",
							"types": [
								"Object"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The final format object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build-module/link/positioned-at-selection.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getCurrentCaretPositionStyle",
				"namespace": "format-library",
				"aliases": [],
				"line": 21,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a style object for applying as `position: absolute` for an element",
					"long_description": "relative to the bottom-center of the current selection. Includes `top` and\n`left` style properties.",
					"tags": [
						{
							"name": "return",
							"content": "Style object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/build-module/link/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isValidHref",
				"namespace": "format-library",
				"aliases": [],
				"line": 18,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "href",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check for issues with the provided href.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The href.",
							"types": [
								"string"
							],
							"variable": "href"
						},
						{
							"name": "return",
							"content": "Is the href invalid?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/src/link/inline.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createLinkFormat",
				"namespace": "format-library",
				"aliases": [],
				"line": 46,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "opensInNewWindow",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "text",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Generates the format object that will be applied to the link text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The href of the link.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Whether this link will open in a new window.",
							"types": [
								"boolean"
							],
							"variable": "opensInNewWindow"
						},
						{
							"name": "param",
							"content": "The text that is being hyperlinked.",
							"types": [
								"Object"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The final format object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/format-library/src/link/utils.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isValidHref",
				"namespace": "format-library",
				"aliases": [],
				"line": 29,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "href",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check for issues with the provided href.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The href.",
							"types": [
								"string"
							],
							"variable": "href"
						},
						{
							"name": "return",
							"content": "Is the href invalid?",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createAddHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createAddHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 23,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will add a hook.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that adds a new hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createCurrentHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createCurrentHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 17,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return the name of the",
					"long_description": "currently running hook, or `null` if no hook of the given type is currently\nrunning.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns the current hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createDidHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createDidHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 20,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return the number of times a",
					"long_description": "hook has been called.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns a hook's call count.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createDoingHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createDoingHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 17,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return whether a hook is",
					"long_description": "currently being executed.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns whether a hook is currently\n                         being executed.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createHasHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHasHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 17,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return whether any handlers are",
					"long_description": "attached to a particular hook.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns whether any handlers are\n                         attached to a particular hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createHooks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHooks",
				"namespace": "hooks",
				"aliases": [],
				"line": 29,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an instance of the hooks object.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Object that contains all hooks.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createRemoveHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRemoveHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 25,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					},
					{
						"name": "removeAll",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will remove a specified hook or all",
					"long_description": "hooks by the given name.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "param",
							"content": "Whether to remove all callbacks for a hookName, without regard to namespace. Used to create `removeAll*` functions.",
							"types": [
								"boolean"
							],
							"variable": "removeAll"
						},
						{
							"name": "return",
							"content": "Function that removes hooks.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/createRunHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRunHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 19,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					},
					{
						"name": "returnFirstArg",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will execute all callbacks",
					"long_description": "registered to a hook of the specified type, optionally returning the final\nvalue of the call chain.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "param",
							"content": "Whether each hook callback is expected to\n                                  return its first argument.",
							"types": [
								"boolean"
							],
							"variable": "returnFirstArg"
						},
						{
							"name": "return",
							"content": "Function that runs hook callbacks.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/validateHookName.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateHookName",
				"namespace": "hooks",
				"aliases": [],
				"line": 17,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hookName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Validate a hookName string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The hook name to validate. Should be a non empty string containing\n                          only numbers, letters, dashes, periods and underscores. Also,\n                          the hook name cannot begin with `__`.",
							"types": [
								"string"
							],
							"variable": "hookName"
						},
						{
							"name": "return",
							"content": "Whether the hook name is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build/validateNamespace.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateNamespace",
				"namespace": "hooks",
				"aliases": [],
				"line": 16,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "namespace",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Validate a namespace string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The namespace to validate - should take the form\n                           `vendor/plugin/function`.",
							"types": [
								"string"
							],
							"variable": "namespace"
						},
						{
							"name": "return",
							"content": "Whether the namespace is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createAddHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createAddHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 12,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will add a hook.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that adds a new hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createCurrentHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createCurrentHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return the name of the",
					"long_description": "currently running hook, or `null` if no hook of the given type is currently\nrunning.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns the current hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createDidHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createDidHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 11,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return the number of times a",
					"long_description": "hook has been called.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns a hook's call count.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createDoingHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createDoingHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return whether a hook is",
					"long_description": "currently being executed.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns whether a hook is currently\n                         being executed.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createHasHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHasHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return whether any handlers are",
					"long_description": "attached to a particular hook.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns whether any handlers are\n                         attached to a particular hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createHooks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHooks",
				"namespace": "hooks",
				"aliases": [],
				"line": 14,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an instance of the hooks object.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Object that contains all hooks.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createRemoveHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRemoveHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 14,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					},
					{
						"name": "removeAll",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will remove a specified hook or all",
					"long_description": "hooks by the given name.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "param",
							"content": "Whether to remove all callbacks for a hookName, without regard to namespace. Used to create `removeAll*` functions.",
							"types": [
								"boolean"
							],
							"variable": "removeAll"
						},
						{
							"name": "return",
							"content": "Function that removes hooks.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/createRunHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRunHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 12,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					},
					{
						"name": "returnFirstArg",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will execute all callbacks",
					"long_description": "registered to a hook of the specified type, optionally returning the final\nvalue of the call chain.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "param",
							"content": "Whether each hook callback is expected to\n                                  return its first argument.",
							"types": [
								"boolean"
							],
							"variable": "returnFirstArg"
						},
						{
							"name": "return",
							"content": "Function that runs hook callbacks.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/validateHookName.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateHookName",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hookName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Validate a hookName string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The hook name to validate. Should be a non empty string containing\n                          only numbers, letters, dashes, periods and underscores. Also,\n                          the hook name cannot begin with `__`.",
							"types": [
								"string"
							],
							"variable": "hookName"
						},
						{
							"name": "return",
							"content": "Whether the hook name is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/build-module/validateNamespace.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateNamespace",
				"namespace": "hooks",
				"aliases": [],
				"line": 9,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "namespace",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Validate a namespace string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The namespace to validate - should take the form\n                           `vendor/plugin/function`.",
							"types": [
								"string"
							],
							"variable": "namespace"
						},
						{
							"name": "return",
							"content": "Whether the namespace is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createAddHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createAddHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 12,
				"end_line": 85,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will add a hook.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that adds a new hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createCurrentHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createCurrentHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return the name of the",
					"long_description": "currently running hook, or `null` if no hook of the given type is currently\nrunning.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns the current hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createDidHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createDidHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 11,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return the number of times a",
					"long_description": "hook has been called.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns a hook's call count.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createDoingHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createDoingHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return whether a hook is",
					"long_description": "currently being executed.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns whether a hook is currently\n                         being executed.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createHasHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHasHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will return whether any handlers are",
					"long_description": "attached to a particular hook.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "return",
							"content": "Function that returns whether any handlers are\n                         attached to a particular hook.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createHooks.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createHooks",
				"namespace": "hooks",
				"aliases": [],
				"line": 14,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an instance of the hooks object.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Object that contains all hooks.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createRemoveHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRemoveHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 14,
				"end_line": 74,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					},
					{
						"name": "removeAll",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will remove a specified hook or all",
					"long_description": "hooks by the given name.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "param",
							"content": "Whether to remove all callbacks for a hookName, without regard to namespace. Used to create `removeAll*` functions.",
							"types": [
								"boolean"
							],
							"variable": "removeAll"
						},
						{
							"name": "return",
							"content": "Function that removes hooks.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/createRunHook.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRunHook",
				"namespace": "hooks",
				"aliases": [],
				"line": 12,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hooks",
						"default": null,
						"type": "Object"
					},
					{
						"name": "returnFirstArg",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Returns a function which, when invoked, will execute all callbacks",
					"long_description": "registered to a hook of the specified type, optionally returning the final\nvalue of the call chain.",
					"tags": [
						{
							"name": "param",
							"content": "Stored hooks, keyed by hook name.",
							"types": [
								"Object"
							],
							"variable": "hooks"
						},
						{
							"name": "param",
							"content": "Whether each hook callback is expected to\n                                  return its first argument.",
							"types": [
								"boolean"
							],
							"variable": "returnFirstArg"
						},
						{
							"name": "return",
							"content": "Function that runs hook callbacks.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/validateHookName.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateHookName",
				"namespace": "hooks",
				"aliases": [],
				"line": 10,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "hookName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Validate a hookName string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The hook name to validate. Should be a non empty string containing\n                          only numbers, letters, dashes, periods and underscores. Also,\n                          the hook name cannot begin with `__`.",
							"types": [
								"string"
							],
							"variable": "hookName"
						},
						{
							"name": "return",
							"content": "Whether the hook name is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/hooks/src/validateNamespace.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "validateNamespace",
				"namespace": "hooks",
				"aliases": [],
				"line": 9,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "namespace",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Validate a namespace string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The namespace to validate - should take the form\n                           `vendor/plugin/function`.",
							"types": [
								"string"
							],
							"variable": "namespace"
						},
						{
							"name": "return",
							"content": "Whether the namespace is valid.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/i18n/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setLocaleData",
				"namespace": "i18n",
				"aliases": [],
				"line": 65,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Merges locale data into the Tannin instance by domain. Accepts data in a",
					"long_description": "Jed-formatted JSON object shape.",
					"tags": [
						{
							"name": "param",
							"content": "Locale data configuration.",
							"types": [
								"Object"
							],
							"variable": "data"
						},
						{
							"name": "param",
							"content": "Domain for which configuration applies.",
							"types": [
								"string"
							],
							"variable": "domain"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dcnpgettext",
				"namespace": "i18n",
				"aliases": [],
				"line": 88,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domain",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not",
					"long_description": "otherwise previously assigned.",
					"tags": [
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Text to translate if non-plural. Used as fallback\n                         return value on a caught error.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                         singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "return",
							"content": "The translated string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__",
				"namespace": "i18n",
				"aliases": [],
				"line": 113,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve the translation of text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Text to translate.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "Translated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_x",
				"namespace": "i18n",
				"aliases": [],
				"line": 129,
				"end_line": 131,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve translated string with gettext context.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Text to translate.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "Translated context string without pipe.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_n",
				"namespace": "i18n",
				"aliases": [],
				"line": 148,
				"end_line": 150,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Translates and retrieves the singular or plural form based on the supplied",
					"long_description": "number.",
					"tags": [
						{
							"name": "param",
							"content": "The text to be used if the number is singular.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                        singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "The translated singular or plural form.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_nx",
				"namespace": "i18n",
				"aliases": [],
				"line": 168,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Translates and retrieves the singular or plural form based on the supplied",
					"long_description": "number, with gettext context.",
					"tags": [
						{
							"name": "param",
							"content": "The text to be used if the number is singular.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                         singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "The translated singular or plural form.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "sprintf",
				"namespace": "i18n",
				"aliases": [],
				"line": 184,
				"end_line": 195,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "format",
						"default": null,
						"type": "string"
					},
					{
						"name": "...args",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns a formatted string. If an error occurs in applying the format, the",
					"long_description": "original format string is returned.",
					"tags": [
						{
							"name": "param",
							"content": "The format of the string to generate.",
							"types": [
								"string"
							],
							"variable": "format"
						},
						{
							"name": "param",
							"content": "Arguments to apply to the format.",
							"types": [
								"Array.<string>"
							],
							"variable": "...args"
						},
						{
							"name": "return",
							"content": "The formatted string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/i18n/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setLocaleData",
				"namespace": "i18n",
				"aliases": [],
				"line": 48,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Merges locale data into the Tannin instance by domain. Accepts data in a",
					"long_description": "Jed-formatted JSON object shape.",
					"tags": [
						{
							"name": "param",
							"content": "Locale data configuration.",
							"types": [
								"Object"
							],
							"variable": "data"
						},
						{
							"name": "param",
							"content": "Domain for which configuration applies.",
							"types": [
								"string"
							],
							"variable": "domain"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dcnpgettext",
				"namespace": "i18n",
				"aliases": [],
				"line": 70,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domain",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not",
					"long_description": "otherwise previously assigned.",
					"tags": [
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Text to translate if non-plural. Used as fallback\n                         return value on a caught error.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                         singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "return",
							"content": "The translated string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__",
				"namespace": "i18n",
				"aliases": [],
				"line": 95,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve the translation of text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Text to translate.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "Translated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_x",
				"namespace": "i18n",
				"aliases": [],
				"line": 110,
				"end_line": 112,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve translated string with gettext context.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Text to translate.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "Translated context string without pipe.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_n",
				"namespace": "i18n",
				"aliases": [],
				"line": 128,
				"end_line": 130,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Translates and retrieves the singular or plural form based on the supplied",
					"long_description": "number.",
					"tags": [
						{
							"name": "param",
							"content": "The text to be used if the number is singular.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                        singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "The translated singular or plural form.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_nx",
				"namespace": "i18n",
				"aliases": [],
				"line": 147,
				"end_line": 149,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Translates and retrieves the singular or plural form based on the supplied",
					"long_description": "number, with gettext context.",
					"tags": [
						{
							"name": "param",
							"content": "The text to be used if the number is singular.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                         singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "The translated singular or plural form.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "sprintf",
				"namespace": "i18n",
				"aliases": [],
				"line": 162,
				"end_line": 173,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "format",
						"default": null,
						"type": "string"
					},
					{
						"name": "...args",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns a formatted string. If an error occurs in applying the format, the",
					"long_description": "original format string is returned.",
					"tags": [
						{
							"name": "param",
							"content": "The format of the string to generate.",
							"types": [
								"string"
							],
							"variable": "format"
						},
						{
							"name": "param",
							"content": "Arguments to apply to the format.",
							"types": [
								"Array.<string>"
							],
							"variable": "...args"
						},
						{
							"name": "return",
							"content": "The formatted string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/i18n/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setLocaleData",
				"namespace": "i18n",
				"aliases": [],
				"line": 45,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "data",
						"default": null,
						"type": "Object"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Merges locale data into the Tannin instance by domain. Accepts data in a",
					"long_description": "Jed-formatted JSON object shape.",
					"tags": [
						{
							"name": "param",
							"content": "Locale data configuration.",
							"types": [
								"Object"
							],
							"variable": "data"
						},
						{
							"name": "param",
							"content": "Domain for which configuration applies.",
							"types": [
								"string"
							],
							"variable": "domain"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dcnpgettext",
				"namespace": "i18n",
				"aliases": [],
				"line": 74,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "domain",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Wrapper for Tannin's `dcnpgettext`. Populates default locale data if not",
					"long_description": "otherwise previously assigned.",
					"tags": [
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Text to translate if non-plural. Used as fallback\n                         return value on a caught error.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                         singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "return",
							"content": "The translated string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "__",
				"namespace": "i18n",
				"aliases": [],
				"line": 92,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve the translation of text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Text to translate.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "Translated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_x",
				"namespace": "i18n",
				"aliases": [],
				"line": 107,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Retrieve translated string with gettext context.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Text to translate.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "Translated context string without pipe.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_n",
				"namespace": "i18n",
				"aliases": [],
				"line": 125,
				"end_line": 127,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Translates and retrieves the singular or plural form based on the supplied",
					"long_description": "number.",
					"tags": [
						{
							"name": "param",
							"content": "The text to be used if the number is singular.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                        singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "The translated singular or plural form.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "_nx",
				"namespace": "i18n",
				"aliases": [],
				"line": 144,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "single",
						"default": null,
						"type": "string"
					},
					{
						"name": "plural",
						"default": null,
						"type": "string"
					},
					{
						"name": "number",
						"default": null,
						"type": "number"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					},
					{
						"name": "domain",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Translates and retrieves the singular or plural form based on the supplied",
					"long_description": "number, with gettext context.",
					"tags": [
						{
							"name": "param",
							"content": "The text to be used if the number is singular.",
							"types": [
								"string"
							],
							"variable": "single"
						},
						{
							"name": "param",
							"content": "The text to be used if the number is plural.",
							"types": [
								"string"
							],
							"variable": "plural"
						},
						{
							"name": "param",
							"content": "The number to compare against to use either the\n                         singular or plural form.",
							"types": [
								"number"
							],
							"variable": "number"
						},
						{
							"name": "param",
							"content": "Context information for the translators.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "param",
							"content": "Domain to retrieve the translated text.",
							"types": [
								"string"
							],
							"variable": "domain"
						},
						{
							"name": "return",
							"content": "The translated singular or plural form.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "sprintf",
				"namespace": "i18n",
				"aliases": [],
				"line": 159,
				"end_line": 167,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "format",
						"default": null,
						"type": "string"
					},
					{
						"name": "...args",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns a formatted string. If an error occurs in applying the format, the",
					"long_description": "original format string is returned.",
					"tags": [
						{
							"name": "param",
							"content": "The format of the string to generate.",
							"types": [
								"string"
							],
							"variable": "format"
						},
						{
							"name": "param",
							"content": "Arguments to apply to the format.",
							"types": [
								"Array.<string>"
							],
							"variable": "...args"
						},
						{
							"name": "return",
							"content": "The formatted string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/i18n/tools/pot-to-php.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "escapeSingleQuotes",
				"namespace": "i18n",
				"aliases": [],
				"line": 27,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "input",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Escapes single quotes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The string to be escaped.",
							"types": [
								"string"
							],
							"variable": "input"
						},
						{
							"name": "return",
							"content": "The escaped string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "convertTranslationToPHP",
				"namespace": "i18n",
				"aliases": [],
				"line": 39,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "translation",
						"default": null,
						"type": "Object"
					},
					{
						"name": "textdomain",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Converts a translation parsed from the POT file to lines of WP PHP.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The translation to convert.",
							"types": [
								"Object"
							],
							"variable": "translation"
						},
						{
							"name": "param",
							"content": "The text domain to use in the WordPress translation function call.",
							"types": [
								"string"
							],
							"variable": "textdomain"
						},
						{
							"name": "param",
							"content": "The context for the translation.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Lines of PHP that match the translation.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/is-shallow-equal/arrays.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isShallowEqualArrays",
				"namespace": "is-shallow-equal",
				"aliases": [],
				"line": 11,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Array"
					},
					{
						"name": "b",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if the two arrays are shallow equal, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First array to compare.",
							"types": [
								"Array"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second array to compare.",
							"types": [
								"Array"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two arrays are shallow equal.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/is-shallow-equal/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isShallowEqual",
				"namespace": "is-shallow-equal",
				"aliases": [],
				"line": 20,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Array"
					},
					{
						"name": "b",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns true if the two arrays or objects are shallow equal, or false",
					"long_description": "otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "First object or array to compare.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object or array to compare.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two values are shallow equal.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/is-shallow-equal/objects.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isShallowEqualObjects",
				"namespace": "is-shallow-equal",
				"aliases": [],
				"line": 13,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Object"
					},
					{
						"name": "b",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns true if the two objects are shallow equal, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "First object to compare.",
							"types": [
								"Object"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "Second object to compare.",
							"types": [
								"Object"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two objects are shallow equal.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-console/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setConsoleMethodSpy",
				"namespace": "jest-console",
				"aliases": [],
				"line": 25,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "matcherName",
						"default": null,
						"type": "string"
					},
					{
						"name": "methodName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets spy on the console object's method to make it possible to fail test when method called without assertion.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Name of Jest matcher.",
							"types": [
								"string"
							],
							"variable": "matcherName"
						},
						{
							"name": "param",
							"content": "Name of console method.",
							"types": [
								"string"
							],
							"variable": "methodName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetSpy",
				"namespace": "jest-console\\setConsoleMethodSpy",
				"aliases": [],
				"line": 31,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Resets the spy to its initial state.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "assertExpectedCalls",
				"namespace": "jest-console\\setConsoleMethodSpy",
				"aliases": [],
				"line": 40,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies that the spy has only been called if expected.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-console/build/matchers.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createToBeCalledMatcher",
				"namespace": "jest-console",
				"aliases": [],
				"line": 22,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-console/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setConsoleMethodSpy",
				"namespace": "jest-console",
				"aliases": [],
				"line": 18,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "matcherName",
						"default": null,
						"type": "string"
					},
					{
						"name": "methodName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets spy on the console object's method to make it possible to fail test when method called without assertion.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Name of Jest matcher.",
							"types": [
								"string"
							],
							"variable": "matcherName"
						},
						{
							"name": "param",
							"content": "Name of console method.",
							"types": [
								"string"
							],
							"variable": "methodName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetSpy",
				"namespace": "jest-console\\setConsoleMethodSpy",
				"aliases": [],
				"line": 24,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Resets the spy to its initial state.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "assertExpectedCalls",
				"namespace": "jest-console\\setConsoleMethodSpy",
				"aliases": [],
				"line": 33,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies that the spy has only been called if expected.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-console/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setConsoleMethodSpy",
				"namespace": "jest-console",
				"aliases": [],
				"line": 18,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "matcherName",
						"default": null,
						"type": "string"
					},
					{
						"name": "methodName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Sets spy on the console object's method to make it possible to fail test when method called without assertion.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Name of Jest matcher.",
							"types": [
								"string"
							],
							"variable": "matcherName"
						},
						{
							"name": "param",
							"content": "Name of console method.",
							"types": [
								"string"
							],
							"variable": "methodName"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "resetSpy",
				"namespace": "jest-console\\setConsoleMethodSpy",
				"aliases": [],
				"line": 24,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Resets the spy to its initial state.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			},
			{
				"name": "assertExpectedCalls",
				"namespace": "jest-console\\setConsoleMethodSpy",
				"aliases": [],
				"line": 32,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Verifies that the spy has only been called if expected.",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-puppeteer-axe/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "formatViolations",
				"namespace": "jest-puppeteer-axe",
				"aliases": [],
				"line": 20,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "violations",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Formats the list of violations object returned by Axe analysis.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The object with the errors found by Axe.",
							"types": [
								"Object"
							],
							"variable": "violations"
						},
						{
							"name": "return",
							"content": "The user friendly message to display when the matcher fails.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toPassAxeTests",
				"namespace": "jest-puppeteer-axe",
				"aliases": [],
				"line": 73,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "page",
						"default": null,
						"type": "Page"
					},
					{
						"name": "params",
						"default": null,
						"type": "Object"
					},
					{
						"name": "params.include",
						"default": null,
						"type": "string"
					},
					{
						"name": "params.exclude",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Defines async matcher to check whether a given Puppeteer's page instance passes Axe accessibility tests.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Puppeteer's page instance.",
							"types": [
								"Page"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Optional Axe API options.",
							"types": [
								"Object"
							],
							"variable": "params"
						},
						{
							"name": "param",
							"content": "CSS selector to add to the list of elements\n                                  to include in analysis.",
							"types": [
								"string"
							],
							"variable": "params.include"
						},
						{
							"name": "param",
							"content": "CSS selector to add to the list of elements\n                                  to exclude from analysis.",
							"types": [
								"string"
							],
							"variable": "params.exclude"
						},
						{
							"name": "return",
							"content": "A matcher object with two keys `pass` and `message`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-puppeteer-axe/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "formatViolations",
				"namespace": "jest-puppeteer-axe",
				"aliases": [],
				"line": 15,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "violations",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Formats the list of violations object returned by Axe analysis.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The object with the errors found by Axe.",
							"types": [
								"Object"
							],
							"variable": "violations"
						},
						{
							"name": "return",
							"content": "The user friendly message to display when the matcher fails.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toPassAxeTests",
				"namespace": "jest-puppeteer-axe",
				"aliases": [],
				"line": 68,
				"end_line": 70,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "page",
						"default": null,
						"type": "Page"
					},
					{
						"name": "params",
						"default": null,
						"type": "Object"
					},
					{
						"name": "params.include",
						"default": null,
						"type": "string"
					},
					{
						"name": "params.exclude",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Defines async matcher to check whether a given Puppeteer's page instance passes Axe accessibility tests.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Puppeteer's page instance.",
							"types": [
								"Page"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Optional Axe API options.",
							"types": [
								"Object"
							],
							"variable": "params"
						},
						{
							"name": "param",
							"content": "CSS selector to add to the list of elements\n                                  to include in analysis.",
							"types": [
								"string"
							],
							"variable": "params.include"
						},
						{
							"name": "param",
							"content": "CSS selector to add to the list of elements\n                                  to exclude from analysis.",
							"types": [
								"string"
							],
							"variable": "params.exclude"
						},
						{
							"name": "return",
							"content": "A matcher object with two keys `pass` and `message`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/jest-puppeteer-axe/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "formatViolations",
				"namespace": "jest-puppeteer-axe",
				"aliases": [],
				"line": 13,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "violations",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Formats the list of violations object returned by Axe analysis.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The object with the errors found by Axe.",
							"types": [
								"Object"
							],
							"variable": "violations"
						},
						{
							"name": "return",
							"content": "The user friendly message to display when the matcher fails.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "toPassAxeTests",
				"namespace": "jest-puppeteer-axe",
				"aliases": [],
				"line": 64,
				"end_line": 99,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "page",
						"default": null,
						"type": "Page"
					},
					{
						"name": "params",
						"default": null,
						"type": "Object"
					},
					{
						"name": "params.include",
						"default": null,
						"type": "string"
					},
					{
						"name": "params.exclude",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Defines async matcher to check whether a given Puppeteer's page instance passes Axe accessibility tests.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Puppeteer's page instance.",
							"types": [
								"Page"
							],
							"variable": "page"
						},
						{
							"name": "param",
							"content": "Optional Axe API options.",
							"types": [
								"Object"
							],
							"variable": "params"
						},
						{
							"name": "param",
							"content": "CSS selector to add to the list of elements\n                                  to include in analysis.",
							"types": [
								"string"
							],
							"variable": "params.include"
						},
						{
							"name": "param",
							"content": "CSS selector to add to the list of elements\n                                  to exclude from analysis.",
							"types": [
								"string"
							],
							"variable": "params.exclude"
						},
						{
							"name": "return",
							"content": "A matcher object with two keys `pass` and `message`.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/build/platform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAppleOS",
				"namespace": "keycodes",
				"aliases": [],
				"line": 21,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "_window",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if platform is MacOS.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "window object by default; used for DI testing.",
							"types": [
								"Object"
							],
							"variable": "_window"
						},
						{
							"name": "return",
							"content": "True if MacOS; false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/build/platform.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAppleOS",
				"namespace": "keycodes",
				"aliases": [],
				"line": 20,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Return true if platform is iOS.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "True if iOS; false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/build-module/platform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAppleOS",
				"namespace": "keycodes",
				"aliases": [],
				"line": 13,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "_window",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if platform is MacOS.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "window object by default; used for DI testing.",
							"types": [
								"Object"
							],
							"variable": "_window"
						},
						{
							"name": "return",
							"content": "True if MacOS; false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/build-module/platform.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAppleOS",
				"namespace": "keycodes",
				"aliases": [],
				"line": 12,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Return true if platform is iOS.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "True if iOS; false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/src/platform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAppleOS",
				"namespace": "keycodes",
				"aliases": [],
				"line": 13,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "_window",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Return true if platform is MacOS.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "window object by default; used for DI testing.",
							"types": [
								"Object"
							],
							"variable": "_window"
						},
						{
							"name": "return",
							"content": "True if MacOS; false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/keycodes/src/platform.native.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAppleOS",
				"namespace": "keycodes",
				"aliases": [],
				"line": 12,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Return true if platform is iOS.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "True if iOS; false otherwise.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/library-export-default-webpack-plugin/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/library-export-default-webpack-plugin/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/library-export-default-webpack-plugin/test/fixtures/webpack.config.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/library-export-default-webpack-plugin/test/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build/components/import-dropdown/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ImportDropdown",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 31,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build/components/import-form/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build/utils/export.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exportReusableBlock",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 35,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Export a reusable block as a JSON file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"number"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build/utils/file.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "download",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 16,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fileName",
						"default": null,
						"type": "string"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "contentType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Downloads a file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File Name.",
							"types": [
								"string"
							],
							"variable": "fileName"
						},
						{
							"name": "param",
							"content": "File Content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "File mime type.",
							"types": [
								"string"
							],
							"variable": "contentType"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "readTextFile",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 42,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Reads the textual content of the given file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "Content of the file.",
							"types": [
								"Promise.<string>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build/utils/import.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "importReusableBlock",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Import a reusable block from a JSON file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "Promise returning the imported reusable block.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build-module/utils/export.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exportReusableBlock",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 23,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Export a reusable block as a JSON file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"number"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build-module/utils/file.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "download",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 8,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fileName",
						"default": null,
						"type": "string"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "contentType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Downloads a file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File Name.",
							"types": [
								"string"
							],
							"variable": "fileName"
						},
						{
							"name": "param",
							"content": "File Content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "File mime type.",
							"types": [
								"string"
							],
							"variable": "contentType"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "readTextFile",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 33,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Reads the textual content of the given file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "Content of the file.",
							"types": [
								"Promise.<string>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/build-module/utils/import.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "importReusableBlock",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 24,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Import a reusable block from a JSON file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "Promise returning the imported reusable block.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/src/utils/export.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exportReusableBlock",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 21,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Export a reusable block as a JSON file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"number"
							],
							"variable": "id"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/src/utils/file.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "download",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 8,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fileName",
						"default": null,
						"type": "string"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "contentType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Downloads a file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File Name.",
							"types": [
								"string"
							],
							"variable": "fileName"
						},
						{
							"name": "param",
							"content": "File Content.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "File mime type.",
							"types": [
								"string"
							],
							"variable": "contentType"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "readTextFile",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 33,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Reads the textual content of the given file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "Content of the file.",
							"types": [
								"Promise.<string>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/list-reusable-blocks/src/utils/import.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "importReusableBlock",
				"namespace": "list-reusable-blocks",
				"aliases": [],
				"line": 22,
				"end_line": 51,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "file",
						"default": null,
						"type": "File"
					}
				],
				"doc": {
					"description": "Import a reusable block from a JSON file.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "File.",
							"types": [
								"File"
							],
							"variable": "file"
						},
						{
							"name": "return",
							"content": "Promise returning the imported reusable block.",
							"types": [
								"Promise"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 44,
				"end_line": 106,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "status",
						"default": null,
						"type": "string"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.context",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.id",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.isDismissible",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "options.speak",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "options.actions",
						"default": null,
						"type": "Array.<WPNoticeAction>"
					}
				],
				"doc": {
					"description": "Yields action objects used in signalling that a notice is to be created.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice status.\n                                                      Defaults to `info`.",
							"types": [
								"string"
							],
							"variable": "status"
						},
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Context under which to\n                                                      group notice.",
							"types": [
								"string"
							],
							"variable": "options.context"
						},
						{
							"name": "param",
							"content": "Identifier for notice.\n                                                      Automatically assigned\n                                                      if not specified.",
							"types": [
								"string"
							],
							"variable": "options.id"
						},
						{
							"name": "param",
							"content": "Whether the notice can\n                                                      be dismissed by user.\n                                                      Defaults to `true`.",
							"types": [
								"boolean"
							],
							"variable": "options.isDismissible"
						},
						{
							"name": "param",
							"content": "Whether the notice\n                                                      content should be\n                                                      announced to screen\n                                                      readers. Defaults to\n                                                      `true`.",
							"types": [
								"boolean"
							],
							"variable": "options.speak"
						},
						{
							"name": "param",
							"content": "User actions to be\n                                                      presented with notice.",
							"types": [
								"Array.<WPNoticeAction>"
							],
							"variable": "options.actions"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createSuccessNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 120,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a success notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createInfoNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 136,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an info notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createErrorNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 152,
				"end_line": 154,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an error notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createWarningNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 168,
				"end_line": 170,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a warning notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 182,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a notice is to be removed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice unique identifier.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "Optional context (grouping) in which the notice is\n                         intended to appear. Defaults to default context.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/constants.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/controls.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getNotices",
				"namespace": "notices",
				"aliases": [],
				"line": 66,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns all notices as an array, optionally for a given context. Defaults to",
					"long_description": "the global context.",
					"tags": [
						{
							"name": "param",
							"content": "Notices state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional grouping context.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Array of notices.",
							"types": [
								"Array.<WPNotice>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build/store/utils/on-sub-key.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "onSubKey",
				"namespace": "notices",
				"aliases": [],
				"line": 22,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "actionProperty",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order reducer creator which creates a combined reducer object, keyed",
					"long_description": "by a property on the action object.",
					"tags": [
						{
							"name": "param",
							"content": "Action property by which to key object.",
							"types": [
								"string"
							],
							"variable": "actionProperty"
						},
						{
							"name": "return",
							"content": "Higher-order reducer.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 38,
				"end_line": 100,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "status",
						"default": null,
						"type": "string"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.context",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.id",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.isDismissible",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "options.speak",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "options.actions",
						"default": null,
						"type": "Array.<WPNoticeAction>"
					}
				],
				"doc": {
					"description": "Yields action objects used in signalling that a notice is to be created.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice status.\n                                                      Defaults to `info`.",
							"types": [
								"string"
							],
							"variable": "status"
						},
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Context under which to\n                                                      group notice.",
							"types": [
								"string"
							],
							"variable": "options.context"
						},
						{
							"name": "param",
							"content": "Identifier for notice.\n                                                      Automatically assigned\n                                                      if not specified.",
							"types": [
								"string"
							],
							"variable": "options.id"
						},
						{
							"name": "param",
							"content": "Whether the notice can\n                                                      be dismissed by user.\n                                                      Defaults to `true`.",
							"types": [
								"boolean"
							],
							"variable": "options.isDismissible"
						},
						{
							"name": "param",
							"content": "Whether the notice\n                                                      content should be\n                                                      announced to screen\n                                                      readers. Defaults to\n                                                      `true`.",
							"types": [
								"boolean"
							],
							"variable": "options.speak"
						},
						{
							"name": "param",
							"content": "User actions to be\n                                                      presented with notice.",
							"types": [
								"Array.<WPNoticeAction>"
							],
							"variable": "options.actions"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createSuccessNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 113,
				"end_line": 115,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a success notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createInfoNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 128,
				"end_line": 130,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an info notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createErrorNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 143,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an error notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createWarningNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 158,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a warning notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 171,
				"end_line": 178,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a notice is to be removed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice unique identifier.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "Optional context (grouping) in which the notice is\n                         intended to appear. Defaults to default context.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build-module/store/constants.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getNotices",
				"namespace": "notices",
				"aliases": [],
				"line": 58,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns all notices as an array, optionally for a given context. Defaults to",
					"long_description": "the global context.",
					"tags": [
						{
							"name": "param",
							"content": "Notices state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional grouping context.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Array of notices.",
							"types": [
								"Array.<WPNotice>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/build-module/store/utils/on-sub-key.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 34,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "status",
						"default": null,
						"type": "string"
					},
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					},
					{
						"name": "options.context",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.id",
						"default": null,
						"type": "string"
					},
					{
						"name": "options.isDismissible",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "options.speak",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "options.actions",
						"default": null,
						"type": "Array.<WPNoticeAction>"
					}
				],
				"doc": {
					"description": "Yields action objects used in signalling that a notice is to be created.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice status.\n                                                      Defaults to `info`.",
							"types": [
								"string"
							],
							"variable": "status"
						},
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "param",
							"content": "Context under which to\n                                                      group notice.",
							"types": [
								"string"
							],
							"variable": "options.context"
						},
						{
							"name": "param",
							"content": "Identifier for notice.\n                                                      Automatically assigned\n                                                      if not specified.",
							"types": [
								"string"
							],
							"variable": "options.id"
						},
						{
							"name": "param",
							"content": "Whether the notice can\n                                                      be dismissed by user.\n                                                      Defaults to `true`.",
							"types": [
								"boolean"
							],
							"variable": "options.isDismissible"
						},
						{
							"name": "param",
							"content": "Whether the notice\n                                                      content should be\n                                                      announced to screen\n                                                      readers. Defaults to\n                                                      `true`.",
							"types": [
								"boolean"
							],
							"variable": "options.speak"
						},
						{
							"name": "param",
							"content": "User actions to be\n                                                      presented with notice.",
							"types": [
								"Array.<WPNoticeAction>"
							],
							"variable": "options.actions"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createSuccessNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 78,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a success notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createInfoNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 93,
				"end_line": 95,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an info notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createErrorNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 108,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that an error notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createWarningNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 123,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "content",
						"default": null,
						"type": "string"
					},
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a warning notice is to be",
					"long_description": "created. Refer to `createNotice` for options documentation.",
					"tags": [
						{
							"name": "param",
							"content": "Notice message.",
							"types": [
								"string"
							],
							"variable": "content"
						},
						{
							"name": "param",
							"content": "Optional notice options.",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeNotice",
				"namespace": "notices",
				"aliases": [],
				"line": 136,
				"end_line": 142,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that a notice is to be removed.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Notice unique identifier.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "param",
							"content": "Optional context (grouping) in which the notice is\n                         intended to appear. Defaults to default context.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/src/store/constants.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getNotices",
				"namespace": "notices",
				"aliases": [],
				"line": 58,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "context",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns all notices as an array, optionally for a given context. Defaults to",
					"long_description": "the global context.",
					"tags": [
						{
							"name": "param",
							"content": "Notices state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Optional grouping context.",
							"types": [
								"string"
							],
							"variable": "context"
						},
						{
							"name": "return",
							"content": "Array of notices.",
							"types": [
								"Array.<WPNotice>"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/notices/src/store/utils/on-sub-key.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build/components/dot-tip/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getAnchorRect",
				"namespace": "nux",
				"aliases": [],
				"line": 22,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "WordPress dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "triggerGuide",
				"namespace": "nux",
				"aliases": [],
				"line": 19,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tipIds",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns an action object that, when dispatched, presents a guide that takes",
					"long_description": "the user through a series of tips step by step.",
					"tags": [
						{
							"name": "param",
							"content": "Which tips to show in the guide.",
							"types": [
								"Array.<string>"
							],
							"variable": "tipIds"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dismissTip",
				"namespace": "nux",
				"aliases": [],
				"line": 35,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object that, when dispatched, dismisses the given tip. A",
					"long_description": "dismissed tip will not show again.",
					"tags": [
						{
							"name": "param",
							"content": "The tip to dismiss.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "disableTips",
				"namespace": "nux",
				"aliases": [],
				"line": 49,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object that, when dispatched, prevents all tips from",
					"long_description": "showing again.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enableTips",
				"namespace": "nux",
				"aliases": [],
				"line": 61,
				"end_line": 65,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object that, when dispatched, makes all tips show again.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "guides",
				"namespace": "nux",
				"aliases": [],
				"line": 34,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks which tips are in a guide. Each guide is represented by",
					"long_description": "an array which contains the tip identifiers contained within that guide.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "areTipsEnabled",
				"namespace": "nux",
				"aliases": [],
				"line": 55,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks whether or not tips are globally enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dismissedTips",
				"namespace": "nux",
				"aliases": [],
				"line": 80,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks which tips have been dismissed. If the state object",
					"long_description": "contains a tip identifier, then that tip is dismissed.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "areTipsEnabled",
				"namespace": "nux",
				"aliases": [],
				"line": 123,
				"end_line": 125,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether or not tips are globally enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether tips are globally enabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "triggerGuide",
				"namespace": "nux",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tipIds",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns an action object that, when dispatched, presents a guide that takes",
					"long_description": "the user through a series of tips step by step.",
					"tags": [
						{
							"name": "param",
							"content": "Which tips to show in the guide.",
							"types": [
								"Array.<string>"
							],
							"variable": "tipIds"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dismissTip",
				"namespace": "nux",
				"aliases": [],
				"line": 24,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object that, when dispatched, dismisses the given tip. A",
					"long_description": "dismissed tip will not show again.",
					"tags": [
						{
							"name": "param",
							"content": "The tip to dismiss.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "disableTips",
				"namespace": "nux",
				"aliases": [],
				"line": 37,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object that, when dispatched, prevents all tips from",
					"long_description": "showing again.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enableTips",
				"namespace": "nux",
				"aliases": [],
				"line": 48,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object that, when dispatched, makes all tips show again.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "guides",
				"namespace": "nux",
				"aliases": [],
				"line": 19,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks which tips are in a guide. Each guide is represented by",
					"long_description": "an array which contains the tip identifiers contained within that guide.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "areTipsEnabled",
				"namespace": "nux",
				"aliases": [],
				"line": 39,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks whether or not tips are globally enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dismissedTips",
				"namespace": "nux",
				"aliases": [],
				"line": 63,
				"end_line": 76,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks which tips have been dismissed. If the state object",
					"long_description": "contains a tip identifier, then that tip is dismissed.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isTipVisible",
				"namespace": "nux",
				"aliases": [],
				"line": 82,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "tipId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether or not the given tip is showing. Tips are hidden if they",
					"long_description": "are disabled, have been dismissed, or are not the current tip in any\nguide that they have been added to.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The tip to query.",
							"types": [
								"string"
							],
							"variable": "tipId"
						},
						{
							"name": "return",
							"content": "Whether or not the given tip is showing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "areTipsEnabled",
				"namespace": "nux",
				"aliases": [],
				"line": 107,
				"end_line": 109,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether or not tips are globally enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether tips are globally enabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "triggerGuide",
				"namespace": "nux",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tipIds",
						"default": null,
						"type": "Array.<string>"
					}
				],
				"doc": {
					"description": "Returns an action object that, when dispatched, presents a guide that takes",
					"long_description": "the user through a series of tips step by step.",
					"tags": [
						{
							"name": "param",
							"content": "Which tips to show in the guide.",
							"types": [
								"Array.<string>"
							],
							"variable": "tipIds"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dismissTip",
				"namespace": "nux",
				"aliases": [],
				"line": 24,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "id",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object that, when dispatched, dismisses the given tip. A",
					"long_description": "dismissed tip will not show again.",
					"tags": [
						{
							"name": "param",
							"content": "The tip to dismiss.",
							"types": [
								"string"
							],
							"variable": "id"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "disableTips",
				"namespace": "nux",
				"aliases": [],
				"line": 37,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object that, when dispatched, prevents all tips from",
					"long_description": "showing again.",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "enableTips",
				"namespace": "nux",
				"aliases": [],
				"line": 48,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns an action object that, when dispatched, makes all tips show again.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "guides",
				"namespace": "nux",
				"aliases": [],
				"line": 15,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Array"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks which tips are in a guide. Each guide is represented by",
					"long_description": "an array which contains the tip identifiers contained within that guide.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Array"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "areTipsEnabled",
				"namespace": "nux",
				"aliases": [],
				"line": 35,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "boolean"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks whether or not tips are globally enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"boolean"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "dismissedTips",
				"namespace": "nux",
				"aliases": [],
				"line": 56,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer that tracks which tips have been dismissed. If the state object",
					"long_description": "contains a tip identifier, then that tip is dismissed.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/nux/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isTipVisible",
				"namespace": "nux",
				"aliases": [],
				"line": 53,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "tipId",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether or not the given tip is showing. Tips are hidden if they",
					"long_description": "are disabled, have been dismissed, or are not the current tip in any\nguide that they have been added to.",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The tip to query.",
							"types": [
								"string"
							],
							"variable": "tipId"
						},
						{
							"name": "return",
							"content": "Whether or not the given tip is showing.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "areTipsEnabled",
				"namespace": "nux",
				"aliases": [],
				"line": 77,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns whether or not tips are globally enabled.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Global application state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "return",
							"content": "Whether tips are globally enabled.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/build/api/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 48,
				"end_line": 81,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "settings.render",
						"default": null,
						"type": "function"
					},
					{
						"name": "settings.icon",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Registers a plugin to the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The name of the plugin.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "The settings for this plugin.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The function that renders the plugin.",
							"types": [
								"function"
							],
							"variable": "settings.render"
						},
						{
							"name": "param",
							"content": "An icon to be shown in the UI.",
							"types": [
								"string",
								"WPElement",
								"function"
							],
							"variable": "settings.icon"
						},
						{
							"name": "return",
							"content": "The final plugin settings object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unregisterPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 92,
				"end_line": 102,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a plugin by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous plugin settings object, if it has been\n                    successfully unregistered; otherwise `undefined`.",
							"types": [
								"WPPlugin"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 112,
				"end_line": 114,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered plugin settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Plugin setting.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPlugins",
				"namespace": "plugins",
				"aliases": [],
				"line": 122,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered plugins.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Plugin settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/build/components/plugin-area/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/build/components/plugin-context/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withPluginContext",
				"namespace": "plugins",
				"aliases": [],
				"line": 38,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "mapContextToProps",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "A Higher Order Component used to inject Plugin context to the",
					"long_description": "wrapped component.",
					"tags": [
						{
							"name": "param",
							"content": "Function called on every context change,\n                                    expected to return object of props to\n                                    merge with the component's own props.",
							"types": [
								"function"
							],
							"variable": "mapContextToProps"
						},
						{
							"name": "return",
							"content": "Enhanced component with injected context as props.",
							"types": [
								"Component"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/build-module/api/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 33,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "settings.render",
						"default": null,
						"type": "function"
					},
					{
						"name": "settings.icon",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Registers a plugin to the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The name of the plugin.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "The settings for this plugin.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The function that renders the plugin.",
							"types": [
								"function"
							],
							"variable": "settings.render"
						},
						{
							"name": "param",
							"content": "An icon to be shown in the UI.",
							"types": [
								"string",
								"WPElement",
								"function"
							],
							"variable": "settings.icon"
						},
						{
							"name": "return",
							"content": "The final plugin settings object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unregisterPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 76,
				"end_line": 86,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a plugin by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous plugin settings object, if it has been\n                    successfully unregistered; otherwise `undefined`.",
							"types": [
								"WPPlugin"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 95,
				"end_line": 97,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered plugin settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Plugin setting.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPlugins",
				"namespace": "plugins",
				"aliases": [],
				"line": 104,
				"end_line": 106,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered plugins.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Plugin settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/build-module/components/plugin-area/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/build-module/components/plugin-context/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/src/api/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 30,
				"end_line": 73,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "settings.render",
						"default": null,
						"type": "function"
					},
					{
						"name": "settings.icon",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Registers a plugin to the editor.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The name of the plugin.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "The settings for this plugin.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The function that renders the plugin.",
							"types": [
								"function"
							],
							"variable": "settings.render"
						},
						{
							"name": "param",
							"content": "An icon to be shown in the UI.",
							"types": [
								"string",
								"WPElement",
								"function"
							],
							"variable": "settings.icon"
						},
						{
							"name": "return",
							"content": "The final plugin settings object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "unregisterPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 83,
				"end_line": 96,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a plugin by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous plugin settings object, if it has been\n                    successfully unregistered; otherwise `undefined`.",
							"types": [
								"WPPlugin"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPlugin",
				"namespace": "plugins",
				"aliases": [],
				"line": 105,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered plugin settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Plugin name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Plugin setting.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPlugins",
				"namespace": "plugins",
				"aliases": [],
				"line": 114,
				"end_line": 116,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered plugins.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Plugin settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/plugins/src/components/plugin-context/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/postcss-themes/test/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createMiddleware",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 30,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a Redux middleware, given an object of controls where each key is an",
					"long_description": "action type for which to act upon, the value a function which returns either\na promise which is to resolve when evaluation of the action should continue,\nor a value. The value or resolved promise value is assigned on the return\nvalue of the yield assignment. If the control handler returns undefined, the\nexecution is not continued.",
					"tags": [
						{
							"name": "param",
							"content": "Object of control handlers.",
							"types": [
								"Object"
							],
							"variable": "controls"
						},
						{
							"name": "return",
							"content": "Co-routine runtime",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build/is-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAction",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 22,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if the given object quacks like an action.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to test",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Whether object is an action.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isActionOfType",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 36,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					},
					{
						"name": "expectedType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given object quacks like an action and has a specific",
					"long_description": "action type",
					"tags": [
						{
							"name": "param",
							"content": "Object to test",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "param",
							"content": "The expected type for the action.",
							"types": [
								"string"
							],
							"variable": "expectedType"
						},
						{
							"name": "return",
							"content": "Whether object is an action and is of specific type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build/is-generator.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isGenerator",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if the given object is a generator, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to test.",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Whether object is a generator.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build/runtime.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createRuntime",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 34,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Object"
					},
					{
						"name": "dispatch",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Create a co-routine runtime.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object of control handlers.",
							"types": [
								"Object"
							],
							"variable": "controls"
						},
						{
							"name": "param",
							"content": "Unhandled action dispatch.",
							"types": [
								"function"
							],
							"variable": "dispatch"
						},
						{
							"name": "return",
							"content": "co-routine runtime",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "redux-routine\\module",
				"aliases": [],
				"line": 19,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a Redux middleware, given an object of controls where each key is an",
					"long_description": "action type for which to act upon, the value a function which returns either\na promise which is to resolve when evaluation of the action should continue,\nor a value. The value or resolved promise value is assigned on the return\nvalue of the yield assignment. If the control handler returns undefined, the\nexecution is not continued.",
					"tags": [
						{
							"name": "param",
							"content": "Object of control handlers.",
							"types": [
								"Object"
							],
							"variable": "controls"
						},
						{
							"name": "return",
							"content": "Co-routine runtime",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build-module/is-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAction",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if the given object quacks like an action.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to test",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Whether object is an action.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isActionOfType",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 26,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					},
					{
						"name": "expectedType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given object quacks like an action and has a specific",
					"long_description": "action type",
					"tags": [
						{
							"name": "param",
							"content": "Object to test",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "param",
							"content": "The expected type for the action.",
							"types": [
								"string"
							],
							"variable": "expectedType"
						},
						{
							"name": "return",
							"content": "Whether object is an action and is of specific type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build-module/is-generator.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "redux-routine\\module",
				"aliases": [],
				"line": 10,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if the given object is a generator, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to test.",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Whether object is a generator.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/build-module/runtime.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "redux-routine\\module",
				"aliases": [],
				"line": 21,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Object"
					},
					{
						"name": "dispatch",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Create a co-routine runtime.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object of control handlers.",
							"types": [
								"Object"
							],
							"variable": "controls"
						},
						{
							"name": "param",
							"content": "Unhandled action dispatch.",
							"types": [
								"function"
							],
							"variable": "dispatch"
						},
						{
							"name": "return",
							"content": "co-routine runtime",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "redux-routine\\module",
				"aliases": [],
				"line": 19,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Creates a Redux middleware, given an object of controls where each key is an",
					"long_description": "action type for which to act upon, the value a function which returns either\na promise which is to resolve when evaluation of the action should continue,\nor a value. The value or resolved promise value is assigned on the return\nvalue of the yield assignment. If the control handler returns undefined, the\nexecution is not continued.",
					"tags": [
						{
							"name": "param",
							"content": "Object of control handlers.",
							"types": [
								"Object"
							],
							"variable": "controls"
						},
						{
							"name": "return",
							"content": "Co-routine runtime",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/src/is-action.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isAction",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if the given object quacks like an action.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to test",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Whether object is an action.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isActionOfType",
				"namespace": "redux-routine",
				"aliases": [],
				"line": 26,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					},
					{
						"name": "expectedType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given object quacks like an action and has a specific",
					"long_description": "action type",
					"tags": [
						{
							"name": "param",
							"content": "Object to test",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "param",
							"content": "The expected type for the action.",
							"types": [
								"string"
							],
							"variable": "expectedType"
						},
						{
							"name": "return",
							"content": "Whether object is an action and is of specific type.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/src/is-generator.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "redux-routine\\module",
				"aliases": [],
				"line": 10,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "object",
						"default": null,
						"type": "*"
					}
				],
				"doc": {
					"description": "Returns true if the given object is a generator, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object to test.",
							"types": [
								"*"
							],
							"variable": "object"
						},
						{
							"name": "return",
							"content": "Whether object is a generator.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/redux-routine/src/runtime.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "redux-routine\\module",
				"aliases": [],
				"line": 21,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "controls",
						"default": null,
						"type": "Object"
					},
					{
						"name": "dispatch",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Create a co-routine runtime.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Object of control handlers.",
							"types": [
								"Object"
							],
							"variable": "controls"
						},
						{
							"name": "param",
							"content": "Unhandled action dispatch.",
							"types": [
								"function"
							],
							"variable": "dispatch"
						},
						{
							"name": "return",
							"content": "co-routine runtime",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/apply-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 32,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Apply a format object to a Rich Text value from the given `startIndex` to the",
					"long_description": "given `endIndex`. Indices are retrieved from the selection if none are\nprovided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to apply.",
							"types": [
								"Object"
							],
							"variable": "format"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the format applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/change-list-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "changeListType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 32,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newFormat",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Changes the list type of the selected indented list, if any. Looks at the",
					"long_description": "currently selected list item and takes the parent list, then changes the list\ntype of this list. When multiple lines are selected, the parent lists are\ntakes and changed.",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "The new list format object. Choose between\n                          `{ type: 'ol' }` and `{ type: 'ul' }`.",
							"types": [
								"Object"
							],
							"variable": "newFormat"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/char-at.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "charAt",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "index",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the character at the specified index, or returns `undefined` if no",
					"long_description": "character was found.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the character from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Index to use.",
							"types": [
								"string"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "A one character long string, or undefined.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/concat.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "concat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 22,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "",
						"default": null,
						"type": "mixed"
					}
				],
				"doc": {
					"description": "Combine all Rich Text values into one. This is similar to",
					"long_description": "`String.prototype.concat`.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"mixed"
							],
							"variable": ""
						},
						{
							"name": "return",
							"content": "A new value combining all given records.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/create-element.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 20,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "document",
						"default": null,
						"type": "HTMLDocument"
					},
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Parse the given HTML into a body element.",
					"long_description": "\nNote: The current implementation will return a shared reference, reset on\neach call to `createElement`. Therefore, you should not hold a reference to\nthe value to operate upon asynchronously, as it may have unexpected results.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML document to use to parse.",
							"types": [
								"HTMLDocument"
							],
							"variable": "document"
						},
						{
							"name": "param",
							"content": "The HTML to parse.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "Body element with parsed HTML.",
							"types": [
								"HTMLBodyElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/create.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "create",
				"namespace": "rich-text",
				"aliases": [],
				"line": 140,
				"end_line": 189,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.text",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.html",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Create a RichText value from an `Element` tree (DOM), an HTML string or a",
					"long_description": "plain text string, with optionally a `Range` object to set the selection. If\ncalled without any input, an empty value will be created. If\n`multilineTag` is provided, any content of direct children whose type matches\n`multilineTag` will be separated by two newlines. The optional functions can\nbe used to filter out content.",
					"tags": [
						{
							"name": "param",
							"content": "Optional named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Text to create value from.",
							"types": [
								"string"
							],
							"variable": "$1.text"
						},
						{
							"name": "param",
							"content": "HTML to create value from.",
							"types": [
								"string"
							],
							"variable": "$1.html"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "accumulateSelection",
				"namespace": "rich-text",
				"aliases": [],
				"line": 201,
				"end_line": 237,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "accumulator",
						"default": null,
						"type": "Object"
					},
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Helper to accumulate the value's selection start and end from the current",
					"long_description": "node and range.",
					"tags": [
						{
							"name": "param",
							"content": "Object to accumulate into.",
							"types": [
								"Object"
							],
							"variable": "accumulator"
						},
						{
							"name": "param",
							"content": "Node to create value with.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Range to create value with.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "Value that is being accumulated.",
							"types": [
								"Object"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "filterRange",
				"namespace": "rich-text",
				"aliases": [],
				"line": 249,
				"end_line": 273,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "filter",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Adjusts the start and end offsets from a range based on a text filter.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node of which the text should be filtered.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The range to filter.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "Function to use to filter the text.",
							"types": [
								"function"
							],
							"variable": "filter"
						},
						{
							"name": "return",
							"content": "Object containing range properties.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createFromElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 297,
				"end_line": 467,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Creates a Rich Text value from a DOM element and range.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createFromMultilineElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 494,
				"end_line": 560,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.currentWrapperTags",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Creates a rich text value from a DOM element and range that should be",
					"long_description": "multiline.",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "param",
							"content": "Whether to prepend a line\n                                           separator.",
							"types": [
								"boolean"
							],
							"variable": "$1.currentWrapperTags"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAttributes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 574,
				"end_line": 599,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Gets the attributes of an element in object shape.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to get attributes from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute based on\n                                      the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "Attribute object or `undefined` if the element has no\n                  attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-active-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getActiveFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 25,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format object by type at the start of the selection. This can be",
					"long_description": "used to get e.g. the URL of a link format at the current selection, but also\nto check if a format is active at the selection. Returns undefined if there\nis no format at the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Value to inspect.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format type to look for.",
							"types": [
								"string"
							],
							"variable": "formatType"
						},
						{
							"name": "return",
							"content": "Active format object of the specified type, or undefined.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 23,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered format type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-format-types.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 19,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered formats.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Format settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-last-child-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLastChildIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 22,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the line index of the last child in the list.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of a list item in the list.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The index of the last child.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-line-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 25,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Gets the currently selected line index, or the first line index if the",
					"long_description": "selection spans over multiple items.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the line index from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Optional index that should be contained by the\n                            line. Defaults to the selection start of the\n                            value.",
							"types": [
								"boolean"
							],
							"variable": "startIndex"
						},
						{
							"name": "return",
							"content": "The line index. Undefined if not found.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-parent-line-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getParentLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 24,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the index of the first parent list. To get the parent list formats, we",
					"long_description": "go through every list item until we find one with exactly one format type\nless.",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of a child list item.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The parent list line index.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-selection-end.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectionEnd",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Gets the end index of the current selection, or returns `undefined` if no",
					"long_description": "selection exists. The selection ends right before the character at this\nindex.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the selection from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Index where the selection ends.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-selection-start.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectionStart",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Gets the start index of the current selection, or returns `undefined` if no",
					"long_description": "selection exists. The selection starts right before the character at this\nindex.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the selection from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Index where the selection starts.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/get-text-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTextContent",
				"namespace": "rich-text",
				"aliases": [],
				"line": 16,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Get the textual content of a Rich Text value. This is similar to",
					"long_description": "`Element.textContent`.",
					"tags": [
						{
							"name": "param",
							"content": "Value to use.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The text content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/indent-list-items.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTargetLevelLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 26,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the line index of the first previous list item with higher indentation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of the list item to compare with.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The line index.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "indentListItems",
				"namespace": "rich-text",
				"aliases": [],
				"line": 57,
				"end_line": 104,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootFormat",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Indents any selected list items if possible.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "rootFormat"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/insert-line-separator.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertLineSeparator",
				"namespace": "rich-text",
				"aliases": [],
				"line": 29,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a line break character into a Rich Text value at the given",
					"long_description": "`startIndex`. Any content between `startIndex` and `endIndex` will be\nremoved. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the value inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/insert-object.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertObject",
				"namespace": "rich-text",
				"aliases": [],
				"line": 31,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatToInsert",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a format as an object into a Rich Text value at the given",
					"long_description": "`startIndex`. Any content between `startIndex` and `endIndex` will be\nremoved. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to insert as object.",
							"types": [
								"Object"
							],
							"variable": "formatToInsert"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the object inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/insert.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insert",
				"namespace": "rich-text",
				"aliases": [],
				"line": 29,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "valueToInsert",
						"default": null,
						"type": "string"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a Rich Text value, an HTML string, or a plain text string, into a",
					"long_description": "Rich Text value at the given `startIndex`. Any content between `startIndex`\nand `endIndex` will be removed. Indices are retrieved from the selection if\nnone are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Value to insert.",
							"types": [
								"string"
							],
							"variable": "valueToInsert"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the value inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/is-collapsed.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isCollapsed",
				"namespace": "rich-text",
				"aliases": [],
				"line": 19,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if the selection of a Rich Text value is collapsed or not. Collapsed",
					"long_description": "means that no characters are selected, but there is a caret present. If there\nis no selection, `undefined` will be returned. This is similar to\n`window.getSelection().isCollapsed()`.",
					"tags": [
						{
							"name": "param",
							"content": "The rich text value to check.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the selection is collapsed, false if not,\n                   undefined if there is no selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/is-empty.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isEmpty",
				"namespace": "rich-text",
				"aliases": [],
				"line": 19,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if a Rich Text value is Empty, meaning it contains no text or any",
					"long_description": "objects (such as images).",
					"tags": [
						{
							"name": "param",
							"content": "Value to use.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the value is empty, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEmptyLine",
				"namespace": "rich-text",
				"aliases": [],
				"line": 33,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if the current collapsed selection is on an empty line in case of a",
					"long_description": "multiline value.",
					"tags": [
						{
							"name": "param",
							"content": "Value te check.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the line is empty, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/is-format-equal.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFormatEqual",
				"namespace": "rich-text",
				"aliases": [],
				"line": 16,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "format1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format2",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Optimised equality check for format objects.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format to compare.",
							"types": [
								"Object"
							],
							"variable": "format1"
						},
						{
							"name": "param",
							"content": "Format to compare.",
							"types": [
								"Object"
							],
							"variable": "format2"
						},
						{
							"name": "return",
							"content": "True if formats are equal, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/join.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "join",
				"namespace": "rich-text",
				"aliases": [],
				"line": 26,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "Array"
					},
					{
						"name": "separator",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Combine an array of Rich Text values into one, optionally separated by",
					"long_description": "`separator`, which can be a Rich Text value, HTML string, or plain text\nstring. This is similar to `Array.prototype.join`.",
					"tags": [
						{
							"name": "param",
							"content": "An array of values to join.",
							"types": [
								"Array"
							],
							"variable": "values"
						},
						{
							"name": "param",
							"content": "Separator string or value.",
							"types": [
								"string",
								"Object"
							],
							"variable": "separator"
						},
						{
							"name": "return",
							"content": "A new combined value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/normalise-formats.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "normaliseFormats",
				"namespace": "rich-text",
				"aliases": [],
				"line": 27,
				"end_line": 53,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Normalises formats: ensures subsequent equal formats have the same reference.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to normalise formats of.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "New value with normalised formats.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/outdent-list-items.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "outdentListItems",
				"namespace": "rich-text",
				"aliases": [],
				"line": 29,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Outdents any selected list items if possible.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/register-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 59,
				"end_line": 199,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a new format provided a unique name and an object defining its",
					"long_description": "behavior.",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Format settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The format, if it has been successfully registered;\n                    otherwise `undefined`.",
							"types": [
								"WPFormat"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/remove-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "removeFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 32,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatType",
						"default": null,
						"type": "string"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Remove any format object from a Rich Text value by type from the given",
					"long_description": "`startIndex` to the given `endIndex`. Indices are retrieved from the\nselection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format type to remove.",
							"types": [
								"string"
							],
							"variable": "formatType"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the format applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/remove.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "remove",
				"namespace": "rich-text",
				"aliases": [],
				"line": 26,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Remove content from a Rich Text value between the given `startIndex` and",
					"long_description": "`endIndex`. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the content removed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/replace.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replace",
				"namespace": "rich-text",
				"aliases": [],
				"line": 34,
				"end_line": 77,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "pattern",
						"default": null,
						"type": "RegExp"
					},
					{
						"name": "replacement",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Search a Rich Text value and replace the match(es) with `replacement`. This",
					"long_description": "is similar to `String.prototype.replace`.",
					"tags": [
						{
							"name": "param",
							"content": "The value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "A RegExp object or literal. Can also be\n                                     a string. It is treated as a verbatim\n                                     string and is not interpreted as a\n                                     regular expression. Only the first\n                                     occurrence will be replaced.",
							"types": [
								"RegExp",
								"string"
							],
							"variable": "pattern"
						},
						{
							"name": "param",
							"content": "The match or matches are replaced with\n                                     the specified or the value returned by\n                                     the specified function.",
							"types": [
								"function",
								"string"
							],
							"variable": "replacement"
						},
						{
							"name": "return",
							"content": "A new value with replacements applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/slice.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "slice",
				"namespace": "rich-text",
				"aliases": [],
				"line": 19,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Slice a Rich Text value from `startIndex` to `endIndex`. Indices are",
					"long_description": "retrieved from the selection if none are provided. This is similar to\n`String.prototype.slice`.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new extracted value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/split.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "split",
				"namespace": "rich-text",
				"aliases": [],
				"line": 25,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "string",
						"default": null,
						"type": "number"
					},
					{
						"name": "end",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Split a Rich Text value in two at the given `startIndex` and `endIndex`, or",
					"long_description": "split at the given separator. This is similar to `String.prototype.split`.\nIndices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index, or string at which to split.",
							"types": [
								"number",
								"string"
							],
							"variable": "string"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "end"
						},
						{
							"name": "return",
							"content": "An array of new values.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 23,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formatTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that format types have been",
					"long_description": "added.",
					"tags": [
						{
							"name": "param",
							"content": "Format types received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "formatTypes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 38,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "names",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a registered format type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string",
								"Array"
							],
							"variable": "names"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "formatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 33,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the format types",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatTypeForBareElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 58,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "bareElementTagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format type, if any, that can handle a bare element (without a",
					"long_description": "data-format-type attribute), given the tag name of this element.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The tag name of the element to find a\n                                   format type for.",
							"types": [
								"string"
							],
							"variable": "bareElementTagName"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFormatTypeForClassName",
				"namespace": "rich-text",
				"aliases": [],
				"line": 74,
				"end_line": 84,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "elementClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format type, if any, that can handle an element, given its classes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The classes of the element to find a format\n                                 type for.",
							"types": [
								"string"
							],
							"variable": "elementClassName"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/to-dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createPathToNode",
				"namespace": "rich-text",
				"aliases": [],
				"line": 42,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "rootNode",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Creates a path as an array of indices from the given root node to the given",
					"long_description": "node.",
					"tags": [
						{
							"name": "param",
							"content": "Node to find the path of.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Root node to find the path from.",
							"types": [
								"HTMLElement"
							],
							"variable": "rootNode"
						},
						{
							"name": "param",
							"content": "Initial path to build on.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "The path from the root node to the node.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNodeByPath",
				"namespace": "rich-text",
				"aliases": [],
				"line": 68,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Gets a node given a path (array of indices) from the given node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Root node to find the wanted node in.",
							"types": [
								"HTMLElement"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Path (indices) to the wanted node.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "Object with the found node and the remaining offset (if any).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createEmpty",
				"namespace": "rich-text",
				"aliases": [],
				"line": 92,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a new instance of a DOM tree upon which RichText operations can be",
					"long_description": "applied.\n\nNote: The current implementation will return a shared reference, reset on\neach call to `createEmpty`. Therefore, you should not hold a reference to\nthe value to operate upon asynchronously, as it may have unexpected results.",
					"tags": [
						{
							"name": "return",
							"content": "RichText tree.",
							"types": [
								"WPRichTextTree"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "apply",
				"namespace": "rich-text",
				"aliases": [],
				"line": 241,
				"end_line": 265,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "current",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "multilineTag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Create an `Element` tree from a Rich Text value and applies the difference to",
					"long_description": "the `Element` tree contained by `current`. If a `multilineTag` is provided,\ntext separated by two new lines will be wrapped in an `Element` of that type.",
					"tags": [
						{
							"name": "param",
							"content": "Value to apply.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "The live root node to apply the element\n                                  tree to.",
							"types": [
								"HTMLElement"
							],
							"variable": "current"
						},
						{
							"name": "param",
							"content": "Multiline tag.",
							"types": [
								"string"
							],
							"variable": "multilineTag"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isRangeEqual",
				"namespace": "rich-text",
				"aliases": [],
				"line": 301,
				"end_line": 303,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Range"
					},
					{
						"name": "b",
						"default": null,
						"type": "Range"
					}
				],
				"doc": {
					"description": "Returns true if two ranges are equal, or false otherwise. Ranges are",
					"long_description": "considered equal if their start and end occur in the same container and\noffset.",
					"tags": [
						{
							"name": "param",
							"content": "First range object to test.",
							"types": [
								"Range"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "First range object to test.",
							"types": [
								"Range"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two ranges are equal.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/to-html-string.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toHTMLString",
				"namespace": "rich-text",
				"aliases": [],
				"line": 32,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Create an HTML string from a Rich Text value. If a `multilineTag` is",
					"long_description": "provided, text separated by a line separator will be wrapped in it.",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Rich text value.",
							"types": [
								"Object"
							],
							"variable": "$1.value"
						},
						{
							"name": "param",
							"content": "Multiline tag.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                        nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "return",
							"content": "HTML string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/to-tree.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "fromFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Internal dependencies",
					"long_description": "",
					"tags": []
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/toggle-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toggleFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 26,
				"end_line": 32,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Toggles a format object to a Rich Text value at the current selection.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to apply or remove.",
							"types": [
								"Object"
							],
							"variable": "format"
						},
						{
							"name": "return",
							"content": "A new value with the format applied or removed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build/unregister-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unregisterFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 24,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a format.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous format value, if it has been successfully\n                    unregistered; otherwise `undefined`.",
							"types": [
								"WPFormat"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/apply-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 23,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Apply a format object to a Rich Text value from the given `startIndex` to the",
					"long_description": "given `endIndex`. Indices are retrieved from the selection if none are\nprovided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to apply.",
							"types": [
								"Object"
							],
							"variable": "format"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the format applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/change-list-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "changeListType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newFormat",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Changes the list type of the selected indented list, if any. Looks at the",
					"long_description": "currently selected list item and takes the parent list, then changes the list\ntype of this list. When multiple lines are selected, the parent lists are\ntakes and changed.",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "The new list format object. Choose between\n                          `{ type: 'ol' }` and `{ type: 'ul' }`.",
							"types": [
								"Object"
							],
							"variable": "newFormat"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/char-at.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "charAt",
				"namespace": "rich-text",
				"aliases": [],
				"line": 10,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "index",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the character at the specified index, or returns `undefined` if no",
					"long_description": "character was found.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the character from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Index to use.",
							"types": [
								"string"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "A one character long string, or undefined.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/concat.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "concat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 14,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "",
						"default": null,
						"type": "mixed"
					}
				],
				"doc": {
					"description": "Combine all Rich Text values into one. This is similar to",
					"long_description": "`String.prototype.concat`.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"mixed"
							],
							"variable": ""
						},
						{
							"name": "return",
							"content": "A new value combining all given records.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/create-element.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 13,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "document",
						"default": null,
						"type": "HTMLDocument"
					},
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Parse the given HTML into a body element.",
					"long_description": "\nNote: The current implementation will return a shared reference, reset on\neach call to `createElement`. Therefore, you should not hold a reference to\nthe value to operate upon asynchronously, as it may have unexpected results.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML document to use to parse.",
							"types": [
								"HTMLDocument"
							],
							"variable": "document"
						},
						{
							"name": "param",
							"content": "The HTML to parse.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "Body element with parsed HTML.",
							"types": [
								"HTMLBodyElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/create.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "create",
				"namespace": "rich-text",
				"aliases": [],
				"line": 125,
				"end_line": 174,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.text",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.html",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Create a RichText value from an `Element` tree (DOM), an HTML string or a",
					"long_description": "plain text string, with optionally a `Range` object to set the selection. If\ncalled without any input, an empty value will be created. If\n`multilineTag` is provided, any content of direct children whose type matches\n`multilineTag` will be separated by two newlines. The optional functions can\nbe used to filter out content.",
					"tags": [
						{
							"name": "param",
							"content": "Optional named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Text to create value from.",
							"types": [
								"string"
							],
							"variable": "$1.text"
						},
						{
							"name": "param",
							"content": "HTML to create value from.",
							"types": [
								"string"
							],
							"variable": "$1.html"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "accumulateSelection",
				"namespace": "rich-text",
				"aliases": [],
				"line": 185,
				"end_line": 221,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "accumulator",
						"default": null,
						"type": "Object"
					},
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Helper to accumulate the value's selection start and end from the current",
					"long_description": "node and range.",
					"tags": [
						{
							"name": "param",
							"content": "Object to accumulate into.",
							"types": [
								"Object"
							],
							"variable": "accumulator"
						},
						{
							"name": "param",
							"content": "Node to create value with.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Range to create value with.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "Value that is being accumulated.",
							"types": [
								"Object"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "filterRange",
				"namespace": "rich-text",
				"aliases": [],
				"line": 233,
				"end_line": 257,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "filter",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Adjusts the start and end offsets from a range based on a text filter.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node of which the text should be filtered.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The range to filter.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "Function to use to filter the text.",
							"types": [
								"function"
							],
							"variable": "filter"
						},
						{
							"name": "return",
							"content": "Object containing range properties.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createFromElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 281,
				"end_line": 451,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Creates a Rich Text value from a DOM element and range.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createFromMultilineElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 478,
				"end_line": 544,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.currentWrapperTags",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Creates a rich text value from a DOM element and range that should be",
					"long_description": "multiline.",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "param",
							"content": "Whether to prepend a line\n                                           separator.",
							"types": [
								"boolean"
							],
							"variable": "$1.currentWrapperTags"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAttributes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 558,
				"end_line": 583,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Gets the attributes of an element in object shape.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to get attributes from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute based on\n                                      the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "Attribute object or `undefined` if the element has no\n                  attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-active-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getActiveFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format object by type at the start of the selection. This can be",
					"long_description": "used to get e.g. the URL of a link format at the current selection, but also\nto check if a format is active at the selection. Returns undefined if there\nis no format at the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Value to inspect.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format type to look for.",
							"types": [
								"string"
							],
							"variable": "formatType"
						},
						{
							"name": "return",
							"content": "Active format object of the specified type, or undefined.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered format type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-format-types.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered formats.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Format settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-last-child-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLastChildIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 14,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the line index of the last child in the list.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of a list item in the list.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The index of the last child.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-line-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 28,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Gets the currently selected line index, or the first line index if the",
					"long_description": "selection spans over multiple items.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the line index from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Optional index that should be contained by the\n                            line. Defaults to the selection start of the\n                            value.",
							"types": [
								"boolean"
							],
							"variable": "startIndex"
						},
						{
							"name": "return",
							"content": "The line index. Undefined if not found.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-parent-line-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getParentLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 16,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the index of the first parent list. To get the parent list formats, we",
					"long_description": "go through every list item until we find one with exactly one format type\nless.",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of a child list item.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The parent list line index.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-selection-end.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectionEnd",
				"namespace": "rich-text",
				"aliases": [],
				"line": 10,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Gets the end index of the current selection, or returns `undefined` if no",
					"long_description": "selection exists. The selection ends right before the character at this\nindex.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the selection from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Index where the selection ends.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-selection-start.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectionStart",
				"namespace": "rich-text",
				"aliases": [],
				"line": 10,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Gets the start index of the current selection, or returns `undefined` if no",
					"long_description": "selection exists. The selection starts right before the character at this\nindex.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the selection from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Index where the selection starts.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/get-text-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTextContent",
				"namespace": "rich-text",
				"aliases": [],
				"line": 9,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Get the textual content of a Rich Text value. This is similar to",
					"long_description": "`Element.textContent`.",
					"tags": [
						{
							"name": "param",
							"content": "Value to use.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The text content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/indent-list-items.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTargetLevelLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 16,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the line index of the first previous list item with higher indentation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of the list item to compare with.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The line index.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "indentListItems",
				"namespace": "rich-text",
				"aliases": [],
				"line": 47,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootFormat",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Indents any selected list items if possible.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "rootFormat"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/insert-line-separator.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertLineSeparator",
				"namespace": "rich-text",
				"aliases": [],
				"line": 19,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a line break character into a Rich Text value at the given",
					"long_description": "`startIndex`. Any content between `startIndex` and `endIndex` will be\nremoved. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the value inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/insert-object.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertObject",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatToInsert",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a format as an object into a Rich Text value at the given",
					"long_description": "`startIndex`. Any content between `startIndex` and `endIndex` will be\nremoved. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to insert as object.",
							"types": [
								"Object"
							],
							"variable": "formatToInsert"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the object inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/insert.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insert",
				"namespace": "rich-text",
				"aliases": [],
				"line": 20,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "valueToInsert",
						"default": null,
						"type": "string"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a Rich Text value, an HTML string, or a plain text string, into a",
					"long_description": "Rich Text value at the given `startIndex`. Any content between `startIndex`\nand `endIndex` will be removed. Indices are retrieved from the selection if\nnone are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Value to insert.",
							"types": [
								"string"
							],
							"variable": "valueToInsert"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the value inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/is-collapsed.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isCollapsed",
				"namespace": "rich-text",
				"aliases": [],
				"line": 12,
				"end_line": 21,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if the selection of a Rich Text value is collapsed or not. Collapsed",
					"long_description": "means that no characters are selected, but there is a caret present. If there\nis no selection, `undefined` will be returned. This is similar to\n`window.getSelection().isCollapsed()`.",
					"tags": [
						{
							"name": "param",
							"content": "The rich text value to check.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the selection is collapsed, false if not,\n                   undefined if there is no selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/is-empty.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isEmpty",
				"namespace": "rich-text",
				"aliases": [],
				"line": 11,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if a Rich Text value is Empty, meaning it contains no text or any",
					"long_description": "objects (such as images).",
					"tags": [
						{
							"name": "param",
							"content": "Value to use.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the value is empty, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEmptyLine",
				"namespace": "rich-text",
				"aliases": [],
				"line": 24,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if the current collapsed selection is on an empty line in case of a",
					"long_description": "multiline value.",
					"tags": [
						{
							"name": "param",
							"content": "Value te check.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the line is empty, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/is-format-equal.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFormatEqual",
				"namespace": "rich-text",
				"aliases": [],
				"line": 9,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "format1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format2",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Optimised equality check for format objects.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format to compare.",
							"types": [
								"Object"
							],
							"variable": "format1"
						},
						{
							"name": "param",
							"content": "Format to compare.",
							"types": [
								"Object"
							],
							"variable": "format2"
						},
						{
							"name": "return",
							"content": "True if formats are equal, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/join.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "join",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "Array"
					},
					{
						"name": "separator",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Combine an array of Rich Text values into one, optionally separated by",
					"long_description": "`separator`, which can be a Rich Text value, HTML string, or plain text\nstring. This is similar to `Array.prototype.join`.",
					"tags": [
						{
							"name": "param",
							"content": "An array of values to join.",
							"types": [
								"Array"
							],
							"variable": "values"
						},
						{
							"name": "param",
							"content": "Separator string or value.",
							"types": [
								"string",
								"Object"
							],
							"variable": "separator"
						},
						{
							"name": "return",
							"content": "A new combined value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/normalise-formats.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "normaliseFormats",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 44,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Normalises formats: ensures subsequent equal formats have the same reference.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to normalise formats of.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "New value with normalised formats.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/outdent-list-items.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "outdentListItems",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 57,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Outdents any selected list items if possible.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/register-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 41,
				"end_line": 181,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a new format provided a unique name and an object defining its",
					"long_description": "behavior.",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Format settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The format, if it has been successfully registered;\n                    otherwise `undefined`.",
							"types": [
								"WPFormat"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/remove-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "removeFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 23,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatType",
						"default": null,
						"type": "string"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Remove any format object from a Rich Text value by type from the given",
					"long_description": "`startIndex` to the given `endIndex`. Indices are retrieved from the\nselection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format type to remove.",
							"types": [
								"string"
							],
							"variable": "formatType"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the format applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/remove.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "remove",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Remove content from a Rich Text value between the given `startIndex` and",
					"long_description": "`endIndex`. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the content removed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/replace.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replace",
				"namespace": "rich-text",
				"aliases": [],
				"line": 24,
				"end_line": 67,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "pattern",
						"default": null,
						"type": "RegExp"
					},
					{
						"name": "replacement",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Search a Rich Text value and replace the match(es) with `replacement`. This",
					"long_description": "is similar to `String.prototype.replace`.",
					"tags": [
						{
							"name": "param",
							"content": "The value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "A RegExp object or literal. Can also be\n                                     a string. It is treated as a verbatim\n                                     string and is not interpreted as a\n                                     regular expression. Only the first\n                                     occurrence will be replaced.",
							"types": [
								"RegExp",
								"string"
							],
							"variable": "pattern"
						},
						{
							"name": "param",
							"content": "The match or matches are replaced with\n                                     the specified or the value returned by\n                                     the specified function.",
							"types": [
								"function",
								"string"
							],
							"variable": "replacement"
						},
						{
							"name": "return",
							"content": "A new value with replacements applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/slice.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "slice",
				"namespace": "rich-text",
				"aliases": [],
				"line": 12,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Slice a Rich Text value from `startIndex` to `endIndex`. Indices are",
					"long_description": "retrieved from the selection if none are provided. This is similar to\n`String.prototype.slice`.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new extracted value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/split.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "split",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "string",
						"default": null,
						"type": "number"
					},
					{
						"name": "end",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Split a Rich Text value in two at the given `startIndex` and `endIndex`, or",
					"long_description": "split at the given separator. This is similar to `String.prototype.split`.\nIndices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index, or string at which to split.",
							"types": [
								"number",
								"string"
							],
							"variable": "string"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "end"
						},
						{
							"name": "return",
							"content": "An array of new values.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 14,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formatTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that format types have been",
					"long_description": "added.",
					"tags": [
						{
							"name": "param",
							"content": "Format types received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "formatTypes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 28,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "names",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a registered format type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string",
								"Array"
							],
							"variable": "names"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "formatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 34,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the format types",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 28,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a format type by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Format type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFormatTypeForBareElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 41,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "bareElementTagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format type, if any, that can handle a bare element (without a",
					"long_description": "data-format-type attribute), given the tag name of this element.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The tag name of the element to find a\n                                   format type for.",
							"types": [
								"string"
							],
							"variable": "bareElementTagName"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFormatTypeForClassName",
				"namespace": "rich-text",
				"aliases": [],
				"line": 56,
				"end_line": 66,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "elementClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format type, if any, that can handle an element, given its classes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The classes of the element to find a format\n                                 type for.",
							"types": [
								"string"
							],
							"variable": "elementClassName"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/to-dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createPathToNode",
				"namespace": "rich-text",
				"aliases": [],
				"line": 27,
				"end_line": 42,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "rootNode",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Creates a path as an array of indices from the given root node to the given",
					"long_description": "node.",
					"tags": [
						{
							"name": "param",
							"content": "Node to find the path of.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Root node to find the path from.",
							"types": [
								"HTMLElement"
							],
							"variable": "rootNode"
						},
						{
							"name": "param",
							"content": "Initial path to build on.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "The path from the root node to the node.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNodeByPath",
				"namespace": "rich-text",
				"aliases": [],
				"line": 53,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Gets a node given a path (array of indices) from the given node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Root node to find the wanted node in.",
							"types": [
								"HTMLElement"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Path (indices) to the wanted node.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "Object with the found node and the remaining offset (if any).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createEmpty",
				"namespace": "rich-text",
				"aliases": [],
				"line": 77,
				"end_line": 79,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a new instance of a DOM tree upon which RichText operations can be",
					"long_description": "applied.\n\nNote: The current implementation will return a shared reference, reset on\neach call to `createEmpty`. Therefore, you should not hold a reference to\nthe value to operate upon asynchronously, as it may have unexpected results.",
					"tags": [
						{
							"name": "return",
							"content": "RichText tree.",
							"types": [
								"WPRichTextTree"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "apply",
				"namespace": "rich-text",
				"aliases": [],
				"line": 225,
				"end_line": 249,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "current",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "multilineTag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Create an `Element` tree from a Rich Text value and applies the difference to",
					"long_description": "the `Element` tree contained by `current`. If a `multilineTag` is provided,\ntext separated by two new lines will be wrapped in an `Element` of that type.",
					"tags": [
						{
							"name": "param",
							"content": "Value to apply.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "The live root node to apply the element\n                                  tree to.",
							"types": [
								"HTMLElement"
							],
							"variable": "current"
						},
						{
							"name": "param",
							"content": "Multiline tag.",
							"types": [
								"string"
							],
							"variable": "multilineTag"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isRangeEqual",
				"namespace": "rich-text",
				"aliases": [],
				"line": 283,
				"end_line": 285,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Range"
					},
					{
						"name": "b",
						"default": null,
						"type": "Range"
					}
				],
				"doc": {
					"description": "Returns true if two ranges are equal, or false otherwise. Ranges are",
					"long_description": "considered equal if their start and end occur in the same container and\noffset.",
					"tags": [
						{
							"name": "param",
							"content": "First range object to test.",
							"types": [
								"Range"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "First range object to test.",
							"types": [
								"Range"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two ranges are equal.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/to-html-string.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toHTMLString",
				"namespace": "rich-text",
				"aliases": [],
				"line": 23,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Create an HTML string from a Rich Text value. If a `multilineTag` is",
					"long_description": "provided, text separated by a line separator will be wrapped in it.",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Rich text value.",
							"types": [
								"Object"
							],
							"variable": "$1.value"
						},
						{
							"name": "param",
							"content": "Multiline tag.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                        nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "return",
							"content": "HTML string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/toggle-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toggleFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Toggles a format object to a Rich Text value at the current selection.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to apply or remove.",
							"types": [
								"Object"
							],
							"variable": "format"
						},
						{
							"name": "return",
							"content": "A new value with the format applied or removed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/build-module/unregister-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unregisterFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 15,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a format.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous format value, if it has been successfully\n                    unregistered; otherwise `undefined`.",
							"types": [
								"WPFormat"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/apply-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "applyFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 25,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Apply a format object to a Rich Text value from the given `startIndex` to the",
					"long_description": "given `endIndex`. Indices are retrieved from the selection if none are\nprovided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to apply.",
							"types": [
								"Object"
							],
							"variable": "format"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the format applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/change-list-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "changeListType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 22,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "newFormat",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Changes the list type of the selected indented list, if any. Looks at the",
					"long_description": "currently selected list item and takes the parent list, then changes the list\ntype of this list. When multiple lines are selected, the parent lists are\ntakes and changed.",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "The new list format object. Choose between\n                          `{ type: 'ol' }` and `{ type: 'ul' }`.",
							"types": [
								"Object"
							],
							"variable": "newFormat"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/char-at.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "charAt",
				"namespace": "rich-text",
				"aliases": [],
				"line": 10,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "index",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the character at the specified index, or returns `undefined` if no",
					"long_description": "character was found.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the character from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Index to use.",
							"types": [
								"string"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "A one character long string, or undefined.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/concat.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "concat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 15,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "mixed"
					}
				],
				"doc": {
					"description": "Combine all Rich Text values into one. This is similar to",
					"long_description": "`String.prototype.concat`.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"mixed"
							],
							"variable": "values"
						},
						{
							"name": "return",
							"content": "A new value combining all given records.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/create-element.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 13,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "document",
						"default": null,
						"type": "HTMLDocument"
					},
					{
						"name": "html",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Parse the given HTML into a body element.",
					"long_description": "\nNote: The current implementation will return a shared reference, reset on\neach call to `createElement`. Therefore, you should not hold a reference to\nthe value to operate upon asynchronously, as it may have unexpected results.",
					"tags": [
						{
							"name": "param",
							"content": "The HTML document to use to parse.",
							"types": [
								"HTMLDocument"
							],
							"variable": "document"
						},
						{
							"name": "param",
							"content": "The HTML to parse.",
							"types": [
								"string"
							],
							"variable": "html"
						},
						{
							"name": "return",
							"content": "Body element with parsed HTML.",
							"types": [
								"HTMLBodyElement"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/create.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "create",
				"namespace": "rich-text",
				"aliases": [],
				"line": 112,
				"end_line": 160,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.text",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.html",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Create a RichText value from an `Element` tree (DOM), an HTML string or a",
					"long_description": "plain text string, with optionally a `Range` object to set the selection. If\ncalled without any input, an empty value will be created. If\n`multilineTag` is provided, any content of direct children whose type matches\n`multilineTag` will be separated by two newlines. The optional functions can\nbe used to filter out content.",
					"tags": [
						{
							"name": "param",
							"content": "Optional named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Text to create value from.",
							"types": [
								"string"
							],
							"variable": "$1.text"
						},
						{
							"name": "param",
							"content": "HTML to create value from.",
							"types": [
								"string"
							],
							"variable": "$1.html"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "accumulateSelection",
				"namespace": "rich-text",
				"aliases": [],
				"line": 171,
				"end_line": 225,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "accumulator",
						"default": null,
						"type": "Object"
					},
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Helper to accumulate the value's selection start and end from the current",
					"long_description": "node and range.",
					"tags": [
						{
							"name": "param",
							"content": "Object to accumulate into.",
							"types": [
								"Object"
							],
							"variable": "accumulator"
						},
						{
							"name": "param",
							"content": "Node to create value with.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Range to create value with.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "Value that is being accumulated.",
							"types": [
								"Object"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "filterRange",
				"namespace": "rich-text",
				"aliases": [],
				"line": 236,
				"end_line": 253,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "filter",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Adjusts the start and end offsets from a range based on a text filter.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Node of which the text should be filtered.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "The range to filter.",
							"types": [
								"Range"
							],
							"variable": "range"
						},
						{
							"name": "param",
							"content": "Function to use to filter the text.",
							"types": [
								"function"
							],
							"variable": "filter"
						},
						{
							"name": "return",
							"content": "Object containing range properties.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createFromElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 276,
				"end_line": 448,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Creates a Rich Text value from a DOM element and range.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createFromMultilineElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 474,
				"end_line": 544,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.range",
						"default": null,
						"type": "Range"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					},
					{
						"name": "$1.removeNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.unwrapNode",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.filterString",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					},
					{
						"name": "$1.currentWrapperTags",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Creates a rich text value from a DOM element and range that should be",
					"long_description": "multiline.",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to create value from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Range to create value from.",
							"types": [
								"Range"
							],
							"variable": "$1.range"
						},
						{
							"name": "param",
							"content": "Multiline tag if the structure is\n                                           multiline.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                           nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be removed.",
							"types": [
								"function"
							],
							"variable": "$1.removeNode"
						},
						{
							"name": "param",
							"content": "Function to declare whether the\n                                           given node should be unwrapped.",
							"types": [
								"function"
							],
							"variable": "$1.unwrapNode"
						},
						{
							"name": "param",
							"content": "Function to filter the given\n                                           string.",
							"types": [
								"function"
							],
							"variable": "$1.filterString"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute\n                                           based on the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "param",
							"content": "Whether to prepend a line\n                                           separator.",
							"types": [
								"boolean"
							],
							"variable": "$1.currentWrapperTags"
						},
						{
							"name": "return",
							"content": "A rich text value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAttributes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 557,
				"end_line": 581,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.element",
						"default": null,
						"type": "Element"
					},
					{
						"name": "$1.removeAttribute",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Gets the attributes of an element in object shape.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Element to get attributes from.",
							"types": [
								"Element"
							],
							"variable": "$1.element"
						},
						{
							"name": "param",
							"content": "Wether to remove an attribute based on\n                                      the name.",
							"types": [
								"function"
							],
							"variable": "$1.removeAttribute"
						},
						{
							"name": "return",
							"content": "Attribute object or `undefined` if the element has no\n                  attributes.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-active-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getActiveFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format object by type at the start of the selection. This can be",
					"long_description": "used to get e.g. the URL of a link format at the current selection, but also\nto check if a format is active at the selection. Returns undefined if there\nis no format at the selection.",
					"tags": [
						{
							"name": "param",
							"content": "Value to inspect.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format type to look for.",
							"types": [
								"string"
							],
							"variable": "formatType"
						},
						{
							"name": "return",
							"content": "Active format object of the specified type, or undefined.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 13,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a registered format type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-format-types.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns all registered formats.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Format settings.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-last-child-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLastChildIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 15,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the line index of the last child in the list.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of a list item in the list.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The index of the last child.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-line-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "boolean"
					}
				],
				"doc": {
					"description": "Gets the currently selected line index, or the first line index if the",
					"long_description": "selection spans over multiple items.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the line index from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Optional index that should be contained by the\n                            line. Defaults to the selection start of the\n                            value.",
							"types": [
								"boolean"
							],
							"variable": "startIndex"
						},
						{
							"name": "return",
							"content": "The line index. Undefined if not found.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-parent-line-index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getParentLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the index of the first parent list. To get the parent list formats, we",
					"long_description": "go through every list item until we find one with exactly one format type\nless.",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of a child list item.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The parent list line index.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-selection-end.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectionEnd",
				"namespace": "rich-text",
				"aliases": [],
				"line": 10,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Gets the end index of the current selection, or returns `undefined` if no",
					"long_description": "selection exists. The selection ends right before the character at this\nindex.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the selection from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Index where the selection ends.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-selection-start.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getSelectionStart",
				"namespace": "rich-text",
				"aliases": [],
				"line": 10,
				"end_line": 12,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Gets the start index of the current selection, or returns `undefined` if no",
					"long_description": "selection exists. The selection starts right before the character at this\nindex.",
					"tags": [
						{
							"name": "param",
							"content": "Value to get the selection from.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Index where the selection starts.",
							"types": [
								"number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/get-text-content.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTextContent",
				"namespace": "rich-text",
				"aliases": [],
				"line": 9,
				"end_line": 11,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Get the textual content of a Rich Text value. This is similar to",
					"long_description": "`Element.textContent`.",
					"tags": [
						{
							"name": "param",
							"content": "Value to use.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The text content.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/indent-list-items.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getTargetLevelLineIndex",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "lineIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Gets the line index of the first previous list item with higher indentation.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to search.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Line index of the list item to compare with.",
							"types": [
								"number"
							],
							"variable": "lineIndex"
						},
						{
							"name": "return",
							"content": "The line index.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "indentListItems",
				"namespace": "rich-text",
				"aliases": [],
				"line": 47,
				"end_line": 98,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "rootFormat",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Indents any selected list items if possible.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "rootFormat"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/insert-line-separator.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertLineSeparator",
				"namespace": "rich-text",
				"aliases": [],
				"line": 20,
				"end_line": 40,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a line break character into a Rich Text value at the given",
					"long_description": "`startIndex`. Any content between `startIndex` and `endIndex` will be\nremoved. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the value inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/insert-object.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insertObject",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatToInsert",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a format as an object into a Rich Text value at the given",
					"long_description": "`startIndex`. Any content between `startIndex` and `endIndex` will be\nremoved. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to insert as object.",
							"types": [
								"Object"
							],
							"variable": "formatToInsert"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the object inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/insert.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "insert",
				"namespace": "rich-text",
				"aliases": [],
				"line": 21,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "valueToInsert",
						"default": null,
						"type": "string"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Insert a Rich Text value, an HTML string, or a plain text string, into a",
					"long_description": "Rich Text value at the given `startIndex`. Any content between `startIndex`\nand `endIndex` will be removed. Indices are retrieved from the selection if\nnone are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Value to insert.",
							"types": [
								"string"
							],
							"variable": "valueToInsert"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the value inserted.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/is-collapsed.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isCollapsed",
				"namespace": "rich-text",
				"aliases": [],
				"line": 12,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if the selection of a Rich Text value is collapsed or not. Collapsed",
					"long_description": "means that no characters are selected, but there is a caret present. If there\nis no selection, `undefined` will be returned. This is similar to\n`window.getSelection().isCollapsed()`.",
					"tags": [
						{
							"name": "param",
							"content": "The rich text value to check.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the selection is collapsed, false if not,\n                   undefined if there is no selection.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/is-empty.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isEmpty",
				"namespace": "rich-text",
				"aliases": [],
				"line": 11,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if a Rich Text value is Empty, meaning it contains no text or any",
					"long_description": "objects (such as images).",
					"tags": [
						{
							"name": "param",
							"content": "Value to use.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the value is empty, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isEmptyLine",
				"namespace": "rich-text",
				"aliases": [],
				"line": 23,
				"end_line": 41,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Check if the current collapsed selection is on an empty line in case of a",
					"long_description": "multiline value.",
					"tags": [
						{
							"name": "param",
							"content": "Value te check.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "True if the line is empty, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/is-format-equal.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isFormatEqual",
				"namespace": "rich-text",
				"aliases": [],
				"line": 9,
				"end_line": 56,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "format1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format2",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Optimised equality check for format objects.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format to compare.",
							"types": [
								"Object"
							],
							"variable": "format1"
						},
						{
							"name": "param",
							"content": "Format to compare.",
							"types": [
								"Object"
							],
							"variable": "format2"
						},
						{
							"name": "return",
							"content": "True if formats are equal, false if not.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/join.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "join",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "Array"
					},
					{
						"name": "separator",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Combine an array of Rich Text values into one, optionally separated by",
					"long_description": "`separator`, which can be a Rich Text value, HTML string, or plain text\nstring. This is similar to `Array.prototype.join`.",
					"tags": [
						{
							"name": "param",
							"content": "An array of values to join.",
							"types": [
								"Array"
							],
							"variable": "values"
						},
						{
							"name": "param",
							"content": "Separator string or value.",
							"types": [
								"string",
								"Object"
							],
							"variable": "separator"
						},
						{
							"name": "return",
							"content": "A new combined value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/normalise-formats.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "normaliseFormats",
				"namespace": "rich-text",
				"aliases": [],
				"line": 20,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Normalises formats: ensures subsequent equal formats have the same reference.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to normalise formats of.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "New value with normalised formats.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/outdent-list-items.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "outdentListItems",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Outdents any selected list items if possible.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to change.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "The changed value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/register-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "registerFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 35,
				"end_line": 229,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Registers a new format provided a unique name and an object defining its",
					"long_description": "behavior.",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "param",
							"content": "Format settings.",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The format, if it has been successfully registered;\n                    otherwise `undefined`.",
							"types": [
								"WPFormat"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/remove-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "removeFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 25,
				"end_line": 58,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "formatType",
						"default": null,
						"type": "string"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Remove any format object from a Rich Text value by type from the given",
					"long_description": "`startIndex` to the given `endIndex`. Indices are retrieved from the\nselection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format type to remove.",
							"types": [
								"string"
							],
							"variable": "formatType"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the format applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/remove.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "remove",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Remove content from a Rich Text value between the given `startIndex` and",
					"long_description": "`endIndex`. Indices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new value with the content removed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/replace.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "replace",
				"namespace": "rich-text",
				"aliases": [],
				"line": 23,
				"end_line": 54,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "pattern",
						"default": null,
						"type": "RegExp"
					},
					{
						"name": "replacement",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Search a Rich Text value and replace the match(es) with `replacement`. This",
					"long_description": "is similar to `String.prototype.replace`.",
					"tags": [
						{
							"name": "param",
							"content": "The value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "A RegExp object or literal. Can also be\n                                     a string. It is treated as a verbatim\n                                     string and is not interpreted as a\n                                     regular expression. Only the first\n                                     occurrence will be replaced.",
							"types": [
								"RegExp",
								"string"
							],
							"variable": "pattern"
						},
						{
							"name": "param",
							"content": "The match or matches are replaced with\n                                     the specified or the value returned by\n                                     the specified function.",
							"types": [
								"function",
								"string"
							],
							"variable": "replacement"
						},
						{
							"name": "return",
							"content": "A new value with replacements applied.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/slice.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "slice",
				"namespace": "rich-text",
				"aliases": [],
				"line": 12,
				"end_line": 25,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "startIndex",
						"default": null,
						"type": "number"
					},
					{
						"name": "endIndex",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Slice a Rich Text value from `startIndex` to `endIndex`. Indices are",
					"long_description": "retrieved from the selection if none are provided. This is similar to\n`String.prototype.slice`.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index.",
							"types": [
								"number"
							],
							"variable": "startIndex"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "endIndex"
						},
						{
							"name": "return",
							"content": "A new extracted value.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/split.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "split",
				"namespace": "rich-text",
				"aliases": [],
				"line": 18,
				"end_line": 50,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "string",
						"default": null,
						"type": "number"
					},
					{
						"name": "end",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Split a Rich Text value in two at the given `startIndex` and `endIndex`, or",
					"long_description": "split at the given separator. This is similar to `String.prototype.split`.\nIndices are retrieved from the selection if none are provided.",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Start index, or string at which to split.",
							"types": [
								"number",
								"string"
							],
							"variable": "string"
						},
						{
							"name": "param",
							"content": "End index.",
							"types": [
								"number"
							],
							"variable": "end"
						},
						{
							"name": "return",
							"content": "An array of new values.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "addFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 14,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "formatTypes",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that format types have been",
					"long_description": "added.",
					"tags": [
						{
							"name": "param",
							"content": "Format types received.",
							"types": [
								"Array",
								"Object"
							],
							"variable": "formatTypes"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeFormatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 28,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "names",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns an action object used to remove a registered format type.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string",
								"Array"
							],
							"variable": "names"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "formatTypes",
				"namespace": "rich-text",
				"aliases": [],
				"line": 19,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer managing the format types",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "getFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 29,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a format type by name.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Format type name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFormatTypeForBareElement",
				"namespace": "rich-text",
				"aliases": [],
				"line": 42,
				"end_line": 46,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "bareElementTagName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format type, if any, that can handle a bare element (without a",
					"long_description": "data-format-type attribute), given the tag name of this element.",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The tag name of the element to find a\n                                   format type for.",
							"types": [
								"string"
							],
							"variable": "bareElementTagName"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFormatTypeForClassName",
				"namespace": "rich-text",
				"aliases": [],
				"line": 56,
				"end_line": 64,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "elementClassName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Gets the format type, if any, that can handle an element, given its classes.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Data state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "The classes of the element to find a format\n                                 type for.",
							"types": [
								"string"
							],
							"variable": "elementClassName"
						},
						{
							"name": "return",
							"content": "Format type.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/to-dom.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "createPathToNode",
				"namespace": "rich-text",
				"aliases": [],
				"line": 24,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "Node"
					},
					{
						"name": "rootNode",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Creates a path as an array of indices from the given root node to the given",
					"long_description": "node.",
					"tags": [
						{
							"name": "param",
							"content": "Node to find the path of.",
							"types": [
								"Node"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Root node to find the path from.",
							"types": [
								"HTMLElement"
							],
							"variable": "rootNode"
						},
						{
							"name": "param",
							"content": "Initial path to build on.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "The path from the root node to the node.",
							"types": [
								"Array"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getNodeByPath",
				"namespace": "rich-text",
				"aliases": [],
				"line": 49,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "node",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "path",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Gets a node given a path (array of indices) from the given node.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Root node to find the wanted node in.",
							"types": [
								"HTMLElement"
							],
							"variable": "node"
						},
						{
							"name": "param",
							"content": "Path (indices) to the wanted node.",
							"types": [
								"Array"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "Object with the found node and the remaining offset (if any).",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "createEmpty",
				"namespace": "rich-text",
				"aliases": [],
				"line": 72,
				"end_line": 72,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns a new instance of a DOM tree upon which RichText operations can be",
					"long_description": "applied.\n\nNote: The current implementation will return a shared reference, reset on\neach call to `createEmpty`. Therefore, you should not hold a reference to\nthe value to operate upon asynchronously, as it may have unexpected results.",
					"tags": [
						{
							"name": "return",
							"content": "RichText tree.",
							"types": [
								"WPRichTextTree"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "apply",
				"namespace": "rich-text",
				"aliases": [],
				"line": 203,
				"end_line": 225,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "current",
						"default": null,
						"type": "HTMLElement"
					},
					{
						"name": "multilineTag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Create an `Element` tree from a Rich Text value and applies the difference to",
					"long_description": "the `Element` tree contained by `current`. If a `multilineTag` is provided,\ntext separated by two new lines will be wrapped in an `Element` of that type.",
					"tags": [
						{
							"name": "param",
							"content": "Value to apply.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "The live root node to apply the element\n                                  tree to.",
							"types": [
								"HTMLElement"
							],
							"variable": "current"
						},
						{
							"name": "param",
							"content": "Multiline tag.",
							"types": [
								"string"
							],
							"variable": "multilineTag"
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isRangeEqual",
				"namespace": "rich-text",
				"aliases": [],
				"line": 260,
				"end_line": 267,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "a",
						"default": null,
						"type": "Range"
					},
					{
						"name": "b",
						"default": null,
						"type": "Range"
					}
				],
				"doc": {
					"description": "Returns true if two ranges are equal, or false otherwise. Ranges are",
					"long_description": "considered equal if their start and end occur in the same container and\noffset.",
					"tags": [
						{
							"name": "param",
							"content": "First range object to test.",
							"types": [
								"Range"
							],
							"variable": "a"
						},
						{
							"name": "param",
							"content": "First range object to test.",
							"types": [
								"Range"
							],
							"variable": "b"
						},
						{
							"name": "return",
							"content": "Whether the two ranges are equal.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/to-html-string.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toHTMLString",
				"namespace": "rich-text",
				"aliases": [],
				"line": 29,
				"end_line": 45,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "$1",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "$1.multilineTag",
						"default": null,
						"type": "string"
					},
					{
						"name": "$1.multilineWrapperTags",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Create an HTML string from a Rich Text value. If a `multilineTag` is",
					"long_description": "provided, text separated by a line separator will be wrapped in it.",
					"tags": [
						{
							"name": "param",
							"content": "Named argements.",
							"types": [
								"Object"
							],
							"variable": "$1"
						},
						{
							"name": "param",
							"content": "Rich text value.",
							"types": [
								"Object"
							],
							"variable": "$1.value"
						},
						{
							"name": "param",
							"content": "Multiline tag.",
							"types": [
								"string"
							],
							"variable": "$1.multilineTag"
						},
						{
							"name": "param",
							"content": "Tags where lines can be found if\n                                        nesting is possible.",
							"types": [
								"Array"
							],
							"variable": "$1.multilineWrapperTags"
						},
						{
							"name": "return",
							"content": "HTML string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/toggle-format.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "toggleFormat",
				"namespace": "rich-text",
				"aliases": [],
				"line": 17,
				"end_line": 26,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "Object"
					},
					{
						"name": "format",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Toggles a format object to a Rich Text value at the current selection.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Value to modify.",
							"types": [
								"Object"
							],
							"variable": "value"
						},
						{
							"name": "param",
							"content": "Format to apply or remove.",
							"types": [
								"Object"
							],
							"variable": "format"
						},
						{
							"name": "return",
							"content": "A new value with the format applied or removed.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/rich-text/src/unregister-format-type.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "unregisterFormatType",
				"namespace": "rich-text",
				"aliases": [],
				"line": 15,
				"end_line": 35,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "name",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Unregisters a format.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Format name.",
							"types": [
								"string"
							],
							"variable": "name"
						},
						{
							"name": "return",
							"content": "The previous format value, if it has been successfully\n                    unregistered; otherwise `undefined`.",
							"types": [
								"WPFormat"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/config/babel-transform.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/config/jest-e2e.config.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/config/jest-unit.config.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/scripts/check-licenses.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "checkLicense",
				"namespace": "scripts",
				"aliases": [],
				"line": 137,
				"end_line": 169,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "allowedLicense",
						"default": null,
						"type": "string"
					},
					{
						"name": "licenseType",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Check if a license string matches the given license.",
					"long_description": "\nThe license string can be a single license, or an SPDX-compatible \"OR\" license string.\neg, \"(MIT OR Zlib)\".",
					"tags": [
						{
							"name": "param",
							"content": "The license that's allowed.",
							"types": [
								"string"
							],
							"variable": "allowedLicense"
						},
						{
							"name": "param",
							"content": "The license string to check.",
							"types": [
								"string"
							],
							"variable": "licenseType"
						},
						{
							"name": "return",
							"content": "true if the licenseType matches the allowedLicense, false if it doesn't.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isNotIgnoredModule",
				"namespace": "scripts",
				"aliases": [],
				"line": 179,
				"end_line": 186,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "moduleName",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the given module path is not to be ignored for consideration",
					"long_description": "in license validation, or false otherwise.",
					"tags": [
						{
							"name": "param",
							"content": "Module path.",
							"types": [
								"string"
							],
							"variable": "moduleName"
						},
						{
							"name": "return",
							"content": "Whether module path is not to be ignored.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/scripts/test-e2e.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/scripts/test-unit-jest.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/scripts/utils/cli.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/shortcode/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "next",
				"namespace": "shortcode",
				"aliases": [],
				"line": 61,
				"end_line": 94,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Find the next matching shortcode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "param",
							"content": "Text to search.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Index to start search from.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Matched information.",
							"types": [
								"WPShortcodeMatch"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "shortcode",
				"aliases": [],
				"line": 107,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "callback",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Replace matching shortcodes in a block of text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "param",
							"content": "Text to search.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Function to process the match and return\n                           replacement string.",
							"types": [
								"function"
							],
							"variable": "callback"
						},
						{
							"name": "return",
							"content": "Text with shortcodes replaced.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "string",
				"namespace": "shortcode",
				"aliases": [],
				"line": 138,
				"end_line": 140,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Generate a string from shortcode parameters.",
					"long_description": "\nCreates a shortcode instance and returns a string.\n\nAccepts the same `options` as the `shortcode()` constructor, containing a\n`tag` string, a string or object of `attrs`, a boolean indicating whether to\nformat the shortcode using a `single` tag, and a `content` string.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "String representation of the shortcode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "regexp",
				"namespace": "shortcode",
				"aliases": [],
				"line": 163,
				"end_line": 165,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Generate a RegExp to identify a shortcode.",
					"long_description": "\nThe base regex is functionally equivalent to the one found in\n`get_shortcode_regex()` in `wp-includes/shortcodes.php`.\n\nCapture groups:\n\n1. An extra `[` to allow for escaping shortcodes with double `[[]]`\n2. The shortcode name\n3. The shortcode argument list\n4. The self closing `/`\n5. The content of a shortcode when it wraps some content.\n6. The closing tag.\n7. An extra `]` to allow for escaping shortcodes with double `[[]]`",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "return",
							"content": "Shortcode RegExp.",
							"types": [
								"RegExp"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "get",
				"namespace": "shortcode",
				"aliases": [],
				"line": 318,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attr",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Get a shortcode attribute.",
					"long_description": "\nAutomatically detects whether `attr` is named or numeric and routes it\naccordingly.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"number",
								"string"
							],
							"variable": "attr"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "shortcode",
				"aliases": [],
				"line": 333,
				"end_line": 336,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attr",
						"default": null,
						"type": "number"
					},
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Set a shortcode attribute.",
					"long_description": "\nAutomatically detects whether `attr` is named or numeric and routes it\naccordingly.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"number",
								"string"
							],
							"variable": "attr"
						},
						{
							"name": "param",
							"content": "Attribute value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Shortcode instance.",
							"types": [
								"WPShortcode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "string",
				"namespace": "shortcode",
				"aliases": [],
				"line": 343,
				"end_line": 372,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Transform the shortcode into a string.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "String representation of the shortcode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/shortcode/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "next",
				"namespace": "shortcode",
				"aliases": [],
				"line": 45,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Find the next matching shortcode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "param",
							"content": "Text to search.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Index to start search from.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Matched information.",
							"types": [
								"WPShortcodeMatch"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "shortcode",
				"aliases": [],
				"line": 90,
				"end_line": 105,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "callback",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Replace matching shortcodes in a block of text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "param",
							"content": "Text to search.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Function to process the match and return\n                           replacement string.",
							"types": [
								"function"
							],
							"variable": "callback"
						},
						{
							"name": "return",
							"content": "Text with shortcodes replaced.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "string",
				"namespace": "shortcode",
				"aliases": [],
				"line": 120,
				"end_line": 122,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Generate a string from shortcode parameters.",
					"long_description": "\nCreates a shortcode instance and returns a string.\n\nAccepts the same `options` as the `shortcode()` constructor, containing a\n`tag` string, a string or object of `attrs`, a boolean indicating whether to\nformat the shortcode using a `single` tag, and a `content` string.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "String representation of the shortcode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "regexp",
				"namespace": "shortcode",
				"aliases": [],
				"line": 144,
				"end_line": 146,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Generate a RegExp to identify a shortcode.",
					"long_description": "\nThe base regex is functionally equivalent to the one found in\n`get_shortcode_regex()` in `wp-includes/shortcodes.php`.\n\nCapture groups:\n\n1. An extra `[` to allow for escaping shortcodes with double `[[]]`\n2. The shortcode name\n3. The shortcode argument list\n4. The self closing `/`\n5. The content of a shortcode when it wraps some content.\n6. The closing tag.\n7. An extra `]` to allow for escaping shortcodes with double `[[]]`",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "return",
							"content": "Shortcode RegExp.",
							"types": [
								"RegExp"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromMatch",
				"namespace": "shortcode",
				"aliases": [],
				"line": 220,
				"end_line": 237,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "match",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Generate a Shortcode Object from a RegExp match.",
					"long_description": "\nAccepts a `match` object from calling `regexp.exec()` on a `RegExp` generated\nby `regexp()`. `match` can also be set to the `arguments` from a callback\npassed to `regexp.replace()`.",
					"tags": [
						{
							"name": "param",
							"content": "Match array.",
							"types": [
								"Array"
							],
							"variable": "match"
						},
						{
							"name": "return",
							"content": "Shortcode instance.",
							"types": [
								"WPShortcode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "get",
				"namespace": "shortcode",
				"aliases": [],
				"line": 295,
				"end_line": 297,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attr",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Get a shortcode attribute.",
					"long_description": "\nAutomatically detects whether `attr` is named or numeric and routes it\naccordingly.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"number",
								"string"
							],
							"variable": "attr"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "shortcode",
				"aliases": [],
				"line": 310,
				"end_line": 313,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attr",
						"default": null,
						"type": "number"
					},
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Set a shortcode attribute.",
					"long_description": "\nAutomatically detects whether `attr` is named or numeric and routes it\naccordingly.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"number",
								"string"
							],
							"variable": "attr"
						},
						{
							"name": "param",
							"content": "Attribute value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Shortcode instance.",
							"types": [
								"WPShortcode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "string",
				"namespace": "shortcode",
				"aliases": [],
				"line": 320,
				"end_line": 349,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Transform the shortcode into a string.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "String representation of the shortcode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/shortcode/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "next",
				"namespace": "shortcode",
				"aliases": [],
				"line": 45,
				"end_line": 80,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "index",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Find the next matching shortcode.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "param",
							"content": "Text to search.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Index to start search from.",
							"types": [
								"number"
							],
							"variable": "index"
						},
						{
							"name": "return",
							"content": "Matched information.",
							"types": [
								"WPShortcodeMatch"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "replace",
				"namespace": "shortcode",
				"aliases": [],
				"line": 92,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "callback",
						"default": null,
						"type": "function"
					}
				],
				"doc": {
					"description": "Replace matching shortcodes in a block of text.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "param",
							"content": "Text to search.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "Function to process the match and return\n                           replacement string.",
							"types": [
								"function"
							],
							"variable": "callback"
						},
						{
							"name": "return",
							"content": "Text with shortcodes replaced.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "string",
				"namespace": "shortcode",
				"aliases": [],
				"line": 122,
				"end_line": 124,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "options",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Generate a string from shortcode parameters.",
					"long_description": "\nCreates a shortcode instance and returns a string.\n\nAccepts the same `options` as the `shortcode()` constructor, containing a\n`tag` string, a string or object of `attrs`, a boolean indicating whether to\nformat the shortcode using a `single` tag, and a `content` string.",
					"tags": [
						{
							"name": "param",
							"content": "",
							"types": [
								"Object"
							],
							"variable": "options"
						},
						{
							"name": "return",
							"content": "String representation of the shortcode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "regexp",
				"namespace": "shortcode",
				"aliases": [],
				"line": 146,
				"end_line": 148,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "tag",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Generate a RegExp to identify a shortcode.",
					"long_description": "\nThe base regex is functionally equivalent to the one found in\n`get_shortcode_regex()` in `wp-includes/shortcodes.php`.\n\nCapture groups:\n\n1. An extra `[` to allow for escaping shortcodes with double `[[]]`\n2. The shortcode name\n3. The shortcode argument list\n4. The self closing `/`\n5. The content of a shortcode when it wraps some content.\n6. The closing tag.\n7. An extra `]` to allow for escaping shortcodes with double `[[]]`",
					"tags": [
						{
							"name": "param",
							"content": "Shortcode tag.",
							"types": [
								"string"
							],
							"variable": "tag"
						},
						{
							"name": "return",
							"content": "Shortcode RegExp.",
							"types": [
								"RegExp"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "fromMatch",
				"namespace": "shortcode",
				"aliases": [],
				"line": 223,
				"end_line": 240,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "match",
						"default": null,
						"type": "Array"
					}
				],
				"doc": {
					"description": "Generate a Shortcode Object from a RegExp match.",
					"long_description": "\nAccepts a `match` object from calling `regexp.exec()` on a `RegExp` generated\nby `regexp()`. `match` can also be set to the `arguments` from a callback\npassed to `regexp.replace()`.",
					"tags": [
						{
							"name": "param",
							"content": "Match array.",
							"types": [
								"Array"
							],
							"variable": "match"
						},
						{
							"name": "return",
							"content": "Shortcode instance.",
							"types": [
								"WPShortcode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "get",
				"namespace": "shortcode",
				"aliases": [],
				"line": 302,
				"end_line": 304,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attr",
						"default": null,
						"type": "number"
					}
				],
				"doc": {
					"description": "Get a shortcode attribute.",
					"long_description": "\nAutomatically detects whether `attr` is named or numeric and routes it\naccordingly.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"number",
								"string"
							],
							"variable": "attr"
						},
						{
							"name": "return",
							"content": "Attribute value.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "shortcode",
				"aliases": [],
				"line": 317,
				"end_line": 320,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "attr",
						"default": null,
						"type": "number"
					},
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Set a shortcode attribute.",
					"long_description": "\nAutomatically detects whether `attr` is named or numeric and routes it\naccordingly.",
					"tags": [
						{
							"name": "param",
							"content": "Attribute key.",
							"types": [
								"number",
								"string"
							],
							"variable": "attr"
						},
						{
							"name": "param",
							"content": "Attribute value.",
							"types": [
								"string"
							],
							"variable": "value"
						},
						{
							"name": "return",
							"content": "Shortcode instance.",
							"types": [
								"WPShortcode"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "string",
				"namespace": "shortcode",
				"aliases": [],
				"line": 327,
				"end_line": 359,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Transform the shortcode into a string.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "String representation of the shortcode.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/token-list/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "value",
				"namespace": "token-list",
				"aliases": [],
				"line": 67,
				"end_line": 69,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the stringified form of the TokenList.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Token set as string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "token-list",
				"aliases": [],
				"line": 244,
				"end_line": 248,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces the associated set with a new string value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New token set as string.",
							"types": [
								"string"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/token-list/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "value",
				"namespace": "token-list",
				"aliases": [],
				"line": 58,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [],
				"doc": {
					"description": "Returns the stringified form of the TokenList.",
					"long_description": "",
					"tags": [
						{
							"name": "return",
							"content": "Token set as string.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "set",
				"namespace": "token-list",
				"aliases": [],
				"line": 235,
				"end_line": 239,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "value",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces the associated set with a new string value.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "New token set as string.",
							"types": [
								"string"
							],
							"variable": "value"
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/url/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isURL",
				"namespace": "url",
				"aliases": [],
				"line": 41,
				"end_line": 43,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether the given string looks like a URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The string to scrutinise.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Whether or not it looks like a URL.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getProtocol",
				"namespace": "url",
				"aliases": [],
				"line": 53,
				"end_line": 59,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the protocol part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The protocol part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidProtocol",
				"namespace": "url",
				"aliases": [],
				"line": 69,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "protocol",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Tests if a url protocol is valid.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The url protocol.",
							"types": [
								"string"
							],
							"variable": "protocol"
						},
						{
							"name": "return",
							"content": "True if the argument is a valid protocol (e.g. http:, tel:).",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAuthority",
				"namespace": "url",
				"aliases": [],
				"line": 85,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the authority part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The authority part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAuthority",
				"namespace": "url",
				"aliases": [],
				"line": 101,
				"end_line": 107,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "authority",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided authority.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string containing the URL authority.",
							"types": [
								"string"
							],
							"variable": "authority"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid authority.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPath",
				"namespace": "url",
				"aliases": [],
				"line": 117,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the path part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The path part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidPath",
				"namespace": "url",
				"aliases": [],
				"line": 133,
				"end_line": 139,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "path",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided path.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL path.",
							"types": [
								"string"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid path",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getQueryString",
				"namespace": "url",
				"aliases": [],
				"line": 149,
				"end_line": 155,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the query string part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The query string part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidQueryString",
				"namespace": "url",
				"aliases": [],
				"line": 165,
				"end_line": 171,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queryString",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided query string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The query string.",
							"types": [
								"string"
							],
							"variable": "queryString"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid query string.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFragment",
				"namespace": "url",
				"aliases": [],
				"line": 181,
				"end_line": 187,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the fragment part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The fragment part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidFragment",
				"namespace": "url",
				"aliases": [],
				"line": 197,
				"end_line": 203,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fragment",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided fragment.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The url fragment.",
							"types": [
								"string"
							],
							"variable": "fragment"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid fragment.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addQueryArgs",
				"namespace": "url",
				"aliases": [],
				"line": 217,
				"end_line": 238,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Appends arguments as querystring to the provided URL. If the URL already",
					"long_description": "includes query arguments, the arguments are merged with (and take precedent\nover) the existing set.",
					"tags": [
						{
							"name": "param",
							"content": "URL to which arguments should be appended. If omitted,\n                      only the resulting querystring is returned.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arguments to apply to URL.",
							"types": [
								"Object"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "URL with arguments applied.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getQueryArg",
				"namespace": "url",
				"aliases": [],
				"line": 249,
				"end_line": 253,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "arg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a single query argument of the url",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arg name",
							"types": [
								"string"
							],
							"variable": "arg"
						},
						{
							"name": "return",
							"content": "Query arg value.",
							"types": [
								"Array",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasQueryArg",
				"namespace": "url",
				"aliases": [],
				"line": 264,
				"end_line": 266,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "arg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether the URL contains a given query arg.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arg name",
							"types": [
								"string"
							],
							"variable": "arg"
						},
						{
							"name": "return",
							"content": "Whether or not the URL contains the query aeg.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeQueryArgs",
				"namespace": "url",
				"aliases": [],
				"line": 277,
				"end_line": 290,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes arguments from the query string of the url",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query Args",
							"types": [
								"string"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Updated URL",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "prependHTTP",
				"namespace": "url",
				"aliases": [],
				"line": 300,
				"end_line": 306,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Prepends \"http://\" to a url, if it looks like something that is meant to be a TLD.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to test",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The updated URL",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "safeDecodeURI",
				"namespace": "url",
				"aliases": [],
				"line": 317,
				"end_line": 323,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "uri",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Safely decodes a URI with `decodeURI`. Returns the URI unmodified if",
					"long_description": "`decodeURI` throws an error.",
					"tags": [
						{
							"name": "param",
							"content": "URI to decode.",
							"types": [
								"string"
							],
							"variable": "uri"
						},
						{
							"name": "return",
							"content": "Decoded URI if possible.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "filterURLForDisplay",
				"namespace": "url",
				"aliases": [],
				"line": 333,
				"end_line": 342,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a URL for display.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Displayed URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/url/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isURL",
				"namespace": "url",
				"aliases": [],
				"line": 16,
				"end_line": 18,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether the given string looks like a URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The string to scrutinise.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Whether or not it looks like a URL.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getProtocol",
				"namespace": "url",
				"aliases": [],
				"line": 27,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the protocol part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The protocol part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidProtocol",
				"namespace": "url",
				"aliases": [],
				"line": 42,
				"end_line": 48,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "protocol",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Tests if a url protocol is valid.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The url protocol.",
							"types": [
								"string"
							],
							"variable": "protocol"
						},
						{
							"name": "return",
							"content": "True if the argument is a valid protocol (e.g. http:, tel:).",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAuthority",
				"namespace": "url",
				"aliases": [],
				"line": 57,
				"end_line": 63,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the authority part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The authority part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAuthority",
				"namespace": "url",
				"aliases": [],
				"line": 72,
				"end_line": 78,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "authority",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided authority.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string containing the URL authority.",
							"types": [
								"string"
							],
							"variable": "authority"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid authority.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPath",
				"namespace": "url",
				"aliases": [],
				"line": 87,
				"end_line": 93,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the path part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The path part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidPath",
				"namespace": "url",
				"aliases": [],
				"line": 102,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "path",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided path.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL path.",
							"types": [
								"string"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid path",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getQueryString",
				"namespace": "url",
				"aliases": [],
				"line": 117,
				"end_line": 123,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the query string part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The query string part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidQueryString",
				"namespace": "url",
				"aliases": [],
				"line": 132,
				"end_line": 138,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queryString",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided query string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The query string.",
							"types": [
								"string"
							],
							"variable": "queryString"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid query string.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFragment",
				"namespace": "url",
				"aliases": [],
				"line": 147,
				"end_line": 153,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the fragment part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The fragment part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidFragment",
				"namespace": "url",
				"aliases": [],
				"line": 162,
				"end_line": 168,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fragment",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided fragment.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The url fragment.",
							"types": [
								"string"
							],
							"variable": "fragment"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid fragment.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addQueryArgs",
				"namespace": "url",
				"aliases": [],
				"line": 181,
				"end_line": 202,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Appends arguments as querystring to the provided URL. If the URL already",
					"long_description": "includes query arguments, the arguments are merged with (and take precedent\nover) the existing set.",
					"tags": [
						{
							"name": "param",
							"content": "URL to which arguments should be appended. If omitted,\n                      only the resulting querystring is returned.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arguments to apply to URL.",
							"types": [
								"Object"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "URL with arguments applied.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getQueryArg",
				"namespace": "url",
				"aliases": [],
				"line": 212,
				"end_line": 216,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "arg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a single query argument of the url",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arg name",
							"types": [
								"string"
							],
							"variable": "arg"
						},
						{
							"name": "return",
							"content": "Query arg value.",
							"types": [
								"Array",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasQueryArg",
				"namespace": "url",
				"aliases": [],
				"line": 226,
				"end_line": 228,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "arg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether the URL contains a given query arg.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arg name",
							"types": [
								"string"
							],
							"variable": "arg"
						},
						{
							"name": "return",
							"content": "Whether or not the URL contains the query aeg.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeQueryArgs",
				"namespace": "url",
				"aliases": [],
				"line": 238,
				"end_line": 251,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes arguments from the query string of the url",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query Args",
							"types": [
								"string"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Updated URL",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "prependHTTP",
				"namespace": "url",
				"aliases": [],
				"line": 260,
				"end_line": 266,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Prepends \"http://\" to a url, if it looks like something that is meant to be a TLD.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to test",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The updated URL",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "safeDecodeURI",
				"namespace": "url",
				"aliases": [],
				"line": 276,
				"end_line": 282,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "uri",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Safely decodes a URI with `decodeURI`. Returns the URI unmodified if",
					"long_description": "`decodeURI` throws an error.",
					"tags": [
						{
							"name": "param",
							"content": "URI to decode.",
							"types": [
								"string"
							],
							"variable": "uri"
						},
						{
							"name": "return",
							"content": "Decoded URI if possible.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "filterURLForDisplay",
				"namespace": "url",
				"aliases": [],
				"line": 291,
				"end_line": 300,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a URL for display.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Displayed URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/url/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isURL",
				"namespace": "url",
				"aliases": [],
				"line": 17,
				"end_line": 19,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether the given string looks like a URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The string to scrutinise.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Whether or not it looks like a URL.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getProtocol",
				"namespace": "url",
				"aliases": [],
				"line": 28,
				"end_line": 33,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the protocol part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The protocol part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidProtocol",
				"namespace": "url",
				"aliases": [],
				"line": 42,
				"end_line": 47,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "protocol",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Tests if a url protocol is valid.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The url protocol.",
							"types": [
								"string"
							],
							"variable": "protocol"
						},
						{
							"name": "return",
							"content": "True if the argument is a valid protocol (e.g. http:, tel:).",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getAuthority",
				"namespace": "url",
				"aliases": [],
				"line": 56,
				"end_line": 61,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the authority part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The authority part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidAuthority",
				"namespace": "url",
				"aliases": [],
				"line": 70,
				"end_line": 75,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "authority",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided authority.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "A string containing the URL authority.",
							"types": [
								"string"
							],
							"variable": "authority"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid authority.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getPath",
				"namespace": "url",
				"aliases": [],
				"line": 84,
				"end_line": 89,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the path part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The path part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidPath",
				"namespace": "url",
				"aliases": [],
				"line": 98,
				"end_line": 103,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "path",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided path.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL path.",
							"types": [
								"string"
							],
							"variable": "path"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid path",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getQueryString",
				"namespace": "url",
				"aliases": [],
				"line": 112,
				"end_line": 117,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the query string part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The query string part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidQueryString",
				"namespace": "url",
				"aliases": [],
				"line": 126,
				"end_line": 131,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queryString",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided query string.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The query string.",
							"types": [
								"string"
							],
							"variable": "queryString"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid query string.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getFragment",
				"namespace": "url",
				"aliases": [],
				"line": 140,
				"end_line": 145,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns the fragment part of the URL.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The full URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The fragment part of the URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "isValidFragment",
				"namespace": "url",
				"aliases": [],
				"line": 154,
				"end_line": 159,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "fragment",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Checks for invalid characters within the provided fragment.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The url fragment.",
							"types": [
								"string"
							],
							"variable": "fragment"
						},
						{
							"name": "return",
							"content": "True if the argument contains a valid fragment.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "addQueryArgs",
				"namespace": "url",
				"aliases": [],
				"line": 172,
				"end_line": 194,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Appends arguments as querystring to the provided URL. If the URL already",
					"long_description": "includes query arguments, the arguments are merged with (and take precedent\nover) the existing set.",
					"tags": [
						{
							"name": "param",
							"content": "URL to which arguments should be appended. If omitted,\n                      only the resulting querystring is returned.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arguments to apply to URL.",
							"types": [
								"Object"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "URL with arguments applied.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "getQueryArg",
				"namespace": "url",
				"aliases": [],
				"line": 204,
				"end_line": 209,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "arg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a single query argument of the url",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arg name",
							"types": [
								"string"
							],
							"variable": "arg"
						},
						{
							"name": "return",
							"content": "Query arg value.",
							"types": [
								"Array",
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "hasQueryArg",
				"namespace": "url",
				"aliases": [],
				"line": 219,
				"end_line": 221,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "arg",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Determines whether the URL contains a given query arg.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query arg name",
							"types": [
								"string"
							],
							"variable": "arg"
						},
						{
							"name": "return",
							"content": "Whether or not the URL contains the query aeg.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "removeQueryArgs",
				"namespace": "url",
				"aliases": [],
				"line": 231,
				"end_line": 239,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					},
					{
						"name": "args",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes arguments from the query string of the url",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "URL",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "param",
							"content": "Query Args",
							"types": [
								"string"
							],
							"variable": "args"
						},
						{
							"name": "return",
							"content": "Updated URL",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "prependHTTP",
				"namespace": "url",
				"aliases": [],
				"line": 248,
				"end_line": 254,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Prepends \"http://\" to a url, if it looks like something that is meant to be a TLD.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The URL to test",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "The updated URL",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "safeDecodeURI",
				"namespace": "url",
				"aliases": [],
				"line": 264,
				"end_line": 270,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "uri",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Safely decodes a URI with `decodeURI`. Returns the URI unmodified if",
					"long_description": "`decodeURI` throws an error.",
					"tags": [
						{
							"name": "param",
							"content": "URI to decode.",
							"types": [
								"string"
							],
							"variable": "uri"
						},
						{
							"name": "return",
							"content": "Decoded URI if possible.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "filterURLForDisplay",
				"namespace": "url",
				"aliases": [],
				"line": 279,
				"end_line": 289,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "url",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns a URL for display.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Original URL.",
							"types": [
								"string"
							],
							"variable": "url"
						},
						{
							"name": "return",
							"content": "Displayed URL.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/if-viewport-matches.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifViewportMatches",
				"namespace": "viewport",
				"aliases": [],
				"line": 32,
				"end_line": 38,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders if",
					"long_description": "the viewport query is satisfied.",
					"tags": [
						{
							"name": "param",
							"content": "Viewport query.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setIsMatching",
				"namespace": "viewport",
				"aliases": [],
				"line": 17,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that viewport queries have been",
					"long_description": "updated. Values are specified as an object of breakpoint query keys where\nvalue represents whether query matches.",
					"tags": [
						{
							"name": "param",
							"content": "Breakpoint query matches.",
							"types": [
								"Object"
							],
							"variable": "values"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/store/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "reducer",
				"namespace": "viewport",
				"aliases": [],
				"line": 17,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the viewport state, as keys of breakpoint queries with",
					"long_description": "boolean value representing whether query is matched.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isViewportMatch",
				"namespace": "viewport",
				"aliases": [],
				"line": 24,
				"end_line": 31,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the viewport matches the given query, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Viewport state object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Query string. Includes operator and breakpoint name,\n                      space separated. Operator defaults to >=.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Whether viewport matches query.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build/with-viewport-match.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withViewportMatch",
				"namespace": "viewport",
				"aliases": [],
				"line": 33,
				"end_line": 39,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queries",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders with",
					"long_description": "the given prop names, where the value passed to the underlying component is\nthe result of the query assigned as the object's value.",
					"tags": [
						{
							"name": "param",
							"content": "Object of prop name to viewport query.",
							"types": [
								"Object"
							],
							"variable": "queries"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build-module/if-viewport-matches.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifViewportMatches",
				"namespace": "viewport",
				"aliases": [],
				"line": 21,
				"end_line": 27,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders if",
					"long_description": "the viewport query is satisfied.",
					"tags": [
						{
							"name": "param",
							"content": "Viewport query.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build-module/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setIsMatching",
				"namespace": "viewport",
				"aliases": [],
				"line": 10,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that viewport queries have been",
					"long_description": "updated. Values are specified as an object of breakpoint query keys where\nvalue represents whether query matches.",
					"tags": [
						{
							"name": "param",
							"content": "Breakpoint query matches.",
							"types": [
								"Object"
							],
							"variable": "values"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build-module/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "reducer",
				"namespace": "viewport",
				"aliases": [],
				"line": 10,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the viewport state, as keys of breakpoint queries with",
					"long_description": "boolean value representing whether query is matched.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build-module/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isViewportMatch",
				"namespace": "viewport",
				"aliases": [],
				"line": 17,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the viewport matches the given query, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Viewport state object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Query string. Includes operator and breakpoint name,\n                      space separated. Operator defaults to >=.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Whether viewport matches query.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/build-module/with-viewport-match.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withViewportMatch",
				"namespace": "viewport",
				"aliases": [],
				"line": 23,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queries",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders with",
					"long_description": "the given prop names, where the value passed to the underlying component is\nthe result of the query assigned as the object's value.",
					"tags": [
						{
							"name": "param",
							"content": "Object of prop name to viewport query.",
							"types": [
								"Object"
							],
							"variable": "queries"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/src/if-viewport-matches.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "ifViewportMatches",
				"namespace": "viewport",
				"aliases": [],
				"line": 21,
				"end_line": 29,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders if",
					"long_description": "the viewport query is satisfied.",
					"tags": [
						{
							"name": "param",
							"content": "Viewport query.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/src/store/actions.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "setIsMatching",
				"namespace": "viewport",
				"aliases": [],
				"line": 10,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "values",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Returns an action object used in signalling that viewport queries have been",
					"long_description": "updated. Values are specified as an object of breakpoint query keys where\nvalue represents whether query matches.",
					"tags": [
						{
							"name": "param",
							"content": "Breakpoint query matches.",
							"types": [
								"Object"
							],
							"variable": "values"
						},
						{
							"name": "return",
							"content": "Action object.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/src/store/reducer.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "reducer",
				"namespace": "viewport",
				"aliases": [],
				"line": 10,
				"end_line": 17,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "action",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Reducer returning the viewport state, as keys of breakpoint queries with",
					"long_description": "boolean value representing whether query is matched.",
					"tags": [
						{
							"name": "param",
							"content": "Current state.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Dispatched action.",
							"types": [
								"Object"
							],
							"variable": "action"
						},
						{
							"name": "return",
							"content": "Updated state.",
							"types": [
								"Object"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/src/store/selectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "isViewportMatch",
				"namespace": "viewport",
				"aliases": [],
				"line": 17,
				"end_line": 24,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "state",
						"default": null,
						"type": "Object"
					},
					{
						"name": "query",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Returns true if the viewport matches the given query, or false otherwise.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "Viewport state object.",
							"types": [
								"Object"
							],
							"variable": "state"
						},
						{
							"name": "param",
							"content": "Query string. Includes operator and breakpoint name,\n                      space separated. Operator defaults to >=.",
							"types": [
								"string"
							],
							"variable": "query"
						},
						{
							"name": "return",
							"content": "Whether viewport matches query.",
							"types": [
								"boolean"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/viewport/src/with-viewport-match.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "withViewportMatch",
				"namespace": "viewport",
				"aliases": [],
				"line": 23,
				"end_line": 30,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "queries",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Higher-order component creator, creating a new component which renders with",
					"long_description": "the given prop names, where the value passed to the underlying component is\nthe result of the query assigned as the object's value.",
					"tags": [
						{
							"name": "param",
							"content": "Object of prop name to viewport query.",
							"types": [
								"Object"
							],
							"variable": "queries"
						},
						{
							"name": "return",
							"content": "Higher-order component.",
							"types": [
								"function"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadSettings",
				"namespace": "wordcount",
				"aliases": [],
				"line": 40,
				"end_line": 55,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "userSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Private function to manage the settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The type of count to be done.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Custom settings for the count.",
							"types": [
								"Object"
							],
							"variable": "userSettings"
						},
						{
							"name": "return",
							"content": "The combined settings object to be used.",
							"types": [
								"void",
								"Object",
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matchWords",
				"namespace": "wordcount",
				"aliases": [],
				"line": 67,
				"end_line": 71,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "regex",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Match the regex for the type 'words'",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The regular expression pattern being matched",
							"types": [
								"string"
							],
							"variable": "regex"
						},
						{
							"name": "param",
							"content": "Settings object containing regular expressions for each strip function",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The matched string.",
							"types": [
								"Array",
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matchCharacters",
				"namespace": "wordcount",
				"aliases": [],
				"line": 83,
				"end_line": 87,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "regex",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Match the regex for either 'characters_excluding_spaces' or 'characters_including_spaces'",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The regular expression pattern being matched",
							"types": [
								"string"
							],
							"variable": "regex"
						},
						{
							"name": "param",
							"content": "Settings object containing regular expressions for each strip function",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The matched string.",
							"types": [
								"Array",
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "count",
				"namespace": "wordcount",
				"aliases": [],
				"line": 99,
				"end_line": 110,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "String"
					},
					{
						"name": "type",
						"default": null,
						"type": "String"
					},
					{
						"name": "userSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Count some words.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"String"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The type of count. Accepts ;words', 'characters_excluding_spaces', or 'characters_including_spaces'.",
							"types": [
								"String"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Custom settings object.",
							"types": [
								"Object"
							],
							"variable": "userSettings"
						},
						{
							"name": "return",
							"content": "The word or character count.",
							"types": [
								"Number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripConnectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with spaces.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripHTMLComments.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripHTMLEntities.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripRemovables.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripShortcodes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with a new line.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripSpaces.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with spaces.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/stripTags.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 20,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with new line",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/transposeAstralsToCountableChar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with character.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build/transposeHTMLEntitiesToCountableChars.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "_default",
				"namespace": "wordcount",
				"aliases": [],
				"line": 16,
				"end_line": 22,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with a single character.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadSettings",
				"namespace": "wordcount",
				"aliases": [],
				"line": 21,
				"end_line": 36,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "userSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Private function to manage the settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The type of count to be done.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Custom settings for the count.",
							"types": [
								"Object"
							],
							"variable": "userSettings"
						},
						{
							"name": "return",
							"content": "The combined settings object to be used.",
							"types": [
								"void",
								"Object",
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matchWords",
				"namespace": "wordcount",
				"aliases": [],
				"line": 48,
				"end_line": 52,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "regex",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Match the regex for the type 'words'",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The regular expression pattern being matched",
							"types": [
								"string"
							],
							"variable": "regex"
						},
						{
							"name": "param",
							"content": "Settings object containing regular expressions for each strip function",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The matched string.",
							"types": [
								"Array",
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matchCharacters",
				"namespace": "wordcount",
				"aliases": [],
				"line": 64,
				"end_line": 68,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "regex",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Match the regex for either 'characters_excluding_spaces' or 'characters_including_spaces'",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The regular expression pattern being matched",
							"types": [
								"string"
							],
							"variable": "regex"
						},
						{
							"name": "param",
							"content": "Settings object containing regular expressions for each strip function",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The matched string.",
							"types": [
								"Array",
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "count",
				"namespace": "wordcount",
				"aliases": [],
				"line": 80,
				"end_line": 91,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "String"
					},
					{
						"name": "type",
						"default": null,
						"type": "String"
					},
					{
						"name": "userSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Count some words.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"String"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The type of count. Accepts ;words', 'characters_excluding_spaces', or 'characters_including_spaces'.",
							"types": [
								"String"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Custom settings object.",
							"types": [
								"Object"
							],
							"variable": "userSettings"
						},
						{
							"name": "return",
							"content": "The word or character count.",
							"types": [
								"Number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripConnectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with spaces.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripHTMLComments.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripHTMLEntities.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripRemovables.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripShortcodes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with a new line.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripSpaces.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with spaces.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/stripTags.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with new line",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/transposeAstralsToCountableChar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with character.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/build-module/transposeHTMLEntitiesToCountableChars.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 15,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with a single character.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/index.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "loadSettings",
				"namespace": "wordcount",
				"aliases": [],
				"line": 21,
				"end_line": 37,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "type",
						"default": null,
						"type": "string"
					},
					{
						"name": "userSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Private function to manage the settings.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The type of count to be done.",
							"types": [
								"string"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Custom settings for the count.",
							"types": [
								"Object"
							],
							"variable": "userSettings"
						},
						{
							"name": "return",
							"content": "The combined settings object to be used.",
							"types": [
								"void",
								"Object",
								"*"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matchWords",
				"namespace": "wordcount",
				"aliases": [],
				"line": 48,
				"end_line": 60,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "regex",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Match the regex for the type 'words'",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The regular expression pattern being matched",
							"types": [
								"string"
							],
							"variable": "regex"
						},
						{
							"name": "param",
							"content": "Settings object containing regular expressions for each strip function",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The matched string.",
							"types": [
								"Array",
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "matchCharacters",
				"namespace": "wordcount",
				"aliases": [],
				"line": 71,
				"end_line": 82,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "string"
					},
					{
						"name": "regex",
						"default": null,
						"type": "string"
					},
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Match the regex for either 'characters_excluding_spaces' or 'characters_including_spaces'",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The regular expression pattern being matched",
							"types": [
								"string"
							],
							"variable": "regex"
						},
						{
							"name": "param",
							"content": "Settings object containing regular expressions for each strip function",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "return",
							"content": "The matched string.",
							"types": [
								"Array",
								"Object"
							]
						}
					]
				},
				"hooks": []
			},
			{
				"name": "count",
				"namespace": "wordcount",
				"aliases": [],
				"line": 94,
				"end_line": 108,
				"final": false,
				"abstract": false,
				"static": false,
				"visibility": "public",
				"arguments": [
					{
						"name": "text",
						"default": null,
						"type": "String"
					},
					{
						"name": "type",
						"default": null,
						"type": "String"
					},
					{
						"name": "userSettings",
						"default": null,
						"type": "Object"
					}
				],
				"doc": {
					"description": "Count some words.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The text being processed",
							"types": [
								"String"
							],
							"variable": "text"
						},
						{
							"name": "param",
							"content": "The type of count. Accepts ;words', 'characters_excluding_spaces', or 'characters_including_spaces'.",
							"types": [
								"String"
							],
							"variable": "type"
						},
						{
							"name": "param",
							"content": "Custom settings object.",
							"types": [
								"Object"
							],
							"variable": "userSettings"
						},
						{
							"name": "return",
							"content": "The word or character count.",
							"types": [
								"Number"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripConnectors.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with spaces.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripHTMLComments.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripHTMLEntities.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripRemovables.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Removes items matched in the regex.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripShortcodes.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with a new line.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripSpaces.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with spaces.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/stripTags.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 13,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with new line",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/transposeAstralsToCountableChar.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with character.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	},
	{
		"file": {
			"tags": []
		},
		"path": "packages/wordcount/src/transposeHTMLEntitiesToCountableChars.js",
		"root": "/home/andres/src/gutenberg",
		"classes": [],
		"functions": [
			{
				"name": "exports",
				"namespace": "wordcount\\module",
				"aliases": [],
				"line": 9,
				"end_line": 14,
				"final": false,
				"abstract": false,
				"static": true,
				"visibility": "public",
				"arguments": [
					{
						"name": "settings",
						"default": null,
						"type": "Object"
					},
					{
						"name": "text",
						"default": null,
						"type": "string"
					}
				],
				"doc": {
					"description": "Replaces items matched in the regex with a single character.",
					"long_description": "",
					"tags": [
						{
							"name": "param",
							"content": "The main settings object containing regular expressions",
							"types": [
								"Object"
							],
							"variable": "settings"
						},
						{
							"name": "param",
							"content": "The string being counted.",
							"types": [
								"string"
							],
							"variable": "text"
						},
						{
							"name": "return",
							"content": "The manipulated text.",
							"types": [
								"string"
							]
						}
					]
				},
				"hooks": []
			}
		],
		"constants": [],
		"hooks": []
	}
]