name: Code Validation

on:
  pull_request:
  push:
    branches: [master]

jobs:
  check:
    name: Static Checks

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      # A "full" install is executed, since `npm ci` does not always exit
      # with an error status code if the lock file is inaccurate.
      #
      # See: https://github.com/WordPress/gutenberg/issues/16157
      run: |
        npm install
        npm run build

    - name: Lint JavaScript and Styles
      run: npm run lint

    - name: Lint ES5 built files (IE11)
      run: npx eslint --parser-options=ecmaVersion:5 --no-eslintrc --no-ignore ./build/**/*.js

    - name: Type checking
      run: npm run build:package-types

    - name: Build artifacts
      run: npm run check-local-changes

    - name: License compatibility
      run: npm run check-licenses

  unit-js:
    name: JavaScript Unit Tests

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      # It's not necessary to run the full build, since Jest can interpret
      # source files with `babel-jest`. Some packages have their own custom
      # build tasks, however. These must be run.
      run: |
        npm ci
        npx lerna run build

    - name: Running the tests
      run: npm run test-unit -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

    - name: Running the date tests
      run: npm run test-unit:date -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

  unit-php:
    name: PHP Unit Tests

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      run: |
        npm ci
        npm run build

    - name: Install WordPress
      run: |
        chmod -R 767 ./ # TODO: Possibly integrate in wp-env
        npm run wp-env start

    - name: Running lint check
      run: npm run lint-php

    - name: Running single site unit tests
      run: npm run test-unit-php
      if: ${{ success() || failure() }}
    
    - name: Running multisite unit tests
      run: npm run test-unit-php-multisite
      if: ${{ success() || failure() }}


  mobile-unit-js:
    name: Mobile JavaScript Unit Tests

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      # It's not necessary to run the full build, since Jest can interpret
      # source files with `babel-jest`. Some packages have their own custom
      # build tasks, however. These must be run.
      run: |
        npm ci
        npx lerna run build

    - name: Running the tests
      run: npm run test-unit:native -- --ci --maxWorkers=2 --cacheDirectory="$HOME/.jest-cache"

  e2e:
    name: End 2 End Tests - Part ${{ matrix.part }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        part: [1, 2, 3, 4]

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: Npm install and build
      run: |
        npm ci
        FORCE_REDUCED_MOTION=true npm run build

    - name: Install WordPress
      run: |
        chmod -R 767 ./ # TODO: Possibly integrate in wp-env
        npm run wp-env start

    - name: Running the tests
      run: |
        $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --listTests > ~/.jest-e2e-tests
        $( npm bin )/wp-scripts test-e2e --config=./packages/e2e-tests/jest.config.js --cacheDirectory="$HOME/.jest-cache" --runTestsByPath $( awk 'NR % 4 == ${{ matrix.part }} - 1' < ~/.jest-e2e-tests )

    - name: Archive debug artifacts (screenshots, HTML snapshots)
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: failures-artifacts
        path: artifacts

  create-block:
    name: Create Block Test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js 14.x
      uses: actions/setup-node@v1
      with:
        node-version: 14.x

    - name: npm install, build, format and lint
      run: |
        npm ci
        npm run test:create-block
      env:
        CI: true

  test-android-app:
    name: Test Android App
    runs-on: macos-latest
    strategy:
      matrix:
        native-test-name: [
          gutenberg-editor-gallery
        ]

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - run: npm ci

    - name: Restore Gradle cache
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: ${{ runner.os }}-gradle

    - uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 28
        profile: pixel_xl
        script: npm run native test:e2e:android:local ${{ matrix.native-test-name }}

    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: android-screen-recordings
        path: packages/react-native-editor/android-screen-recordings

  test-ios-app:
    name: Test iOS App
    runs-on: macos-latest
    strategy:
      matrix:
        native-test-name: [
          gutenberg-editor-gallery
        ]

    steps:
    - uses: actions/checkout@v2

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - run: npm ci

    - name: Prepare build cache key
      run: find package-lock.json packages/react-native-editor/ios packages/react-native-aztec/ios packages/react-native-bridge/ios -type f -print0 | sort -z | xargs -0 shasum | tee ios-checksums.txt

    - name: Restore build cache
      uses: actions/cache@v2
      with:
        path: packages/react-native-editor/ios/build/GutenbergDemo/Build/Products/Release-iphonesimulator/GutenbergDemo.app
        key: ${{ runner.os }}-ios-build-${{ hashFiles('ios-checksums.txt') }}

    - name: Restore pods cache
      uses: actions/cache@v2
      with:
        path: |
          packages/react-native-editor/ios/Pods
          ~/Library/Caches/CocoaPods
          ~/.cocoapods/repos/trunk
          packages/react-native-editor/ios/vendor
        key: ${{ runner.os }}-pods-${{ hashFiles('packages/react-native-editor/ios/Gemfile.lock') }}-${{ hashFiles('packages/react-native-editor/ios/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-pods-${{ hashFiles('packages/react-native-editor/ios/Gemfile.lock') }}-${{ hashFiles('packages/react-native-editor/ios/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}
          ${{ runner.os }}-pods-${{ hashFiles('packages/react-native-editor/ios/Gemfile.lock') }}-${{ hashFiles('packages/react-native-editor/ios/Podfile.lock') }}-
          ${{ runner.os }}-pods-${{ hashFiles('packages/react-native-editor/ios/Gemfile.lock') }}-
          ${{ runner.os }}-pods-

    - name: Bundle iOS
      run: npm run native test:e2e:bundle:ios

    - name: Switch Xcode Version
      run: sudo xcode-select --switch /Applications/Xcode_12.app

    - name: Build (if needed)
      run: test -e packages/react-native-editor/ios/build/GutenbergDemo/Build/Products/Release-iphonesimulator/GutenbergDemo.app/gutenberg || npm run native test:e2e:build-app:ios

    - name: Run iOS Device Tests
      run: TEST_RN_PLATFORM=ios npm run native device-tests:local  ${{ matrix.native-test-name }}

    - name: Prepare build cache
      run: rm packages/react-native-editor/ios/build/GutenbergDemo/Build/Products/Release-iphonesimulator/GutenbergDemo.app/main.jsbundle

    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ios-screen-recordings
        path: packages/react-native-editor/ios-screen-recordings

  bundle-size:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - uses: preactjs/compressed-size-action@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        pattern: "{build/**/*.js,build/**/*.css}"
