diff --git a/lib/blocks.php b/lib/blocks.php
index f4f5a6536c..d1428770e3 100644
--- a/lib/blocks.php
+++ b/lib/blocks.php
@@ -49,42 +49,45 @@ function gutenberg_reregister_core_block_types() {
 			),
 			'block_names'   => array_merge(
 				array(
-					'archives.php'                => 'core/archives',
-					'block.php'                   => 'core/block',
-					'calendar.php'                => 'core/calendar',
-					'categories.php'              => 'core/categories',
-					'cover.php'                   => 'core/cover',
-					'latest-comments.php'         => 'core/latest-comments',
-					'latest-posts.php'            => 'core/latest-posts',
-					'navigation.php'              => 'core/navigation',
-					'navigation-link.php'         => 'core/navigation-link',
-					'rss.php'                     => 'core/rss',
-					'search.php'                  => 'core/search',
-					'shortcode.php'               => 'core/shortcode',
-					'social-link.php'             => 'core/social-link',
-					'tag-cloud.php'               => 'core/tag-cloud',
-					'post-author.php'             => 'core/post-author',
-					'post-comment.php'            => 'core/post-comment',
-					'post-comment-author.php'     => 'core/post-comment-author',
-					'post-comment-content.php'    => 'core/post-comment-content',
-					'post-comment-date.php'       => 'core/post-comment-date',
-					'post-comments.php'           => 'core/post-comments',
-					'post-comments-count.php'     => 'core/post-comments-count',
-					'post-comments-form.php'      => 'core/post-comments-form',
-					'post-content.php'            => 'core/post-content',
-					'post-date.php'               => 'core/post-date',
-					'post-excerpt.php'            => 'core/post-excerpt',
-					'post-featured-image.php'     => 'core/post-featured-image',
-					'post-hierarchical-terms.php' => 'core/post-hierarchical-terms',
-					'post-tags.php'               => 'core/post-tags',
-					'post-title.php'              => 'core/post-title',
-					'query.php'                   => 'core/query',
-					'query-loop.php'              => 'core/query-loop',
-					'query-pagination.php'        => 'core/query-pagination',
-					'site-logo.php'               => 'core/site-logo',
-					'site-tagline.php'            => 'core/site-tagline',
-					'site-title.php'              => 'core/site-title',
-					'template-part.php'           => 'core/template-part',
+					'archives.php'                  => 'core/archives',
+					'block.php'                     => 'core/block',
+					'calendar.php'                  => 'core/calendar',
+					'categories.php'                => 'core/categories',
+					'cover.php'                     => 'core/cover',
+					'latest-comments.php'           => 'core/latest-comments',
+					'latest-posts.php'              => 'core/latest-posts',
+					'navigation.php'                => 'core/navigation',
+					'navigation-link.php'           => 'core/navigation-link',
+					'rss.php'                       => 'core/rss',
+					'search.php'                    => 'core/search',
+					'shortcode.php'                 => 'core/shortcode',
+					'social-link.php'               => 'core/social-link',
+					'tag-cloud.php'                 => 'core/tag-cloud',
+					'post-author.php'               => 'core/post-author',
+					'post-comment.php'              => 'core/post-comment',
+					'post-comment-author.php'       => 'core/post-comment-author',
+					'post-comment-content.php'      => 'core/post-comment-content',
+					'post-comment-date.php'         => 'core/post-comment-date',
+					'post-comments.php'             => 'core/post-comments',
+					'post-comments-count.php'       => 'core/post-comments-count',
+					'post-comments-form.php'        => 'core/post-comments-form',
+					'post-content.php'              => 'core/post-content',
+					'post-date.php'                 => 'core/post-date',
+					'post-excerpt.php'              => 'core/post-excerpt',
+					'post-featured-image.php'       => 'core/post-featured-image',
+					'post-hierarchical-terms.php'   => 'core/post-hierarchical-terms',
+					'post-tags.php'                 => 'core/post-tags',
+					'post-title.php'                => 'core/post-title',
+					'query.php'                     => 'core/query',
+					'query-loop.php'                => 'core/query-loop',
+					'query-pagination.php'          => 'core/query-pagination',
+					'query-pagination-next.php'     => 'core/query-pagination-next',
+					'query-pagination-numbers.php'  => 'core/query-pagination-numbers',
+					'query-pagination-previous.php' => 'core/query-pagination-previous',
+					'site-logo.php'                 => 'core/site-logo',
+					'site-tagline.php'              => 'core/site-tagline',
+					'site-title.php'                => 'core/site-title',
+					'template-part.php'             => 'core/template-part',
 				)
 			),
 		),
@@ -164,29 +167,27 @@ function gutenberg_register_core_block_styles( $block_name ) {
 
 	$block_name = str_replace( 'core/', '', $block_name );
 
-	$style_path        = is_rtl()
-		? "build/block-library/blocks/$block_name/style-rtl.css"
-		: "build/block-library/blocks/$block_name/style.css";
-	$editor_style_path = is_rtl()
-		? "build/block-library/blocks/$block_name/style-editor-rtl.css"
-		: "build/block-library/blocks/$block_name/style-editor.css";
+	$style_path        = "build/block-library/blocks/$block_name/style.css";
+	$editor_style_path = "build/block-library/blocks/$block_name/style-editor.css";
 
 	if ( file_exists( gutenberg_dir_path() . $style_path ) ) {
 		wp_register_style(
-			'wp-block-' . $block_name,
+			"wp-block-{$block_name}",
 			gutenberg_url( $style_path ),
 			array(),
 			filemtime( gutenberg_dir_path() . $style_path )
 		);
+		wp_style_add_data( "wp-block-{$block_name}", 'rtl', 'replace' );
 	}
 
 	if ( file_exists( gutenberg_dir_path() . $editor_style_path ) ) {
 		wp_register_style(
-			'wp-block-' . $block_name . '-editor',
+			"wp-block-{$block_name}-editor",
 			gutenberg_url( $editor_style_path ),
 			array(),
 			filemtime( gutenberg_dir_path() . $editor_style_path )
 		);
+		wp_style_add_data( "wp-block-{$block_name}-editor", 'rtl', 'replace' );
 	}
 }
 
diff --git a/lib/class-wp-rest-pattern-directory-controller.php b/lib/class-wp-rest-pattern-directory-controller.php
new file mode 100644
index 0000000000..2d86056335
--- /dev/null
+++ b/lib/class-wp-rest-pattern-directory-controller.php
@@ -0,0 +1,288 @@
+<?php
+/**
+ * Start: Include for phase 2
+ * Block Pattern Directory REST API: WP_REST_Pattern_Directory_Controller class
+ *
+ * @since   5.8.0
+ * @package gutenberg
+ */
+
+/**
+ * Controller which provides REST endpoint for block patterns.
+ *
+ * This simply proxies the endpoint at http://api.wordpress.org/patterns/1.0/. That isn't necessary for
+ * functionality, but is desired for privacy. It prevents api.wordpress.org from knowing the user's IP address.
+ *
+ * This class can be removed when plugin support requires WordPress 5.8.0+.
+ *
+ * @since 5.8.0
+ *
+ * @see WP_REST_Controller
+ */
+class WP_REST_Pattern_Directory_Controller extends WP_REST_Controller {
+	/**
+	 * Constructs the controller.
+	 */
+	public function __construct() {
+		$this->namespace = '__experimental';
+		$this->rest_base = 'pattern-directory';
+	}
+
+	/**
+	 * Registers the necessary REST API routes.
+	 */
+	public function register_routes() {
+		register_rest_route(
+			$this->namespace,
+			'/' . $this->rest_base . '/patterns',
+			array(
+				array(
+					'methods'             => WP_REST_Server::READABLE,
+					'callback'            => array( $this, 'get_items' ),
+					'permission_callback' => array( $this, 'get_items_permissions_check' ),
+					'args'                => $this->get_collection_params(),
+				),
+				'schema' => array( $this, 'get_public_item_schema' ),
+			)
+		);
+	}
+
+	/**
+	 * Checks whether a given request has permission to view the local pattern directory.
+	 *
+	 * @since 5.8.0
+	 *
+	 * @param WP_REST_Request $request Full details about the request.
+	 *
+	 * @return WP_Error|bool True if the request has permission, WP_Error object otherwise.
+	 */
+	public function get_items_permissions_check( $request ) { // phpcs:ignore VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable -- Method must match signature of parent class.
+		if ( current_user_can( 'edit_posts' ) ) {
+			return true;
+		}
+
+		foreach ( get_post_types( array( 'show_in_rest' => true ), 'objects' ) as $post_type ) {
+			if ( current_user_can( $post_type->cap->edit_posts ) ) {
+				return true;
+			}
+		}
+
+		return new WP_Error(
+			'rest_pattern_directory_cannot_view',
+			__( 'Sorry, you are not allowed to browse the local block pattern directory.', 'gutenberg' ),
+			array( 'status' => rest_authorization_required_code() )
+		);
+	}
+
+	/**
+	 * Search and retrieve block patterns metadata
+	 *
+	 * @since 5.8.0
+	 *
+	 * @param WP_REST_Request $request Full details about the request.
+	 *
+	 * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
+	 */
+	public function get_items( $request ) {
+		$query_args   = array();
+		$category_ids = $request['category'];
+		$search_term  = $request['search'];
+
+		if ( $category_ids ) {
+			$query_args['pattern-categories'] = $category_ids;
+		}
+
+		if ( $search_term ) {
+			$query_args['search'] = $search_term;
+		}
+
+		$api_url = add_query_arg(
+			array_map( 'rawurlencode', $query_args ),
+			'http://api.wordpress.org/patterns/1.0/'
+		);
+
+		if ( wp_http_supports( array( 'ssl' ) ) ) {
+			$api_url = set_url_scheme( $api_url, 'https' );
+		}
+
+		$wporg_response = wp_remote_get( $api_url );
+		$raw_patterns   = json_decode( wp_remote_retrieve_body( $wporg_response ) );
+
+		if ( is_wp_error( $wporg_response ) ) {
+			$wporg_response->add_data( array( 'status' => 500 ) );
+
+			return $wporg_response;
+		}
+
+		// Make sure w.org returned valid data.
+		if ( ! is_array( $raw_patterns ) ) {
+			return new WP_Error(
+				'pattern_api_failed',
+				sprintf(
+				/* translators: %s: Support forums URL. */
+					__( 'An unexpected error occurred. Something may be wrong with WordPress.org or this server&#8217;s configuration. If you continue to have problems, please try the <a href="%s">support forums</a>.', 'gutenberg' ),
+					__( 'https://wordpress.org/support/forums/', 'gutenberg' )
+				),
+				array(
+					'status'   => 500,
+					'response' => wp_remote_retrieve_body( $wporg_response ),
+				)
+			);
+		}
+
+		$response = array();
+
+		if ( $raw_patterns ) {
+			foreach ( $raw_patterns as $pattern ) {
+				$response[] = $this->prepare_response_for_collection(
+					$this->prepare_item_for_response( $pattern, $request )
+				);
+			}
+		}
+
+		return new WP_REST_Response( $response );
+	}
+
+	/**
+	 * Prepare a raw pattern before it's output in an API response.
+	 *
+	 * @since 5.8.0
+	 *
+	 * @param object          $raw_pattern A pattern from api.wordpress.org, before any changes.
+	 * @param WP_REST_Request $request     Request object.
+	 *
+	 * @return WP_REST_Response
+	 */
+	public function prepare_item_for_response( $raw_pattern, $request ) { // phpcs:ignore VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable -- Method must match signature of parent class.
+		$prepared_pattern = array(
+			'id'             => absint( $raw_pattern->id ),
+			'title'          => sanitize_text_field( $raw_pattern->title->rendered ),
+			'content'        => wp_kses_post( $raw_pattern->content->rendered ),
+			'categories'     => array_map( 'sanitize_title', $raw_pattern->category_slugs ),
+			'keywords'       => array_map( 'sanitize_title', $raw_pattern->keyword_slugs ),
+			'description'    => sanitize_text_field( $raw_pattern->meta->wpop_description ),
+			'viewport_width' => absint( $raw_pattern->meta->wpop_viewport_width ),
+
+		);
+
+		$prepared_pattern = $this->add_additional_fields_to_object( $prepared_pattern, $request );
+
+		$response = new WP_REST_Response( $prepared_pattern );
+
+		/**
+		 * Filters the REST API response for a pattern.
+		 *
+		 * @since 5.8.0
+		 *
+		 * @param WP_REST_Response $response    The response object.
+		 * @param object           $raw_pattern The unprepared pattern.
+		 * @param WP_REST_Request  $request     The request object.
+		 */
+		return apply_filters( 'rest_prepare_application_password', $response, $raw_pattern, $request );
+	}
+
+	/**
+	 * Retrieves the pattern's schema, conforming to JSON Schema.
+	 *
+	 * @since 5.8.0
+	 *
+	 * @return array Item schema data.
+	 */
+	public function get_item_schema() {
+		if ( $this->schema ) {
+			return $this->add_additional_fields_schema( $this->schema );
+		}
+
+		$this->schema = array(
+			'$schema'    => 'http://json-schema.org/draft-04/schema#',
+			'title'      => 'pattern-directory-item',
+			'type'       => 'object',
+			'properties' => array(
+				'id'             => array(
+					'description' => __( 'The pattern ID.', 'gutenberg' ),
+					'type'        => 'integer',
+					'minimum'     => 1,
+					'context'     => array( 'view', 'embed' ),
+				),
+
+				'title'          => array(
+					'description' => __( 'The pattern title, in human readable format.', 'gutenberg' ),
+					'type'        => 'string',
+					'minLength'   => 1,
+					'context'     => array( 'view', 'embed' ),
+				),
+
+				'content'        => array(
+					'description' => __( 'The pattern content.', 'gutenberg' ),
+					'type'        => 'string',
+					'minLength'   => 1,
+					'context'     => array( 'view', 'embed' ),
+				),
+
+				'categories'     => array(
+					'description' => __( "The pattern's category slugs.", 'gutenberg' ),
+					'type'        => 'array',
+					'uniqueItems' => true,
+					'items'       => array( 'type' => 'string' ),
+					'context'     => array( 'view', 'embed' ),
+				),
+
+				'keywords'       => array(
+					'description' => __( "The pattern's keyword slugs.", 'gutenberg' ),
+					'type'        => 'array',
+					'uniqueItems' => true,
+					'items'       => array( 'type' => 'string' ),
+					'context'     => array( 'view', 'embed' ),
+				),
+
+				'description'    => array(
+					'description' => __( 'A description of the pattern.', 'gutenberg' ),
+					'type'        => 'string',
+					'minLength'   => 1,
+					'context'     => array( 'view', 'embed' ),
+				),
+
+				'viewport_width' => array(
+					'description' => __( 'The preferred width of the viewport when previewing a pattern, in pixels.', 'gutenberg' ),
+					'type'        => 'integer',
+					'context'     => array( 'view', 'embed' ),
+				),
+			),
+		);
+
+		return $this->add_additional_fields_schema( $this->schema );
+	}
+
+	/**
+	 * Retrieves the search params for the patterns collection.
+	 *
+	 * @since 5.5.0
+	 *
+	 * @return array Collection parameters.
+	 */
+	public function get_collection_params() {
+		$query_params = parent::get_collection_params();
+
+		// Pagination is not supported.
+		unset( $query_params['page'] );
+		unset( $query_params['per_page'] );
+
+		$query_params['search']['minLength'] = 1;
+		$query_params['context']['default']  = 'view';
+
+		$query_params['category'] = array(
+			'description'       => __( 'Limit results to those matching a category ID.', 'gutenberg' ),
+			'type'              => 'integer',
+			'minimum'           => 1,
+		);
+
+		/**
+		 * Filter collection parameters for the pattern directory controller.
+		 *
+		 * @since 5.5.0
+		 *
+		 * @param array $query_params JSON Schema-formatted collection parameters.
+		 */
+		return apply_filters( 'rest_pattern_directory_collection_params', $query_params );
+	}
+}
diff --git a/lib/class-wp-theme-json-resolver.php b/lib/class-wp-theme-json-resolver.php
index 67f5f7e12c..d54ae84c8d 100644
--- a/lib/class-wp-theme-json-resolver.php
+++ b/lib/class-wp-theme-json-resolver.php
@@ -76,6 +76,32 @@ class WP_Theme_JSON_Resolver {
 	 * containing the a translatable path from theme.json and an array
 	 * of properties that are translatable.
 	 *
+	 * For example, given this input:
+	 *
+	 * {
+	 *   "settings": {
+	 *     "*": {
+	 *       "typography": {
+	 *         "fontSizes": [ "name" ],
+	 *         "fontStyles": [ "name" ]
+	 *       }
+	 *     }
+	 *   }
+	 * }
+	 *
+	 * will return this output:
+	 *
+	 * [
+	 *   0 => [
+	 *     'path' => [ 'settings', '*', 'typography', 'fontSizes' ],
+	 *     'translatable_keys' => [ 'name' ]
+	 *   ],
+	 *   1 => [
+	 *     'path' => [ 'settings', '*', 'typography', 'fontStyles' ],
+	 *     'translatable_keys' => [ 'name']
+	 *   ]
+	 * ]
+	 *
 	 * @param array $file_structure_partial A part of a theme.json i18n tree.
 	 * @param array $current_path           An array with a path on the theme.json i18n tree.
 	 *
@@ -110,7 +136,6 @@ class WP_Theme_JSON_Resolver {
 		if ( null === $theme_json_i18n ) {
 			$file_structure  = self::get_from_file( __DIR__ . '/experimental-i18n-theme.json' );
 			$theme_json_i18n = self::theme_json_i18_file_structure_to_preset_paths( $file_structure );
-
 		}
 		return $theme_json_i18n;
 	}
@@ -123,29 +148,37 @@ class WP_Theme_JSON_Resolver {
 	 *                                     Default 'default'.
 	 */
 	private static function translate_presets( &$theme_json_structure, $domain = 'default' ) {
+		if ( ! isset( $theme_json_structure['settings'] ) ) {
+			return;
+		}
+
 		$preset_to_translate = self::get_presets_to_translate();
-		foreach ( $theme_json_structure as &$context_value ) {
-			if ( empty( $context_value ) ) {
+		foreach ( $theme_json_structure['settings'] as &$settings ) {
+			if ( empty( $settings ) ) {
 				continue;
 			}
+
 			foreach ( $preset_to_translate as $preset ) {
-				$path               = $preset['path'];
+				$path               = array_slice( $preset['path'], 2 );
 				$translatable_keys  = $preset['translatable_keys'];
-				$array_to_translate = gutenberg_experimental_get( $context_value, $path, null );
+				$array_to_translate = gutenberg_experimental_get( $settings, $path, null );
 				if ( null === $array_to_translate ) {
 					continue;
 				}
+
 				foreach ( $array_to_translate as &$item_to_translate ) {
 					foreach ( $translatable_keys as $translatable_key ) {
 						if ( empty( $item_to_translate[ $translatable_key ] ) ) {
 							continue;
 						}
+
 						// phpcs:ignore WordPress.WP.I18n.LowLevelTranslationFunction,WordPress.WP.I18n.NonSingularStringLiteralText,WordPress.WP.I18n.NonSingularStringLiteralDomain
 						$item_to_translate[ $translatable_key ] = translate( $item_to_translate[ $translatable_key ], $domain );
 						// phpcs:enable
 					}
 				}
-				gutenberg_experimental_set( $context_value, $path, $array_to_translate );
+
+				gutenberg_experimental_set( $settings, $path, $array_to_translate );
 			}
 		}
 	}
@@ -160,7 +193,8 @@ class WP_Theme_JSON_Resolver {
 			return self::$core;
 		}
 
-		$config = self::get_from_file( __DIR__ . '/experimental-default-theme.json' );
+		$all_blocks = WP_Theme_JSON::ALL_BLOCKS_NAME;
+		$config     = self::get_from_file( __DIR__ . '/experimental-default-theme.json' );
 		self::translate_presets( $config );
 
 		// Start i18n logic to remove when JSON i18 strings are extracted.
@@ -178,8 +212,8 @@ class WP_Theme_JSON_Resolver {
 			'vivid-cyan-blue'       => __( 'Vivid cyan blue', 'gutenberg' ),
 			'vivid-purple'          => __( 'Vivid purple', 'gutenberg' ),
 		);
-		if ( ! empty( $config['global']['settings']['color']['palette'] ) ) {
-			foreach ( $config['global']['settings']['color']['palette'] as &$color ) {
+		if ( ! empty( $config['settings'][ $all_blocks ]['color']['palette'] ) ) {
+			foreach ( $config['settings'][ $all_blocks ]['color']['palette'] as &$color ) {
 				$color['name'] = $default_colors_i18n[ $color['slug'] ];
 			}
 		}
@@ -198,8 +232,8 @@ class WP_Theme_JSON_Resolver {
 			'electric-grass'                       => __( 'Electric grass', 'gutenberg' ),
 			'midnight'                             => __( 'Midnight', 'gutenberg' ),
 		);
-		if ( ! empty( $config['global']['settings']['color']['gradients'] ) ) {
-			foreach ( $config['global']['settings']['color']['gradients'] as &$gradient ) {
+		if ( ! empty( $config['settings'][ $all_blocks ]['color']['gradients'] ) ) {
+			foreach ( $config['settings'][ $all_blocks ]['color']['gradients'] as &$gradient ) {
 				$gradient['name'] = $default_gradients_i18n[ $gradient['slug'] ];
 			}
 		}
@@ -211,8 +245,8 @@ class WP_Theme_JSON_Resolver {
 			'large'  => __( 'Large', 'gutenberg' ),
 			'huge'   => __( 'Huge', 'gutenberg' ),
 		);
-		if ( ! empty( $config['global']['settings']['typography']['fontSizes'] ) ) {
-			foreach ( $config['global']['settings']['typography']['fontSizes'] as &$font_size ) {
+		if ( ! empty( $config['settings'][ $all_blocks ]['typography']['fontSizes'] ) ) {
+			foreach ( $config['settings'][ $all_blocks ]['typography']['fontSizes'] as &$font_size ) {
 				$font_size['name'] = $default_font_sizes_i18n[ $font_size['slug'] ];
 			}
 		}
@@ -325,7 +359,7 @@ class WP_Theme_JSON_Resolver {
 				$config = $decoded_data;
 			}
 		}
-		self::$user = new WP_Theme_JSON( $config, true );
+		self::$user = new WP_Theme_JSON( $config );
 
 		return self::$user;
 	}
diff --git a/lib/class-wp-theme-json.php b/lib/class-wp-theme-json.php
index c8cd12f410..7a457e5d39 100644
--- a/lib/class-wp-theme-json.php
+++ b/lib/class-wp-theme-json.php
@@ -16,7 +16,7 @@ class WP_Theme_JSON {
 	 *
 	 * @var array
 	 */
-	private $contexts = null;
+	private $theme_json = null;
 
 	/**
 	 * Holds block metadata extracted from block.json
@@ -28,29 +28,43 @@ class WP_Theme_JSON {
 	private static $blocks_metadata = null;
 
 	/**
-	 * The name of the global context.
+	 * How to address all the blocks
+	 * in the theme.json file.
+	 */
+	const ALL_BLOCKS_NAME = 'defaults';
+
+	/**
+	 * The CSS selector for the * block,
+	 * only using to generate presets.
+	 *
+	 * @var string
+	 */
+	const ALL_BLOCKS_SELECTOR = ':root';
+
+	/**
+	 * How to address the root block
+	 * in the theme.json file.
 	 *
 	 * @var string
 	 */
-	const GLOBAL_NAME = 'global';
+	const ROOT_BLOCK_NAME = 'root';
 
 	/**
-	 * The CSS selector for the global context.
+	 * The CSS selector for the root block.
 	 *
 	 * @var string
 	 */
-	const GLOBAL_SELECTOR = ':root';
+	const ROOT_BLOCK_SELECTOR = ':root';
 
 	/**
-	 * The supported properties of the global context.
+	 * The supported properties of the root block.
 	 *
 	 * @var array
 	 */
-	const GLOBAL_SUPPORTS = array(
+	const ROOT_BLOCK_SUPPORTS = array(
 		'--wp--style--color--link',
 		'background',
 		'backgroundColor',
-		'border',
 		'color',
 		'fontFamily',
 		'fontSize',
@@ -62,12 +76,12 @@ class WP_Theme_JSON {
 	);
 
 	/**
-	 * Data schema of each context within a theme.json.
+	 * Data schema of each block within a theme.json.
 	 *
 	 * Example:
 	 *
 	 * {
-	 *   'context-one': {
+	 *   'block-one': {
 	 *     'styles': {
 	 *       'color': {
 	 *         'background': 'color'
@@ -79,7 +93,7 @@ class WP_Theme_JSON {
 	 *       }
 	 *     }
 	 *   },
-	 *   'context-two': {
+	 *   'block-two': {
 	 *     'styles': {
 	 *       'color': {
 	 *         'link': 'color'
@@ -92,6 +106,9 @@ class WP_Theme_JSON {
 		'styles'   => array(
 			'border'     => array(
 				'radius' => null,
+				'color'  => null,
+				'style'  => null,
+				'width'  => null,
 			),
 			'color'      => array(
 				'background' => null,
@@ -120,6 +137,9 @@ class WP_Theme_JSON {
 		'settings' => array(
 			'border'     => array(
 				'customRadius' => null,
+				'customColor'  => null,
+				'customStyle'  => null,
+				'customWidth'  => null,
 			),
 			'color'      => array(
 				'custom'         => null,
@@ -165,7 +185,7 @@ class WP_Theme_JSON {
 	 *
 	 * This contains the necessary metadata to process them:
 	 *
-	 * - path          => where to find the preset in a theme.json context
+	 * - path          => where to find the preset within the settings section
 	 *
 	 * - value_key     => the key that represents the value
 	 *
@@ -182,7 +202,7 @@ class WP_Theme_JSON {
 	 */
 	const PRESETS_METADATA = array(
 		array(
-			'path'          => array( 'settings', 'color', 'palette' ),
+			'path'          => array( 'color', 'palette' ),
 			'value_key'     => 'color',
 			'css_var_infix' => 'color',
 			'classes'       => array(
@@ -197,7 +217,7 @@ class WP_Theme_JSON {
 			),
 		),
 		array(
-			'path'          => array( 'settings', 'color', 'gradients' ),
+			'path'          => array( 'color', 'gradients' ),
 			'value_key'     => 'gradient',
 			'css_var_infix' => 'gradient',
 			'classes'       => array(
@@ -208,7 +228,7 @@ class WP_Theme_JSON {
 			),
 		),
 		array(
-			'path'          => array( 'settings', 'typography', 'fontSizes' ),
+			'path'          => array( 'typography', 'fontSizes' ),
 			'value_key'     => 'size',
 			'css_var_infix' => 'font-size',
 			'classes'       => array(
@@ -219,7 +239,7 @@ class WP_Theme_JSON {
 			),
 		),
 		array(
-			'path'          => array( 'settings', 'typography', 'fontFamilies' ),
+			'path'          => array( 'typography', 'fontFamilies' ),
 			'value_key'     => 'fontFamily',
 			'css_var_infix' => 'font-family',
 			'classes'       => array(),
@@ -251,6 +271,18 @@ class WP_Theme_JSON {
 			'value'   => array( 'border', 'radius' ),
 			'support' => array( '__experimentalBorder', 'radius' ),
 		),
+		'borderColor'             => array(
+			'value'   => array( 'border', 'color' ),
+			'support' => array( '__experimentalBorder', 'color' ),
+		),
+		'borderWidth'             => array(
+			'value'   => array( 'border', 'width' ),
+			'support' => array( '__experimentalBorder', 'width' ),
+		),
+		'borderStyle'             => array(
+			'value'   => array( 'border', 'style' ),
+			'support' => array( '__experimentalBorder', 'style' ),
+		),
 		'color'                    => array(
 			'value'   => array( 'color', 'text' ),
 			'support' => array( 'color' ),
@@ -293,96 +325,145 @@ class WP_Theme_JSON {
 	/**
 	 * Constructor.
 	 *
-	 * @param array   $contexts A structure that follows the theme.json schema.
-	 * @param boolean $should_escape_styles Whether the incoming styles should be escaped.
+	 * @param array $theme_json A structure that follows the theme.json schema.
 	 */
-	public function __construct( $contexts = array(), $should_escape_styles = false ) {
-		$this->contexts = array();
+	public function __construct( $theme_json = array() ) {
+		$this->theme_json = array();
 
-		if ( ! is_array( $contexts ) ) {
+		if ( ! is_array( $theme_json ) ) {
 			return;
 		}
 
-		$metadata = $this->get_blocks_metadata();
-		foreach ( $contexts as $key => $context ) {
-			if ( ! isset( $metadata[ $key ] ) ) {
-				// Skip incoming contexts that can't be found
-				// within the contexts registered.
-				continue;
+		// Remove top-level keys that aren't present in the schema.
+		$this->theme_json = array_intersect_key( $theme_json, self::SCHEMA );
+
+		$block_metadata = $this->get_blocks_metadata();
+		foreach ( array( 'settings', 'styles' ) as $subtree ) {
+			// Remove settings & styles subtrees if they aren't arrays.
+			if ( isset( $this->theme_json[ $subtree ] ) && ! is_array( $this->theme_json[ $subtree ] ) ) {
+				unset( $this->theme_json[ $subtree ] );
+			}
+
+			// Remove block selectors subtrees declared within settings & styles if that aren't registered.
+			if ( isset( $this->theme_json[ $subtree ] ) ) {
+				$this->theme_json[ $subtree ] = array_intersect_key( $this->theme_json[ $subtree ], $block_metadata );
 			}
+		}
+
+		foreach ( $block_metadata as $block_selector => $metadata ) {
+			if ( isset( $this->theme_json['styles'][ $block_selector ] ) ) {
+				// Remove the block selector subtree if it's not an array.
+				if ( ! is_array( $this->theme_json['styles'][ $block_selector ] ) ) {
+					unset( $this->theme_json['styles'][ $block_selector ] );
+					continue;
+				}
+
+				// Remove the properties the block doesn't support.
+				// This is a subset of the full styles schema.
+				$styles_schema = self::SCHEMA['styles'];
+				foreach ( self::PROPERTIES_METADATA as $prop_name => $prop_meta ) {
+					if ( ! in_array( $prop_name, $metadata['supports'], true ) ) {
+						unset( $styles_schema[ $prop_meta['value'][0] ][ $prop_meta['value'][1] ] );
+					}
+				}
+				self::remove_keys_not_in_schema(
+					$this->theme_json['styles'][ $block_selector ],
+					$styles_schema
+				);
 
-			// Filter out top-level keys that aren't valid according to the schema.
-			$context = array_intersect_key( $context, self::SCHEMA );
-
-			// Process styles subtree.
-			$this->process_key( 'styles', $context, self::SCHEMA );
-			if ( isset( $context['styles'] ) ) {
-				$this->process_key( 'border', $context['styles'], self::SCHEMA['styles'], $should_escape_styles );
-				$this->process_key( 'color', $context['styles'], self::SCHEMA['styles'], $should_escape_styles );
-				$this->process_key( 'spacing', $context['styles'], self::SCHEMA['styles'], $should_escape_styles );
-				$this->process_key( 'typography', $context['styles'], self::SCHEMA['styles'], $should_escape_styles );
-
-				if ( empty( $context['styles'] ) ) {
-					unset( $context['styles'] );
-				} else {
-					$this->contexts[ $key ]['styles'] = $context['styles'];
+				// Remove the block selector subtree if it is empty after having processed it.
+				if ( empty( $this->theme_json['styles'][ $block_selector ] ) ) {
+					unset( $this->theme_json['styles'][ $block_selector ] );
 				}
 			}
 
-			// Process settings subtree.
-			$this->process_key( 'settings', $context, self::SCHEMA );
-			if ( isset( $context['settings'] ) ) {
-				$this->process_key( 'border', $context['settings'], self::SCHEMA['settings'] );
-				$this->process_key( 'color', $context['settings'], self::SCHEMA['settings'] );
-				$this->process_key( 'spacing', $context['settings'], self::SCHEMA['settings'] );
-				$this->process_key( 'typography', $context['settings'], self::SCHEMA['settings'] );
-
-				if ( empty( $context['settings'] ) ) {
-					unset( $context['settings'] );
-				} else {
-					$this->contexts[ $key ]['settings'] = $context['settings'];
+			if ( isset( $this->theme_json['settings'][ $block_selector ] ) ) {
+				// Remove the block selector subtree if it's not an array.
+				if ( ! is_array( $this->theme_json['settings'][ $block_selector ] ) ) {
+					unset( $this->theme_json['settings'][ $block_selector ] );
+					continue;
+				}
+
+				// Remove the properties that aren't present in the schema.
+				self::remove_keys_not_in_schema(
+					$this->theme_json['settings'][ $block_selector ],
+					self::SCHEMA['settings']
+				);
+
+				// Remove the block selector subtree if it is empty after having processed it.
+				if ( empty( $this->theme_json['settings'][ $block_selector ] ) ) {
+					unset( $this->theme_json['settings'][ $block_selector ] );
 				}
 			}
 		}
+
+		// Remove the settings & styles subtrees if they're empty after having processed them.
+		foreach ( array( 'settings', 'styles' ) as $subtree ) {
+			if ( empty( $this->theme_json[ $subtree ] ) ) {
+				unset( $this->theme_json[ $subtree ] );
+			}
+		}
+
+	}
+
+	/**
+	 * Returns the kebab-cased name of a given property.
+	 *
+	 * @param string $property Property name to convert.
+	 * @return string kebab-cased name of the property
+	 */
+	private static function to_kebab_case( $property ) {
+		$mappings = self::get_case_mappings();
+		return $mappings['to_kebab_case'][ $property ];
+	}
+
+	/**
+	 * Returns the property name of a kebab-cased property.
+	 *
+	 * @param string $property Property name to convert in kebab-case.
+	 * @return string Name of the property
+	 */
+	private static function to_property( $property ) {
+		$mappings = self::get_case_mappings();
+		return $mappings['to_property'][ $property ];
 	}
 
 	/**
 	 * Returns a mapping on metadata properties to avoid having to constantly
 	 * transforms properties between camel case and kebab.
 	 *
-	 * @return array Containing three mappings
-	 *  "to_kebab_case" mapping properties in camel case to
+	 * @return array Containing two mappings:
+	 *
+	 *   - "to_kebab_case" mapping properties in camel case to
 	 *    properties in kebab case e.g: "paddingTop" to "padding-top".
-	 *  "to_camel_case" mapping properties in kebab case to
-	 *    properties in camel case e.g: "padding-top" to "paddingTop".
-	 *  "to_property" mapping properties in kebab case to
+	 *
+	 *  - "to_property" mapping properties in kebab case to
 	 *    the main properties in camel case e.g: "padding-top" to "padding".
 	 */
-	private static function get_properties_metadata_case_mappings() {
-		static $properties_metadata_case_mappings;
-		if ( null === $properties_metadata_case_mappings ) {
-			$properties_metadata_case_mappings = array(
+	private static function get_case_mappings() {
+		static $case_mappings;
+		if ( null === $case_mappings ) {
+			$case_mappings = array(
 				'to_kebab_case' => array(),
-				'to_camel_case' => array(),
 				'to_property'   => array(),
 			);
 			foreach ( self::PROPERTIES_METADATA as $key => $metadata ) {
 				$kebab_case = strtolower( preg_replace( '/(?<!^)[A-Z]/', '-$0', $key ) );
-				$properties_metadata_case_mappings['to_kebab_case'][ $key ]        = $kebab_case;
-				$properties_metadata_case_mappings['to_camel_case'][ $kebab_case ] = $key;
-				$properties_metadata_case_mappings['to_property'][ $kebab_case ]   = $key;
+
+				$case_mappings['to_kebab_case'][ $key ]      = $kebab_case;
+				$case_mappings['to_property'][ $kebab_case ] = $key;
 				if ( self::has_properties( $metadata ) ) {
 					foreach ( $metadata['properties'] as $property ) {
 						$camel_case = $key . ucfirst( $property );
 						$kebab_case = strtolower( preg_replace( '/(?<!^)[A-Z]/', '-$0', $camel_case ) );
-						$properties_metadata_case_mappings['to_kebab_case'][ $camel_case ] = $kebab_case;
-						$properties_metadata_case_mappings['to_camel_case'][ $kebab_case ] = $camel_case;
-						$properties_metadata_case_mappings['to_property'][ $kebab_case ]   = $key;
+
+						$case_mappings['to_kebab_case'][ $camel_case ] = $kebab_case;
+						$case_mappings['to_property'][ $kebab_case ]   = $key;
 					}
 				}
 			}
 		}
-		return $properties_metadata_case_mappings;
+		return $case_mappings;
 	}
 
 	/**
@@ -391,7 +472,7 @@ class WP_Theme_JSON {
 	 * Example:
 	 *
 	 * {
-	 *   'global': {
+	 *   'root': {
 	 *     'selector': ':root'
 	 *     'supports': [ 'fontSize', 'backgroundColor' ],
 	 *   },
@@ -409,9 +490,17 @@ class WP_Theme_JSON {
 		}
 
 		self::$blocks_metadata = array(
-			self::GLOBAL_NAME => array(
-				'selector' => self::GLOBAL_SELECTOR,
-				'supports' => self::GLOBAL_SUPPORTS,
+			self::ROOT_BLOCK_NAME => array(
+				'selector' => self::ROOT_BLOCK_SELECTOR,
+				'supports' => self::ROOT_BLOCK_SUPPORTS,
+			),
+			// By make supports an empty array
+			// this won't have any styles associated
+			// but still allows adding settings
+			// and generate presets.
+			self::ALL_BLOCKS_NAME => array(
+				'selector' => self::ALL_BLOCKS_SELECTOR,
+				'supports' => array(),
 			),
 		);
 
@@ -500,83 +589,25 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Normalize the subtree according to the given schema.
-	 * This function modifies the given input by removing
-	 * the nodes that aren't valid per the schema.
-	 *
-	 * @param string  $key Key of the subtree to normalize.
-	 * @param array   $input Whole tree to normalize.
-	 * @param array   $schema Schema to use for normalization.
-	 * @param boolean $should_escape Whether the subproperties should be escaped.
+	 * Given a tree, removes the keys that are not present in the schema.
+	 *
+	 * It is recursive and modifies the input in-place.
+	 *
+	 * @param array $tree Input to process.
+	 * @param array $schema Schema to adhere to.
 	 */
-	private static function process_key( $key, &$input, $schema, $should_escape = false ) {
-		if ( ! isset( $input[ $key ] ) ) {
-			return;
-		}
-
-		// Consider valid the input value.
-		if ( null === $schema[ $key ] ) {
-			return;
-		}
-
-		if ( ! is_array( $input[ $key ] ) ) {
-			unset( $input[ $key ] );
-			return;
-		}
+	private static function remove_keys_not_in_schema( &$tree, $schema ) {
+		$tree = array_intersect_key( $tree, $schema );
 
-		$input[ $key ] = array_intersect_key(
-			$input[ $key ],
-			$schema[ $key ]
-		);
+		foreach ( $schema as $key => $data ) {
+			if ( is_array( $schema[ $key ] ) && isset( $tree[ $key ] ) ) {
+				self::remove_keys_not_in_schema( $tree[ $key ], $schema[ $key ] );
 
-		if ( $should_escape ) {
-			$subtree = $input[ $key ];
-			foreach ( $subtree as $property => $value ) {
-				$name = 'background-color';
-				if ( 'gradient' === $property ) {
-					$name = 'background';
-				}
-
-				if ( is_array( $value ) ) {
-					$result = array();
-					foreach ( $value as $subproperty => $subvalue ) {
-						$result_subproperty = safecss_filter_attr( "$name: $subvalue" );
-						if ( '' !== $result_subproperty ) {
-							$result[ $subproperty ] = $result_subproperty;
-						}
-					}
-
-					if ( empty( $result ) ) {
-						unset( $input[ $key ][ $property ] );
-					}
-				} else {
-					$result = safecss_filter_attr( "$name: $value" );
-
-					if ( '' === $result ) {
-						unset( $input[ $key ][ $property ] );
-					}
+				if ( empty( $tree[ $key ] ) ) {
+					unset( $tree[ $key ] );
 				}
 			}
 		}
-
-		if ( 0 === count( $input[ $key ] ) ) {
-			unset( $input[ $key ] );
-		}
-	}
-
-	/**
-	 * Given a context, it returns its settings subtree.
-	 *
-	 * @param array $context Context adhering to the theme.json schema.
-	 *
-	 * @return array|null The settings subtree.
-	 */
-	private static function extract_settings( $context ) {
-		if ( empty( $context['settings'] ) ) {
-			return null;
-		}
-
-		return $context['settings'];
 	}
 
 	/**
@@ -688,7 +719,7 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Given a context, it extracts the style properties
+	 * Given a styles array, it extracts the style properties
 	 * and adds them to the $declarations array following the format:
 	 *
 	 * ```php
@@ -700,23 +731,24 @@ class WP_Theme_JSON {
 	 *
 	 * Note that this modifies the $declarations in place.
 	 *
-	 * @param array $declarations     Holds the existing declarations.
-	 * @param array $context Input    context to process.
-	 * @param array $context_supports Supports information for this context.
+	 * @param array $declarations Holds the existing declarations.
+	 * @param array $styles       Styles to process.
+	 * @param array $supports     Supports information for this block.
 	 */
-	private static function compute_style_properties( &$declarations, $context, $context_supports ) {
-		if ( empty( $context['styles'] ) ) {
+	private static function compute_style_properties( &$declarations, $styles, $supports ) {
+		if ( empty( $styles ) ) {
 			return;
 		}
-		$metadata_mappings = self::get_properties_metadata_case_mappings();
-		$properties        = array();
+
+		$properties = array();
 		foreach ( self::PROPERTIES_METADATA as $name => $metadata ) {
-			if ( ! in_array( $name, $context_supports, true ) ) {
+			if ( ! in_array( $name, $supports, true ) ) {
 				continue;
 			}
 
 			// Some properties can be shorthand properties, meaning that
 			// they contain multiple values instead of a single one.
+			// An example of this is the padding property, see self::SCHEMA.
 			if ( self::has_properties( $metadata ) ) {
 				foreach ( $metadata['properties'] as $property ) {
 					$properties[] = array(
@@ -733,9 +765,9 @@ class WP_Theme_JSON {
 		}
 
 		foreach ( $properties as $prop ) {
-			$value = self::get_property_value( $context['styles'], $prop['value'] );
+			$value = self::get_property_value( $styles, $prop['value'] );
 			if ( ! empty( $value ) ) {
-				$kebab_cased_name = $metadata_mappings['to_kebab_case'][ $prop['name'] ];
+				$kebab_cased_name = self::to_kebab_case( $prop['name'] );
 				$declarations[]   = array(
 					'name'  => $kebab_cased_name,
 					'value' => $value,
@@ -745,24 +777,24 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Given a context, it extracts its presets
+	 * Given a settings array, it extracts its presets
 	 * and adds them to the given input $stylesheet.
 	 *
 	 * Note this function modifies $stylesheet in place.
 	 *
 	 * @param string $stylesheet Input stylesheet to add the presets to.
-	 * @param array  $context Context to process.
+	 * @param array  $settings Settings to process.
 	 * @param string $selector Selector wrapping the classes.
 	 */
-	private static function compute_preset_classes( &$stylesheet, $context, $selector ) {
-		if ( self::GLOBAL_SELECTOR === $selector ) {
+	private static function compute_preset_classes( &$stylesheet, $settings, $selector ) {
+		if ( self::ROOT_BLOCK_SELECTOR === $selector ) {
 			// Classes at the global level do not need any CSS prefixed,
 			// and we don't want to increase its specificity.
 			$selector = '';
 		}
 
 		foreach ( self::PRESETS_METADATA as $preset ) {
-			$values = gutenberg_experimental_get( $context, $preset['path'], array() );
+			$values = gutenberg_experimental_get( $settings, $preset['path'], array() );
 			foreach ( $values as $value ) {
 				foreach ( $preset['classes'] as $class ) {
 					$stylesheet .= self::to_ruleset(
@@ -780,7 +812,7 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Given a context, it extracts the CSS Custom Properties
+	 * Given the block settings, it extracts the CSS Custom Properties
 	 * for the presets and adds them to the $declarations array
 	 * following the format:
 	 *
@@ -794,11 +826,11 @@ class WP_Theme_JSON {
 	 * Note that this modifies the $declarations in place.
 	 *
 	 * @param array $declarations Holds the existing declarations.
-	 * @param array $context Input context to process.
+	 * @param array $settings Settings to process.
 	 */
-	private static function compute_preset_vars( &$declarations, $context ) {
+	private static function compute_preset_vars( &$declarations, $settings ) {
 		foreach ( self::PRESETS_METADATA as $preset ) {
-			$values = gutenberg_experimental_get( $context, $preset['path'], array() );
+			$values = gutenberg_experimental_get( $settings, $preset['path'], array() );
 			foreach ( $values as $value ) {
 				$declarations[] = array(
 					'name'  => '--wp--preset--' . $preset['css_var_infix'] . '--' . $value['slug'],
@@ -809,7 +841,7 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Given a context, it extracts the CSS Custom Properties
+	 * Given an array of settings, it extracts the CSS Custom Properties
 	 * for the custom values and adds them to the $declarations
 	 * array following the format:
 	 *
@@ -823,10 +855,10 @@ class WP_Theme_JSON {
 	 * Note that this modifies the $declarations in place.
 	 *
 	 * @param array $declarations Holds the existing declarations.
-	 * @param array $context Input context to process.
+	 * @param array $settings Settings to process.
 	 */
-	private static function compute_theme_vars( &$declarations, $context ) {
-		$custom_values = gutenberg_experimental_get( $context, array( 'settings', 'custom' ) );
+	private static function compute_theme_vars( &$declarations, $settings ) {
+		$custom_values = gutenberg_experimental_get( $settings, array( 'custom' ) );
 		$css_vars      = self::flatten_tree( $custom_values );
 		foreach ( $css_vars as $key => $value ) {
 			$declarations[] = array(
@@ -876,15 +908,15 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Converts each context into a list of rulesets
+	 * Converts each styles section into a list of rulesets
 	 * to be appended to the stylesheet.
 	 * These rulesets contain all the css variables (custom variables and preset variables).
 	 *
 	 * See glossary at https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax
 	 *
-	 * For each context this creates a new ruleset such as:
+	 * For each section this creates a new ruleset such as:
 	 *
-	 *   context-selector {
+	 *   block-selector {
 	 *     --wp--preset--category--slug: value;
 	 *     --wp--custom--variable: value;
 	 *   }
@@ -893,16 +925,20 @@ class WP_Theme_JSON {
 	 */
 	private function get_css_variables() {
 		$stylesheet = '';
-		$metadata   = $this->get_blocks_metadata();
-		foreach ( $this->contexts as $context_name => $context ) {
-			if ( empty( $metadata[ $context_name ]['selector'] ) ) {
+		if ( ! isset( $this->theme_json['settings'] ) ) {
+			return $stylesheet;
+		}
+
+		$metadata = $this->get_blocks_metadata();
+		foreach ( $this->theme_json['settings'] as $block_selector => $settings ) {
+			if ( empty( $metadata[ $block_selector ]['selector'] ) ) {
 				continue;
 			}
-			$selector = $metadata[ $context_name ]['selector'];
+			$selector = $metadata[ $block_selector ]['selector'];
 
 			$declarations = array();
-			self::compute_preset_vars( $declarations, $context );
-			self::compute_theme_vars( $declarations, $context );
+			self::compute_preset_vars( $declarations, $settings );
+			self::compute_theme_vars( $declarations, $settings );
 
 			// Attach the ruleset for style and custom properties.
 			$stylesheet .= self::to_ruleset( $selector, $declarations );
@@ -911,14 +947,14 @@ class WP_Theme_JSON {
 	}
 
 	/**
-	 * Converts each context into a list of rulesets
+	 * Converts each style section into a list of rulesets
 	 * containing the block styles to be appended to the stylesheet.
 	 *
 	 * See glossary at https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax
 	 *
-	 * For each context this creates a new ruleset such as:
+	 * For each section this creates a new ruleset such as:
 	 *
-	 *   context-selector {
+	 *   block-selector {
 	 *     style-property-one: value;
 	 *   }
 	 *
@@ -949,33 +985,50 @@ class WP_Theme_JSON {
 	 */
 	private function get_block_styles() {
 		$stylesheet = '';
-		$metadata   = $this->get_blocks_metadata();
-		foreach ( $this->contexts as $context_name => $context ) {
-			if ( empty( $metadata[ $context_name ]['selector'] ) || empty( $metadata[ $context_name ]['supports'] ) ) {
+		if ( ! isset( $this->theme_json['styles'] ) && ! isset( $this->theme_json['settings'] ) ) {
+			return $stylesheet;
+		}
+
+		$metadata = $this->get_blocks_metadata();
+		foreach ( $metadata as $block_selector => $metadata ) {
+			if ( empty( $metadata['selector'] ) || empty( $metadata['supports'] ) ) {
 				continue;
 			}
-			$selector = $metadata[ $context_name ]['selector'];
-			$supports = $metadata[ $context_name ]['supports'];
+
+			$selector = $metadata['selector'];
+			$supports = $metadata['supports'];
 
 			$declarations = array();
-			self::compute_style_properties( $declarations, $context, $supports );
+			if ( isset( $this->theme_json['styles'][ $block_selector ] ) ) {
+				self::compute_style_properties(
+					$declarations,
+					$this->theme_json['styles'][ $block_selector ],
+					$supports
+				);
+			}
 
 			$stylesheet .= self::to_ruleset( $selector, $declarations );
 
 			// Attach the rulesets for the classes.
-			self::compute_preset_classes( $stylesheet, $context, $selector );
+			if ( isset( $this->theme_json['settings'][ $block_selector ] ) ) {
+				self::compute_preset_classes(
+					$stylesheet,
+					$this->theme_json['settings'][ $block_selector ],
+					$selector
+				);
+			}
 		}
 
 		return $stylesheet;
 	}
 
 	/**
-	 * Returns the existing settings for each context.
+	 * Returns the existing settings for each block.
 	 *
 	 * Example:
 	 *
 	 * {
-	 *   'global': {
+	 *   'root': {
 	 *     'color': {
 	 *       'custom': true
 	 *     }
@@ -987,15 +1040,14 @@ class WP_Theme_JSON {
 	 *   }
 	 * }
 	 *
-	 * @return array Settings per context.
+	 * @return array Settings per block.
 	 */
 	public function get_settings() {
-		return array_filter(
-			array_map( array( $this, 'extract_settings' ), $this->contexts ),
-			function ( $element ) {
-				return null !== $element;
-			}
-		);
+		if ( ! isset( $this->theme_json['settings'] ) ) {
+			return array();
+		} else {
+			return $this->theme_json['settings'];
+		}
 	}
 
 	/**
@@ -1019,37 +1071,41 @@ class WP_Theme_JSON {
 	/**
 	 * Merge new incoming data.
 	 *
-	 * @param WP_Theme_JSON $theme_json Data to merge.
+	 * @param WP_Theme_JSON $incoming Data to merge.
 	 */
-	public function merge( $theme_json ) {
-		$incoming_data = $theme_json->get_raw_data();
-
-		foreach ( array_keys( $incoming_data ) as $context ) {
-			foreach ( array( 'settings', 'styles' ) as $subtree ) {
-				if ( ! isset( $incoming_data[ $context ][ $subtree ] ) ) {
-					continue;
-				}
-
-				if ( ! isset( $this->contexts[ $context ][ $subtree ] ) ) {
-					$this->contexts[ $context ][ $subtree ] = $incoming_data[ $context ][ $subtree ];
-					continue;
-				}
-
-				foreach ( array_keys( self::SCHEMA[ $subtree ] ) as $leaf ) {
-					if ( ! isset( $incoming_data[ $context ][ $subtree ][ $leaf ] ) ) {
-						continue;
-					}
-
-					if ( ! isset( $this->contexts[ $context ][ $subtree ][ $leaf ] ) ) {
-						$this->contexts[ $context ][ $subtree ][ $leaf ] = $incoming_data[ $context ][ $subtree ][ $leaf ];
-						continue;
-					}
-
-					$this->contexts[ $context ][ $subtree ][ $leaf ] = array_merge(
-						$this->contexts[ $context ][ $subtree ][ $leaf ],
-						$incoming_data[ $context ][ $subtree ][ $leaf ]
-					);
-				}
+	public function merge( $incoming ) {
+		$incoming_data    = $incoming->get_raw_data();
+		$this->theme_json = array_replace_recursive( $this->theme_json, $incoming_data );
+
+		// The array_replace_recursive algorithm merges at the leaf level.
+		// This means that when a leaf value is an array,
+		// the incoming array won't replace the existing,
+		// but the numeric indexes are used for replacement.
+		//
+		// These are the cases that have array values at the leaf levels.
+		$block_metadata = self::get_blocks_metadata();
+		foreach ( $block_metadata as $block_selector => $meta ) {
+			// Color presets: palette & gradients.
+			if ( isset( $incoming_data['settings'][ $block_selector ]['color']['palette'] ) ) {
+				$this->theme_json['settings'][ $block_selector ]['color']['palette'] = $incoming_data['settings'][ $block_selector ]['color']['palette'];
+			}
+			if ( isset( $incoming_data['settings'][ $block_selector ]['color']['gradients'] ) ) {
+				$this->theme_json['settings'][ $block_selector ]['color']['gradients'] = $incoming_data['settings'][ $block_selector ]['color']['gradients'];
+			}
+			// Spacing: units.
+			if ( isset( $incoming_data['settings'][ $block_selector ]['spacing']['units'] ) ) {
+				$this->theme_json['settings'][ $block_selector ]['spacing']['units'] = $incoming_data['settings'][ $block_selector ]['spacing']['units'];
+			}
+			// Typography presets: fontSizes & fontFamilies.
+			if ( isset( $incoming_data['settings'][ $block_selector ]['typography']['fontSizes'] ) ) {
+				$this->theme_json['settings'][ $block_selector ]['typography']['fontSizes'] = $incoming_data['settings'][ $block_selector ]['typography']['fontSizes'];
+			}
+			if ( isset( $incoming_data['settings'][ $block_selector ]['typography']['fontFamilies'] ) ) {
+				$this->theme_json['settings'][ $block_selector ]['typography']['fontFamilies'] = $incoming_data['settings'][ $block_selector ]['typography']['fontFamilies'];
+			}
+			// Custom section.
+			if ( isset( $incoming_data['settings'][ $block_selector ]['custom'] ) ) {
+				$this->theme_json['settings'][ $block_selector ]['custom'] = $incoming_data['settings'][ $block_selector ]['custom'];
 			}
 		}
 	}
@@ -1058,55 +1114,42 @@ class WP_Theme_JSON {
 	 * Removes insecure data from theme.json.
 	 */
 	public function remove_insecure_properties() {
-		$blocks_metadata   = self::get_blocks_metadata();
-		$metadata_mappings = self::get_properties_metadata_case_mappings();
-		foreach ( $this->contexts as $context_name => &$context ) {
-			// Escape the context key.
-			if ( empty( $blocks_metadata[ $context_name ] ) ) {
-				unset( $this->contexts[ $context_name ] );
-				continue;
-			}
-
-			$escaped_settings = null;
-			$escaped_styles   = null;
+		$blocks_metadata = self::get_blocks_metadata();
+		foreach ( $blocks_metadata as $block_selector => $metadata ) {
+			$escaped_settings = array();
+			$escaped_styles   = array();
 
 			// Style escaping.
-			if ( ! empty( $context['styles'] ) ) {
-				$supports     = $blocks_metadata[ $context_name ]['supports'];
+			if ( isset( $this->theme_json['styles'][ $block_selector ] ) ) {
 				$declarations = array();
-				self::compute_style_properties( $declarations, $context, $supports );
+				self::compute_style_properties( $declarations, $this->theme_json['styles'][ $block_selector ], $metadata['supports'] );
 				foreach ( $declarations as $declaration ) {
 					$style_to_validate = $declaration['name'] . ': ' . $declaration['value'];
 					if ( esc_html( safecss_filter_attr( $style_to_validate ) ) === $style_to_validate ) {
-						if ( null === $escaped_styles ) {
-							$escaped_styles = array();
-						}
-						$property = $metadata_mappings['to_property'][ $declaration['name'] ];
+						$property = self::to_property( $declaration['name'] );
 						$path     = self::PROPERTIES_METADATA[ $property ]['value'];
 						if ( self::has_properties( self::PROPERTIES_METADATA[ $property ] ) ) {
 							$declaration_divided = explode( '-', $declaration['name'] );
 							$path[]              = $declaration_divided[1];
-							gutenberg_experimental_set(
-								$escaped_styles,
-								$path,
-								gutenberg_experimental_get( $context['styles'], $path )
-							);
-						} else {
-							gutenberg_experimental_set(
-								$escaped_styles,
-								$path,
-								gutenberg_experimental_get( $context['styles'], $path )
-							);
 						}
+						gutenberg_experimental_set(
+							$escaped_styles,
+							$path,
+							gutenberg_experimental_get( $this->theme_json['styles'][ $block_selector ], $path )
+						);
 					}
 				}
 			}
 
 			// Settings escaping.
 			// For now the ony allowed settings are presets.
-			if ( ! empty( $context['settings'] ) ) {
+			if ( isset( $this->theme_json['settings'][ $block_selector ] ) ) {
 				foreach ( self::PRESETS_METADATA as $preset_metadata ) {
-					$current_preset = gutenberg_experimental_get( $context, $preset_metadata['path'], null );
+					$current_preset = gutenberg_experimental_get(
+						$this->theme_json['settings'][ $block_selector ],
+						$preset_metadata['path'],
+						null
+					);
 					if ( null !== $current_preset ) {
 						$escaped_preset = array();
 						foreach ( $current_preset as $single_preset ) {
@@ -1136,34 +1179,23 @@ class WP_Theme_JSON {
 								}
 							}
 						}
-						if ( count( $escaped_preset ) > 0 ) {
-							if ( null === $escaped_settings ) {
-								$escaped_settings = array();
-							}
+						if ( ! empty( $escaped_preset ) ) {
 							gutenberg_experimental_set( $escaped_settings, $preset_metadata['path'], $escaped_preset );
 						}
 					}
 				}
-				if ( null !== $escaped_settings ) {
-					$escaped_settings = $escaped_settings['settings'];
-				}
 			}
 
-			if ( null === $escaped_settings && null === $escaped_styles ) {
-				unset( $this->contexts[ $context_name ] );
-			} elseif ( null !== $escaped_settings && null !== $escaped_styles ) {
-				$context = array(
-					'styles'   => $escaped_styles,
-					'settings' => $escaped_settings,
-				);
-			} elseif ( null === $escaped_settings ) {
-				$context = array(
-					'styles' => $escaped_styles,
-				);
+			if ( empty( $escaped_settings ) ) {
+				unset( $this->theme_json['settings'][ $block_selector ] );
 			} else {
-				$context = array(
-					'settings' => $escaped_settings,
-				);
+				$this->theme_json['settings'][ $block_selector ] = $escaped_settings;
+			}
+
+			if ( empty( $escaped_styles ) ) {
+				unset( $this->theme_json['styles'][ $block_selector ] );
+			} else {
+				$this->theme_json['styles'][ $block_selector ] = $escaped_styles;
 			}
 		}
 	}
@@ -1174,7 +1206,7 @@ class WP_Theme_JSON {
 	 * @return array Raw data.
 	 */
 	public function get_raw_data() {
-		return $this->contexts;
+		return $this->theme_json;
 	}
 
 }
diff --git a/lib/client-assets.php b/lib/client-assets.php
index a8af2b2b34..4fb94d05b9 100644
--- a/lib/client-assets.php
+++ b/lib/client-assets.php
@@ -88,11 +88,11 @@ function gutenberg_override_script( $scripts, $handle, $src, $deps = array(), $v
 	 * `WP_Dependencies::set_translations` will fall over on itself if setting
 	 * translations on the `wp-i18n` handle, since it internally adds `wp-i18n`
 	 * as a dependency of itself, exhausting memory. The same applies for the
-	 * polyfill script, which is a dependency _of_ `wp-i18n`.
+	 * polyfill and hooks scripts, which are dependencies _of_ `wp-i18n`.
 	 *
 	 * See: https://core.trac.wordpress.org/ticket/46089
 	 */
-	if ( 'wp-i18n' !== $handle && 'wp-polyfill' !== $handle ) {
+	if ( ! in_array( $handle, array( 'wp-i18n', 'wp-polyfill', 'wp-hooks' ), true ) ) {
 		$scripts->set_translations( $handle, 'default' );
 	}
 	if ( 'wp-i18n' === $handle ) {
@@ -316,7 +316,7 @@ function gutenberg_register_packages_styles( $styles ) {
 		$styles,
 		'wp-block-editor',
 		gutenberg_url( 'build/block-editor/style.css' ),
-		array( 'wp-components', 'wp-editor-font' ),
+		array( 'wp-components' ),
 		filemtime( gutenberg_dir_path() . 'build/editor/style.css' )
 	);
 	$styles->add_data( 'wp-block-editor', 'rtl', 'replace' );
@@ -695,7 +695,7 @@ function gutenberg_extend_block_editor_styles_html() {
 
 	$block_registry = WP_Block_Type_Registry::get_instance();
 
-	foreach ( $block_registry->get_all_registered() as $block_name => $block_type ) {
+	foreach ( $block_registry->get_all_registered() as $block_type ) {
 		if ( ! empty( $block_type->style ) ) {
 			$handles[] = $block_type->style;
 		}
diff --git a/lib/editor-settings.php b/lib/editor-settings.php
index e0970e761b..e50141f1f3 100644
--- a/lib/editor-settings.php
+++ b/lib/editor-settings.php
@@ -45,6 +45,7 @@ function gutenberg_get_common_block_editor_settings() {
 		'disableCustomGradients'                => get_theme_support( 'disable-custom-gradients' ),
 		'enableCustomLineHeight'                => get_theme_support( 'custom-line-height' ),
 		'enableCustomUnits'                     => get_theme_support( 'custom-units' ),
+		'enableCustomSpacing'                   => get_theme_support( 'custom-spacing' ),
 		'imageSizes'                            => $available_image_sizes,
 		'isRTL'                                 => is_rtl(),
 		'maxUploadFileSize'                     => $max_upload_size,
diff --git a/lib/experimental-default-theme.json b/lib/experimental-default-theme.json
index 1ad199567d..da910ca847 100644
--- a/lib/experimental-default-theme.json
+++ b/lib/experimental-default-theme.json
@@ -1,6 +1,6 @@
 {
-	"global": {
-		"settings": {
+	"settings": {
+		"defaults": {
 			"color": {
 				"palette": [
 					{
diff --git a/lib/experimental-i18n-theme.json b/lib/experimental-i18n-theme.json
index 4731a59df0..cd8d4f2c76 100644
--- a/lib/experimental-i18n-theme.json
+++ b/lib/experimental-i18n-theme.json
@@ -1,32 +1,18 @@
 {
 	"settings": {
-		"typography": {
-			"fontSizes": [
-				"name"
-			],
-			"fontStyles": [
-				"name"
-			],
-			"fontWeights": [
-				"name"
-			],
-			"fontFamilies": [
-				"name"
-			],
-			"textTransforms": [
-				"name"
-			],
-			"textDecorations": [
-				"name"
-			]
-		},
-		"color": {
-			"palette": [
-				"name"
-			],
-			"gradients": [
-				"name"
-			]
+		"*": {
+			"typography": {
+				"fontSizes": [ "name" ],
+				"fontStyles": [ "name" ],
+				"fontWeights": [ "name" ],
+				"fontFamilies": [ "name" ],
+				"textTransforms": [ "name" ],
+				"textDecorations": [ "name" ]
+			},
+			"color": {
+				"palette": [ "name" ],
+				"gradients": [ "name" ]
+			}
 		}
 	}
 }
diff --git a/lib/full-site-editing/block-templates.php b/lib/full-site-editing/block-templates.php
index bb5d26157f..5f706c2233 100644
--- a/lib/full-site-editing/block-templates.php
+++ b/lib/full-site-editing/block-templates.php
@@ -105,6 +105,40 @@ function _gutenberg_get_template_files( $template_type ) {
 	return $template_files;
 }
 
+/**
+ * Parses wp_template content and injects the current theme's
+ * stylesheet as a theme attribute into each wp_template_part
+ *
+ * @param string $template_content serialized wp_template content.
+ *
+ * @return string Updated wp_template content.
+ */
+function _inject_theme_attribute_in_content( $template_content ) {
+	$has_updated_content = false;
+	$new_content         = '';
+	$template_blocks     = parse_blocks( $template_content );
+
+	foreach ( $template_blocks as $key => $block ) {
+		if (
+			'core/template-part' === $block['blockName'] &&
+			! isset( $block['attrs']['theme'] )
+		) {
+			$template_blocks[ $key ]['attrs']['theme'] = wp_get_theme()->get_stylesheet();
+			$has_updated_content                       = true;
+		}
+	}
+
+	if ( $has_updated_content ) {
+		foreach ( $template_blocks as $block ) {
+			$new_content .= serialize_block( $block );
+		}
+
+		return $new_content;
+	}
+
+	return $template_content;
+}
+
 /**
  * Build a unified template object based on a theme file.
  *
@@ -115,12 +149,17 @@ function _gutenberg_get_template_files( $template_type ) {
  */
 function _gutenberg_build_template_result_from_file( $template_file, $template_type ) {
 	$default_template_types = gutenberg_get_default_template_types();
+	$template_content       = file_get_contents( $template_file['path'] );
+	$theme                  = wp_get_theme()->get_stylesheet();
+
+	if ( 'wp_template' === $template_type ) {
+		$template_content = _inject_theme_attribute_in_content( $template_content );
+	}
 
-	$theme               = wp_get_theme()->get_stylesheet();
 	$template            = new WP_Block_Template();
 	$template->id        = $theme . '//' . $template_file['slug'];
 	$template->theme     = $theme;
-	$template->content   = file_get_contents( $template_file['path'] );
+	$template->content   = $template_content;
 	$template->slug      = $template_file['slug'];
 	$template->is_custom = false;
 	$template->type      = $template_type;
diff --git a/lib/full-site-editing/default-template-types.php b/lib/full-site-editing/default-template-types.php
index 54cc722be9..132aef0224 100644
--- a/lib/full-site-editing/default-template-types.php
+++ b/lib/full-site-editing/default-template-types.php
@@ -27,7 +27,7 @@ function gutenberg_get_default_template_types() {
 		),
 		'singular'       => array(
 			'title'       => _x( 'Singular', 'Template name', 'gutenberg' ),
-			'description' => __( 'Used when a single entry is queried. This template will be overridden the Single, Post, and Page templates where appropriate', 'gutenberg' ),
+			'description' => __( 'Used when a single entry is queried. This template will be overridden by the Single, Post, and Page templates where appropriate', 'gutenberg' ),
 		),
 		'single'         => array(
 			'title'       => _x( 'Single', 'Template name', 'gutenberg' ),
@@ -43,7 +43,7 @@ function gutenberg_get_default_template_types() {
 		),
 		'archive'        => array(
 			'title'       => _x( 'Archive', 'Template name', 'gutenberg' ),
-			'description' => __( 'Used when multiple entries are queried. This template will be overridden the Category, Author, and Date templates where appropriate', 'gutenberg' ),
+			'description' => __( 'Used when multiple entries are queried. This template will be overridden by the Category, Author, and Date templates where appropriate', 'gutenberg' ),
 		),
 		'author'         => array(
 			'title'       => _x( 'Author Archive', 'Template name', 'gutenberg' ),
diff --git a/lib/full-site-editing/edit-site-export.php b/lib/full-site-editing/edit-site-export.php
index b299b51e16..d22a773525 100644
--- a/lib/full-site-editing/edit-site-export.php
+++ b/lib/full-site-editing/edit-site-export.php
@@ -6,15 +6,48 @@
  */
 
 /**
- * Output a ZIP file with an export of the current templates
- * and template parts from the site editor, and close the connection.
+ * Parses wp_template content and removes the theme attribute from
+ * each wp_template_part
+ *
+ * @param string $template_content serialized wp_template content.
+ *
+ * @return string Updated wp_template content.
  */
-function gutenberg_edit_site_export() {
-	// Create ZIP file and directories.
-	$filename = tempnam( get_temp_dir(), 'edit-site-export' );
+function _remove_theme_attribute_from_content( $template_content ) {
+	$has_updated_content = false;
+	$new_content         = '';
+	$template_blocks     = parse_blocks( $template_content );
+
+	foreach ( $template_blocks as $key => $block ) {
+		if ( 'core/template-part' === $block['blockName'] && isset( $block['attrs']['theme'] ) ) {
+			unset( $template_blocks[ $key ]['attrs']['theme'] );
+			$has_updated_content = true;
+		}
+	}
+
+	if ( $has_updated_content ) {
+		foreach ( $template_blocks as $block ) {
+			$new_content .= serialize_block( $block );
+		}
+
+		return $new_content;
+	}
+
+	return $template_content;
+}
+
+/**
+ * Creates an export of the current templates and
+ * template parts from the site editor at the
+ * specified path in a ZIP file.
+ *
+ * @param string $filename path of the ZIP file.
+ */
+function gutenberg_edit_site_export_create_zip( $filename ) {
 	if ( ! class_exists( 'ZipArchive' ) ) {
 		return new WP_Error( 'Zip Export not supported.' );
 	}
+
 	$zip = new ZipArchive();
 	$zip->open( $filename, ZipArchive::OVERWRITE );
 	$zip->addEmptyDir( 'theme' );
@@ -24,6 +57,8 @@ function gutenberg_edit_site_export() {
 	// Load templates into the zip file.
 	$templates = gutenberg_get_block_templates();
 	foreach ( $templates as $template ) {
+		$template->content = _remove_theme_attribute_from_content( $template->content );
+
 		$zip->addFromString(
 			'theme/block-templates/' . $template->slug . '.html',
 			$template->content
@@ -39,8 +74,19 @@ function gutenberg_edit_site_export() {
 		);
 	}
 
-	// Send back the ZIP file.
+	// Save changes to the zip file.
 	$zip->close();
+}
+
+/**
+ * Output a ZIP file with an export of the current templates
+ * and template parts from the site editor, and close the connection.
+ */
+function gutenberg_edit_site_export() {
+	// Create ZIP file in the temporary directory.
+	$filename = tempnam( get_temp_dir(), 'edit-site-export' );
+	gutenberg_edit_site_export_create_zip( $filename );
+
 	header( 'Content-Type: application/zip' );
 	header( 'Content-Disposition: attachment; filename=edit-site-export.zip' );
 	header( 'Content-Length: ' . filesize( $filename ) );
diff --git a/lib/full-site-editing/edit-site-page.php b/lib/full-site-editing/edit-site-page.php
index d73ad831a5..992e9b82a0 100644
--- a/lib/full-site-editing/edit-site-page.php
+++ b/lib/full-site-editing/edit-site-page.php
@@ -50,7 +50,7 @@ function gutenberg_get_editor_styles() {
 	);
 
 	/* translators: Use this to specify the CSS font family for the default font. */
-	$locale_font_family = esc_html_x( 'Noto Serif', 'CSS Font Family for Editor Font', 'gutenberg' );
+	$locale_font_family = '-apple-system, BlinkMacSystemFont,"Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell,"Helvetica Neue", sans-serif';
 	$styles[]           = array(
 		'css' => "body { font-family: '$locale_font_family' }",
 	);
diff --git a/lib/full-site-editing/template-loader.php b/lib/full-site-editing/template-loader.php
index 1ffdec27a3..e0047b81c2 100644
--- a/lib/full-site-editing/template-loader.php
+++ b/lib/full-site-editing/template-loader.php
@@ -154,15 +154,14 @@ function gutenberg_render_title_tag() {
 }
 
 /**
- * Renders the markup for the current template.
+ * Returns the markup for the current template.
  */
-function gutenberg_render_the_template() {
+function gutenberg_get_the_template_html() {
 	global $_wp_current_template_content;
 	global $wp_embed;
 
 	if ( ! $_wp_current_template_content ) {
-		echo '<h1>' . esc_html__( 'No matching template found', 'gutenberg' ) . '</h1>';
-		return;
+		return '<h1>' . esc_html__( 'No matching template found', 'gutenberg' ) . '</h1>';
 	}
 
 	$content = $wp_embed->run_shortcode( $_wp_current_template_content );
@@ -178,9 +177,14 @@ function gutenberg_render_the_template() {
 
 	// Wrap block template in .wp-site-blocks to allow for specific descendant styles
 	// (e.g. `.wp-site-blocks > *`).
-	echo '<div class="wp-site-blocks">';
-	echo $content; // phpcs:ignore WordPress.Security.EscapeOutput
-	echo '</div>';
+	return '<div class="wp-site-blocks">' . $content . '</div>';
+}
+
+/**
+ * Renders the markup for the current template.
+ */
+function gutenberg_render_the_template() {
+	echo gutenberg_get_the_template_html(); // phpcs:ignore WordPress.Security.EscapeOutput
 }
 
 /**
diff --git a/lib/global-styles.php b/lib/global-styles.php
index 5aab927771..697d2cf766 100644
--- a/lib/global-styles.php
+++ b/lib/global-styles.php
@@ -22,60 +22,61 @@ function gutenberg_experimental_global_styles_has_theme_json_support() {
  * @return array Config that adheres to the theme.json schema.
  */
 function gutenberg_experimental_global_styles_get_theme_support_settings( $settings ) {
-	$theme_settings                       = array();
-	$theme_settings['global']             = array();
-	$theme_settings['global']['settings'] = array();
+	$all_blocks                                = WP_Theme_JSON::ALL_BLOCKS_NAME;
+	$theme_settings                            = array();
+	$theme_settings['settings']                = array();
+	$theme_settings['settings'][ $all_blocks ] = array();
 
 	// Deprecated theme supports.
 	if ( isset( $settings['disableCustomColors'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['color'] ) ) {
-			$theme_settings['global']['settings']['color'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['color'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['color'] = array();
 		}
-		$theme_settings['global']['settings']['color']['custom'] = ! $settings['disableCustomColors'];
+		$theme_settings['settings'][ $all_blocks ]['color']['custom'] = ! $settings['disableCustomColors'];
 	}
 
 	if ( isset( $settings['disableCustomGradients'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['color'] ) ) {
-			$theme_settings['global']['settings']['color'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['color'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['color'] = array();
 		}
-		$theme_settings['global']['settings']['color']['customGradient'] = ! $settings['disableCustomGradients'];
+		$theme_settings['settings'][ $all_blocks ]['color']['customGradient'] = ! $settings['disableCustomGradients'];
 	}
 
 	if ( isset( $settings['disableCustomFontSizes'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['typography'] ) ) {
-			$theme_settings['global']['settings']['typography'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['typography'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['typography'] = array();
 		}
-		$theme_settings['global']['settings']['typography']['customFontSize'] = ! $settings['disableCustomFontSizes'];
+		$theme_settings['settings'][ $all_blocks ]['typography']['customFontSize'] = ! $settings['disableCustomFontSizes'];
 	}
 
 	if ( isset( $settings['enableCustomLineHeight'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['typography'] ) ) {
-			$theme_settings['global']['settings']['typography'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['typography'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['typography'] = array();
 		}
-		$theme_settings['global']['settings']['typography']['customLineHeight'] = $settings['enableCustomLineHeight'];
+		$theme_settings['settings'][ $all_blocks ]['typography']['customLineHeight'] = $settings['enableCustomLineHeight'];
 	}
 
 	if ( isset( $settings['enableCustomUnits'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['spacing'] ) ) {
-			$theme_settings['global']['settings']['spacing'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['spacing'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['spacing'] = array();
 		}
-		$theme_settings['global']['settings']['spacing']['units'] = ( true === $settings['enableCustomUnits'] ) ?
+		$theme_settings['settings'][ $all_blocks ]['spacing']['units'] = ( true === $settings['enableCustomUnits'] ) ?
 			array( 'px', 'em', 'rem', 'vh', 'vw' ) :
 			$settings['enableCustomUnits'];
 	}
 
 	if ( isset( $settings['colors'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['color'] ) ) {
-			$theme_settings['global']['settings']['color'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['color'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['color'] = array();
 		}
-		$theme_settings['global']['settings']['color']['palette'] = $settings['colors'];
+		$theme_settings['settings'][ $all_blocks ]['color']['palette'] = $settings['colors'];
 	}
 
 	if ( isset( $settings['gradients'] ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['color'] ) ) {
-			$theme_settings['global']['settings']['color'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['color'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['color'] = array();
 		}
-		$theme_settings['global']['settings']['color']['gradients'] = $settings['gradients'];
+		$theme_settings['settings'][ $all_blocks ]['color']['gradients'] = $settings['gradients'];
 	}
 
 	if ( isset( $settings['fontSizes'] ) ) {
@@ -86,25 +87,34 @@ function gutenberg_experimental_global_styles_get_theme_support_settings( $setti
 				$font_size['size'] = $font_size['size'] . 'px';
 			}
 		}
-		if ( ! isset( $theme_settings['global']['settings']['typography'] ) ) {
-			$theme_settings['global']['settings']['typography'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['typography'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['typography'] = array();
 		}
-		$theme_settings['global']['settings']['typography']['fontSizes'] = $font_sizes;
+		$theme_settings['settings'][ $all_blocks ]['typography']['fontSizes'] = $font_sizes;
 	}
 
-	// Things that didn't land in core yet, so didn't have a setting assigned.
-	if ( current( (array) get_theme_support( 'custom-spacing' ) ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['spacing'] ) ) {
-			$theme_settings['global']['settings']['spacing'] = array();
+	// This allows to make the plugin work with WordPress 5.7 beta
+	// as well as lower versions. The second check can be removed
+	// as soon as the minimum WordPress version for the plugin
+	// is bumped to 5.7.
+	if ( isset( $settings['enableCustomSpacing'] ) ) {
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['spacing'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['spacing'] = array();
+		}
+		$theme_settings['settings'][ $all_blocks ]['spacing']['customPadding'] = $settings['enableCustomSpacing'];
+	} else if ( current( (array) get_theme_support( 'custom-spacing' ) ) ) {
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['spacing'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['spacing'] = array();
 		}
-		$theme_settings['global']['settings']['spacing']['customPadding'] = true;
+		$theme_settings['settings'][ $all_blocks ]['spacing']['customPadding'] = true;
 	}
 
+	// Things that didn't land in core yet, so didn't have a setting assigned.
 	if ( current( (array) get_theme_support( 'experimental-link-color' ) ) ) {
-		if ( ! isset( $theme_settings['global']['settings']['color'] ) ) {
-			$theme_settings['global']['settings']['color'] = array();
+		if ( ! isset( $theme_settings['settings'][ $all_blocks ]['color'] ) ) {
+			$theme_settings['settings'][ $all_blocks ]['color'] = array();
 		}
-		$theme_settings['global']['settings']['color']['link'] = true;
+		$theme_settings['settings'][ $all_blocks ]['color']['link'] = true;
 	}
 
 	return $theme_settings;
@@ -196,6 +206,7 @@ function gutenberg_experimental_global_styles_settings( $settings ) {
 	unset( $settings['disableCustomGradients'] );
 	unset( $settings['enableCustomLineHeight'] );
 	unset( $settings['enableCustomUnits'] );
+	unset( $settings['enableCustomSpacing'] );
 	unset( $settings['fontSizes'] );
 	unset( $settings['gradients'] );
 
diff --git a/lib/load.php b/lib/load.php
index cff4bb2f49..0e5c8dba8f 100644
--- a/lib/load.php
+++ b/lib/load.php
@@ -40,6 +40,9 @@ if ( class_exists( 'WP_REST_Controller' ) ) {
 	if ( ! class_exists( 'WP_REST_Widgets_Controller' ) ) {
 		require_once __DIR__ . '/class-wp-rest-widgets-controller.php';
 	}
+	if ( ! class_exists( 'WP_REST_Pattern_Directory_Controller' ) ) {
+		require dirname( __FILE__ ) . '/class-wp-rest-pattern-directory-controller.php';
+	}
 	if ( ! class_exists( 'WP_REST_Menus_Controller' ) ) {
 		require_once __DIR__ . '/class-wp-rest-menus-controller.php';
 	}
@@ -105,6 +108,7 @@ require __DIR__ . '/experiments-page.php';
 require __DIR__ . '/class-wp-theme-json.php';
 require __DIR__ . '/class-wp-theme-json-resolver.php';
 require __DIR__ . '/global-styles.php';
+require __DIR__ . '/query-utils.php';
 
 if ( ! class_exists( 'WP_Block_Supports' ) ) {
 	require_once __DIR__ . '/class-wp-block-supports.php';
diff --git a/lib/query-utils.php b/lib/query-utils.php
new file mode 100644
index 0000000000..477772728a
--- /dev/null
+++ b/lib/query-utils.php
@@ -0,0 +1,67 @@
+<?php
+/**
+ * Utility functions used for handling Query block and blocks
+ * that
+ *
+ * @package gutenberg
+ */
+
+/**
+ * Helper function that constructs a WP_Query args object from
+ * a `Query` block properties.
+ *
+ * It's used in QueryLoop, QueryPaginationNumbers and QueryPaginationNext blocks.
+ *
+ * @param WP_Block $block Block instance.
+ * @param int      $page  Curren query's page.
+ *
+ * @return object Returns the constructed WP_Query object.
+ */
+function construct_wp_query_args( $block, $page ) {
+	$query = array(
+		'post_type'    => 'post',
+		'order'        => 'DESC',
+		'orderby'      => 'date',
+		'post__not_in' => array(),
+	);
+
+	if ( isset( $block->context['query'] ) ) {
+		if ( isset( $block->context['query']['postType'] ) ) {
+			$query['post_type'] = $block->context['query']['postType'];
+		}
+		if ( isset( $block->context['query']['sticky'] ) && ! empty( $block->context['query']['sticky'] ) ) {
+			$sticky = get_option( 'sticky_posts' );
+			if ( 'only' === $block->context['query']['sticky'] ) {
+				$query['post__in'] = $sticky;
+			} else {
+				$query['post__not_in'] = array_merge( $query['post__not_in'], $sticky );
+			}
+		}
+		if ( isset( $block->context['query']['exclude'] ) ) {
+			$query['post__not_in'] = array_merge( $query['post__not_in'], $block->context['query']['exclude'] );
+		}
+		if ( isset( $block->context['query']['perPage'] ) ) {
+			$query['offset']         = ( $block->context['query']['perPage'] * ( $page - 1 ) ) + $block->context['query']['offset'];
+			$query['posts_per_page'] = $block->context['query']['perPage'];
+		}
+		if ( isset( $block->context['query']['categoryIds'] ) ) {
+			$query['category__in'] = $block->context['query']['categoryIds'];
+		}
+		if ( isset( $block->context['query']['tagIds'] ) ) {
+			$query['tag__in'] = $block->context['query']['tagIds'];
+		}
+		if ( isset( $block->context['query']['order'] ) ) {
+			$query['order'] = strtoupper( $block->context['query']['order'] );
+		}
+		if ( isset( $block->context['query']['orderBy'] ) ) {
+			$query['orderby'] = $block->context['query']['orderBy'];
+		}
+		if ( isset( $block->context['query']['author'] ) ) {
+			$query['author'] = $block->context['query']['author'];
+		}
+		if ( isset( $block->context['query']['search'] ) ) {
+			$query['s'] = $block->context['query']['search'];
+		}
+	}
+	return $query;
+}
diff --git a/lib/rest-api.php b/lib/rest-api.php
index add3d35f24..dca744c2f4 100644
--- a/lib/rest-api.php
+++ b/lib/rest-api.php
@@ -10,6 +10,15 @@ if ( ! defined( 'ABSPATH' ) ) {
 	die( 'Silence is golden.' );
 }
 
+/**
+ * Registers the block pattern directory.
+ */
+function gutenberg_register_rest_pattern_directory() {
+	$block_directory_controller = new WP_REST_Pattern_Directory_Controller();
+	$block_directory_controller->register_routes();
+}
+add_filter( 'rest_api_init', 'gutenberg_register_rest_pattern_directory' );
+
 /**
  * Registers the menu locations area REST API routes.
  */
diff --git a/lib/template-canvas.php b/lib/template-canvas.php
index a0e0da7ea0..4d29113dbf 100644
--- a/lib/template-canvas.php
+++ b/lib/template-canvas.php
@@ -5,6 +5,11 @@
  * @package gutenberg
  */
 
+/**
+ * Get the template HTML.
+ * This needs to run before <head> so that blocks can add scripts and styles in wp_head().
+ */
+$template_html = gutenberg_get_the_template_html();
 ?>
 <!DOCTYPE html>
 <html <?php language_attributes(); ?>>
@@ -16,7 +21,7 @@
 <body <?php body_class(); ?>>
 <?php wp_body_open(); ?>
 
-<?php gutenberg_render_the_template(); ?>
+<?php echo $template_html; // phpcs:ignore WordPress.Security.EscapeOutput ?>
 
 <?php wp_footer(); ?>
 </body>
