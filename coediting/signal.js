/**
 * WordPress dependencies
 */
import { camelCaseKeysDeep } from '@wordpress/utils';

/**
 * Signal class that uses promise not event emitters and can be used standalone.
 * getSignal and updateSignal lets you update and fetch data regarding the shared key.
 */
export default class Signal {
	/**
	 * @param {string} url	Where signal should go.
	 * @param {string} coeditingId	Global id shared by url.
	 * @param {string} peerId	Peer identifier that maps to user id.
	 * @param {string} userId	User id that maps to peerId.
	 * @param {object} signalId	Signal generated by peer used to traverse and connect P2P
	 */
	constructor( url, coeditingId, peerId, userId, signalId ) {
		this.url = url;
		this.coeditingId = coeditingId;
		this.peerId = peerId;
		this.signalId = signalId;
		this.userId = userId;
	}

	/**
	 * Clear the key forcefully in kv.
	 * @return {Promise} promise object
	 */
	clearSignal() {
		const data = {
			peer_id: this.peerId,
			type: 'initial',
			signal: this.signalId,
			user_id: this.userId,
		};

		return window.fetch( this.url + '/remove', {
			credentials: 'same-origin',
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
				'X-WP-Nonce': window.wpApiSettings.nonce,
			},
			body: `${ encodeURIComponent( this.coeditingId ) }=${ window.btoa( JSON.stringify( data ) ) }`,
		} ).then(
			resp => resp.json()
		).then(
			camelCaseKeysDeep
		);
	}

	/**
	 * Called periodically in order to fetch the updated signal.
	 * @return {Promise} promise object
	 */
	getSignal() {
		return window.fetch( this.url + '/get/' + this.coeditingId, {
			credentials: 'same-origin',
			method: 'GET',
		} ).then(
			resp => resp.json()
		).then(
			camelCaseKeysDeep
		);
	}

	/**
	 * Updates the server route so that peers can get the data.
	 * @return {Promise} promise object
	 */
	updateSignal() {
		const data = {
			peer_id: this.peerId,
			signal: this.signalId,
			type: 'register',
			user_id: this.userId,
		};

		return window.fetch( this.url + '/set', {
			credentials: 'same-origin',
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
				'X-WP-Nonce': window.wpApiSettings.nonce,
			},
			body: `${ encodeURIComponent( this.coeditingId ) }=${ window.btoa( JSON.stringify( data ) ) }`,
		} ).then(
			resp => resp.json()
		).then(
			camelCaseKeysDeep
		);
	}
}
